
ultraSonic2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b54c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800b6d4  0800b6d4  0001b6d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b6f0  0800b6f0  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b6f0  0800b6f0  0001b6f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b6f8  0800b6f8  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b6f8  0800b6f8  0001b6f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b6fc  0800b6fc  0001b6fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800b700  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00000bb4  20000080  20000080  00020080  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20000c34  20000c34  00020080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001a514  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000042fc  00000000  00000000  0003a603  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001568  00000000  00000000  0003e900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001059  00000000  00000000  0003fe68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002601b  00000000  00000000  00040ec1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001ca62  00000000  00000000  00066edc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000dfaa2  00000000  00000000  0008393e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005dd8  00000000  00000000  001633e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008c  00000000  00000000  001691b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000080 	.word	0x20000080
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800b6bc 	.word	0x0800b6bc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000084 	.word	0x20000084
 80001c4:	0800b6bc 	.word	0x0800b6bc

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_uldivmod>:
 8000a74:	b953      	cbnz	r3, 8000a8c <__aeabi_uldivmod+0x18>
 8000a76:	b94a      	cbnz	r2, 8000a8c <__aeabi_uldivmod+0x18>
 8000a78:	2900      	cmp	r1, #0
 8000a7a:	bf08      	it	eq
 8000a7c:	2800      	cmpeq	r0, #0
 8000a7e:	bf1c      	itt	ne
 8000a80:	f04f 31ff 	movne.w	r1, #4294967295
 8000a84:	f04f 30ff 	movne.w	r0, #4294967295
 8000a88:	f000 b970 	b.w	8000d6c <__aeabi_idiv0>
 8000a8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a94:	f000 f806 	bl	8000aa4 <__udivmoddi4>
 8000a98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aa0:	b004      	add	sp, #16
 8000aa2:	4770      	bx	lr

08000aa4 <__udivmoddi4>:
 8000aa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa8:	9e08      	ldr	r6, [sp, #32]
 8000aaa:	460d      	mov	r5, r1
 8000aac:	4604      	mov	r4, r0
 8000aae:	460f      	mov	r7, r1
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d14a      	bne.n	8000b4a <__udivmoddi4+0xa6>
 8000ab4:	428a      	cmp	r2, r1
 8000ab6:	4694      	mov	ip, r2
 8000ab8:	d965      	bls.n	8000b86 <__udivmoddi4+0xe2>
 8000aba:	fab2 f382 	clz	r3, r2
 8000abe:	b143      	cbz	r3, 8000ad2 <__udivmoddi4+0x2e>
 8000ac0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ac4:	f1c3 0220 	rsb	r2, r3, #32
 8000ac8:	409f      	lsls	r7, r3
 8000aca:	fa20 f202 	lsr.w	r2, r0, r2
 8000ace:	4317      	orrs	r7, r2
 8000ad0:	409c      	lsls	r4, r3
 8000ad2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000ad6:	fa1f f58c 	uxth.w	r5, ip
 8000ada:	fbb7 f1fe 	udiv	r1, r7, lr
 8000ade:	0c22      	lsrs	r2, r4, #16
 8000ae0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000ae4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000ae8:	fb01 f005 	mul.w	r0, r1, r5
 8000aec:	4290      	cmp	r0, r2
 8000aee:	d90a      	bls.n	8000b06 <__udivmoddi4+0x62>
 8000af0:	eb1c 0202 	adds.w	r2, ip, r2
 8000af4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000af8:	f080 811c 	bcs.w	8000d34 <__udivmoddi4+0x290>
 8000afc:	4290      	cmp	r0, r2
 8000afe:	f240 8119 	bls.w	8000d34 <__udivmoddi4+0x290>
 8000b02:	3902      	subs	r1, #2
 8000b04:	4462      	add	r2, ip
 8000b06:	1a12      	subs	r2, r2, r0
 8000b08:	b2a4      	uxth	r4, r4
 8000b0a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b0e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b12:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b16:	fb00 f505 	mul.w	r5, r0, r5
 8000b1a:	42a5      	cmp	r5, r4
 8000b1c:	d90a      	bls.n	8000b34 <__udivmoddi4+0x90>
 8000b1e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b22:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b26:	f080 8107 	bcs.w	8000d38 <__udivmoddi4+0x294>
 8000b2a:	42a5      	cmp	r5, r4
 8000b2c:	f240 8104 	bls.w	8000d38 <__udivmoddi4+0x294>
 8000b30:	4464      	add	r4, ip
 8000b32:	3802      	subs	r0, #2
 8000b34:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b38:	1b64      	subs	r4, r4, r5
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	b11e      	cbz	r6, 8000b46 <__udivmoddi4+0xa2>
 8000b3e:	40dc      	lsrs	r4, r3
 8000b40:	2300      	movs	r3, #0
 8000b42:	e9c6 4300 	strd	r4, r3, [r6]
 8000b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d908      	bls.n	8000b60 <__udivmoddi4+0xbc>
 8000b4e:	2e00      	cmp	r6, #0
 8000b50:	f000 80ed 	beq.w	8000d2e <__udivmoddi4+0x28a>
 8000b54:	2100      	movs	r1, #0
 8000b56:	e9c6 0500 	strd	r0, r5, [r6]
 8000b5a:	4608      	mov	r0, r1
 8000b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b60:	fab3 f183 	clz	r1, r3
 8000b64:	2900      	cmp	r1, #0
 8000b66:	d149      	bne.n	8000bfc <__udivmoddi4+0x158>
 8000b68:	42ab      	cmp	r3, r5
 8000b6a:	d302      	bcc.n	8000b72 <__udivmoddi4+0xce>
 8000b6c:	4282      	cmp	r2, r0
 8000b6e:	f200 80f8 	bhi.w	8000d62 <__udivmoddi4+0x2be>
 8000b72:	1a84      	subs	r4, r0, r2
 8000b74:	eb65 0203 	sbc.w	r2, r5, r3
 8000b78:	2001      	movs	r0, #1
 8000b7a:	4617      	mov	r7, r2
 8000b7c:	2e00      	cmp	r6, #0
 8000b7e:	d0e2      	beq.n	8000b46 <__udivmoddi4+0xa2>
 8000b80:	e9c6 4700 	strd	r4, r7, [r6]
 8000b84:	e7df      	b.n	8000b46 <__udivmoddi4+0xa2>
 8000b86:	b902      	cbnz	r2, 8000b8a <__udivmoddi4+0xe6>
 8000b88:	deff      	udf	#255	; 0xff
 8000b8a:	fab2 f382 	clz	r3, r2
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	f040 8090 	bne.w	8000cb4 <__udivmoddi4+0x210>
 8000b94:	1a8a      	subs	r2, r1, r2
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ba4:	fb07 2015 	mls	r0, r7, r5, r2
 8000ba8:	0c22      	lsrs	r2, r4, #16
 8000baa:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000bae:	fb0e f005 	mul.w	r0, lr, r5
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x124>
 8000bb6:	eb1c 0202 	adds.w	r2, ip, r2
 8000bba:	f105 38ff 	add.w	r8, r5, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x122>
 8000bc0:	4290      	cmp	r0, r2
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2b8>
 8000bc6:	4645      	mov	r5, r8
 8000bc8:	1a12      	subs	r2, r2, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000bd0:	fb07 2210 	mls	r2, r7, r0, r2
 8000bd4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x14e>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x14c>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2c2>
 8000bf0:	4610      	mov	r0, r2
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000bfa:	e79f      	b.n	8000b3c <__udivmoddi4+0x98>
 8000bfc:	f1c1 0720 	rsb	r7, r1, #32
 8000c00:	408b      	lsls	r3, r1
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa05 f401 	lsl.w	r4, r5, r1
 8000c0e:	fa20 f307 	lsr.w	r3, r0, r7
 8000c12:	40fd      	lsrs	r5, r7
 8000c14:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c18:	4323      	orrs	r3, r4
 8000c1a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c1e:	fa1f fe8c 	uxth.w	lr, ip
 8000c22:	fb09 5518 	mls	r5, r9, r8, r5
 8000c26:	0c1c      	lsrs	r4, r3, #16
 8000c28:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c2c:	fb08 f50e 	mul.w	r5, r8, lr
 8000c30:	42a5      	cmp	r5, r4
 8000c32:	fa02 f201 	lsl.w	r2, r2, r1
 8000c36:	fa00 f001 	lsl.w	r0, r0, r1
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b0>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2b4>
 8000c48:	42a5      	cmp	r5, r4
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2b4>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4464      	add	r4, ip
 8000c54:	1b64      	subs	r4, r4, r5
 8000c56:	b29d      	uxth	r5, r3
 8000c58:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c5c:	fb09 4413 	mls	r4, r9, r3, r4
 8000c60:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000c64:	fb03 fe0e 	mul.w	lr, r3, lr
 8000c68:	45a6      	cmp	lr, r4
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1da>
 8000c6c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c70:	f103 35ff 	add.w	r5, r3, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2ac>
 8000c76:	45a6      	cmp	lr, r4
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2ac>
 8000c7a:	3b02      	subs	r3, #2
 8000c7c:	4464      	add	r4, ip
 8000c7e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c82:	fba3 9502 	umull	r9, r5, r3, r2
 8000c86:	eba4 040e 	sub.w	r4, r4, lr
 8000c8a:	42ac      	cmp	r4, r5
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46ae      	mov	lr, r5
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x29c>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x298>
 8000c94:	b156      	cbz	r6, 8000cac <__udivmoddi4+0x208>
 8000c96:	ebb0 0208 	subs.w	r2, r0, r8
 8000c9a:	eb64 040e 	sbc.w	r4, r4, lr
 8000c9e:	fa04 f707 	lsl.w	r7, r4, r7
 8000ca2:	40ca      	lsrs	r2, r1
 8000ca4:	40cc      	lsrs	r4, r1
 8000ca6:	4317      	orrs	r7, r2
 8000ca8:	e9c6 7400 	strd	r7, r4, [r6]
 8000cac:	4618      	mov	r0, r3
 8000cae:	2100      	movs	r1, #0
 8000cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb4:	f1c3 0120 	rsb	r1, r3, #32
 8000cb8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000cbc:	fa20 f201 	lsr.w	r2, r0, r1
 8000cc0:	fa25 f101 	lsr.w	r1, r5, r1
 8000cc4:	409d      	lsls	r5, r3
 8000cc6:	432a      	orrs	r2, r5
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd4:	fb07 1510 	mls	r5, r7, r0, r1
 8000cd8:	0c11      	lsrs	r1, r2, #16
 8000cda:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000cde:	fb00 f50e 	mul.w	r5, r0, lr
 8000ce2:	428d      	cmp	r5, r1
 8000ce4:	fa04 f403 	lsl.w	r4, r4, r3
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x258>
 8000cea:	eb1c 0101 	adds.w	r1, ip, r1
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b0>
 8000cf4:	428d      	cmp	r5, r1
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b0>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4461      	add	r1, ip
 8000cfc:	1b49      	subs	r1, r1, r5
 8000cfe:	b292      	uxth	r2, r2
 8000d00:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d04:	fb07 1115 	mls	r1, r7, r5, r1
 8000d08:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d0c:	fb05 f10e 	mul.w	r1, r5, lr
 8000d10:	4291      	cmp	r1, r2
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x282>
 8000d14:	eb1c 0202 	adds.w	r2, ip, r2
 8000d18:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2a8>
 8000d1e:	4291      	cmp	r1, r2
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2a8>
 8000d22:	3d02      	subs	r5, #2
 8000d24:	4462      	add	r2, ip
 8000d26:	1a52      	subs	r2, r2, r1
 8000d28:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0xfc>
 8000d2e:	4631      	mov	r1, r6
 8000d30:	4630      	mov	r0, r6
 8000d32:	e708      	b.n	8000b46 <__udivmoddi4+0xa2>
 8000d34:	4639      	mov	r1, r7
 8000d36:	e6e6      	b.n	8000b06 <__udivmoddi4+0x62>
 8000d38:	4610      	mov	r0, r2
 8000d3a:	e6fb      	b.n	8000b34 <__udivmoddi4+0x90>
 8000d3c:	4548      	cmp	r0, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f0>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f0>
 8000d4c:	4645      	mov	r5, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x282>
 8000d50:	462b      	mov	r3, r5
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1da>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x258>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b0>
 8000d5c:	3d02      	subs	r5, #2
 8000d5e:	4462      	add	r2, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x124>
 8000d62:	4608      	mov	r0, r1
 8000d64:	e70a      	b.n	8000b7c <__udivmoddi4+0xd8>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x14e>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <reset_buffer>:
#include "average_filter.h"

void reset_buffer(average_filter *filter)
{
 8000d70:	b480      	push	{r7}
 8000d72:	b085      	sub	sp, #20
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
    filter->sum = 0;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
    filter->out = 0.0;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	f04f 0200 	mov.w	r2, #0
 8000d84:	619a      	str	r2, [r3, #24]
    filter->count = 0;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	839a      	strh	r2, [r3, #28]
    
    for (int i = 0; i < AVERAGE_LENGTH; i++)
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	e007      	b.n	8000da2 <reset_buffer+0x32>
    {
        filter->buffer[i] = 0;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	68fa      	ldr	r2, [r7, #12]
 8000d96:	2100      	movs	r1, #0
 8000d98:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < AVERAGE_LENGTH; i++)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	2b09      	cmp	r3, #9
 8000da6:	ddf4      	ble.n	8000d92 <reset_buffer+0x22>
    }
    return;
 8000da8:	bf00      	nop
}
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <apply_filter>:

void apply_filter(average_filter *filter, int16_t input)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	807b      	strh	r3, [r7, #2]
    filter->sum -= filter->buffer[filter->count];
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	695b      	ldr	r3, [r3, #20]
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	8b92      	ldrh	r2, [r2, #28]
 8000dc8:	4611      	mov	r1, r2
 8000dca:	687a      	ldr	r2, [r7, #4]
 8000dcc:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8000dd0:	1a9a      	subs	r2, r3, r2
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	615a      	str	r2, [r3, #20]
    filter->buffer[filter->count] = input;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	8b9b      	ldrh	r3, [r3, #28]
 8000dda:	4619      	mov	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	887a      	ldrh	r2, [r7, #2]
 8000de0:	f823 2011 	strh.w	r2, [r3, r1, lsl #1]
    filter->sum += filter->buffer[filter->count];
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	695b      	ldr	r3, [r3, #20]
 8000de8:	687a      	ldr	r2, [r7, #4]
 8000dea:	8b92      	ldrh	r2, [r2, #28]
 8000dec:	4611      	mov	r1, r2
 8000dee:	687a      	ldr	r2, [r7, #4]
 8000df0:	f932 2011 	ldrsh.w	r2, [r2, r1, lsl #1]
 8000df4:	441a      	add	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	615a      	str	r2, [r3, #20]
    
    filter->count = (filter->count + 1) % AVERAGE_LENGTH;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	8b9b      	ldrh	r3, [r3, #28]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	4b10      	ldr	r3, [pc, #64]	; (8000e44 <apply_filter+0x90>)
 8000e02:	fb83 1302 	smull	r1, r3, r3, r2
 8000e06:	1099      	asrs	r1, r3, #2
 8000e08:	17d3      	asrs	r3, r2, #31
 8000e0a:	1ac9      	subs	r1, r1, r3
 8000e0c:	460b      	mov	r3, r1
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	440b      	add	r3, r1
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	1ad1      	subs	r1, r2, r3
 8000e16:	b28a      	uxth	r2, r1
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	839a      	strh	r2, [r3, #28]

    filter->out = (filter->sum * 1.0f) / AVERAGE_LENGTH;
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	695b      	ldr	r3, [r3, #20]
 8000e20:	ee07 3a90 	vmov	s15, r3
 8000e24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000e28:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000e2c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8000e36:	bf00      	nop
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	66666667 	.word	0x66666667

08000e48 <updateDiffPulse>:
    // Enable Output Compare Mode
    HAL_TIM_OC_Start_IT(h_time, Channel);
}

void updateDiffPulse(Encoder *enc, int32_t *diffPulse)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b085      	sub	sp, #20
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
 8000e50:	6039      	str	r1, [r7, #0]
    uint16_t cur_counter = enc->htim->Instance->CNT;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	699b      	ldr	r3, [r3, #24]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e5a:	81fb      	strh	r3, [r7, #14]
    if (cur_counter > enc->pre_counter)
 8000e5c:	89fa      	ldrh	r2, [r7, #14]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	691b      	ldr	r3, [r3, #16]
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d923      	bls.n	8000eae <updateDiffPulse+0x66>
    {
        if (__HAL_TIM_IS_TIM_COUNTING_DOWN(enc->htim))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	699b      	ldr	r3, [r3, #24]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f003 0310 	and.w	r3, r3, #16
 8000e72:	2b10      	cmp	r3, #16
 8000e74:	d113      	bne.n	8000e9e <updateDiffPulse+0x56>
        {
            *diffPulse = -((enc->pre_counter - cur_counter + MAX_COUNTER) % MAX_COUNTER);
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	691a      	ldr	r2, [r3, #16]
 8000e7a:	89fb      	ldrh	r3, [r7, #14]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	f503 427f 	add.w	r2, r3, #65280	; 0xff00
 8000e82:	32ff      	adds	r2, #255	; 0xff
 8000e84:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <updateDiffPulse+0xb8>)
 8000e86:	fba3 1302 	umull	r1, r3, r3, r2
 8000e8a:	0bd9      	lsrs	r1, r3, #15
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	041b      	lsls	r3, r3, #16
 8000e90:	1a5b      	subs	r3, r3, r1
 8000e92:	1ad1      	subs	r1, r2, r3
 8000e94:	424b      	negs	r3, r1
 8000e96:	461a      	mov	r2, r3
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	601a      	str	r2, [r3, #0]
        else
        {
            *diffPulse = (cur_counter - enc->pre_counter + MAX_COUNTER) % MAX_COUNTER;
        }
    }
    return;
 8000e9c:	e02a      	b.n	8000ef4 <updateDiffPulse+0xac>
            *diffPulse = cur_counter - enc->pre_counter;
 8000e9e:	89fa      	ldrh	r2, [r7, #14]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	691b      	ldr	r3, [r3, #16]
 8000ea4:	1ad3      	subs	r3, r2, r3
 8000ea6:	461a      	mov	r2, r3
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	601a      	str	r2, [r3, #0]
    return;
 8000eac:	e022      	b.n	8000ef4 <updateDiffPulse+0xac>
        if (__HAL_TIM_IS_TIM_COUNTING_DOWN(enc->htim))
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	699b      	ldr	r3, [r3, #24]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f003 0310 	and.w	r3, r3, #16
 8000eba:	2b10      	cmp	r3, #16
 8000ebc:	d107      	bne.n	8000ece <updateDiffPulse+0x86>
            *diffPulse = -(enc->pre_counter - cur_counter);
 8000ebe:	89fa      	ldrh	r2, [r7, #14]
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	691b      	ldr	r3, [r3, #16]
 8000ec4:	1ad3      	subs	r3, r2, r3
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	601a      	str	r2, [r3, #0]
    return;
 8000ecc:	e012      	b.n	8000ef4 <updateDiffPulse+0xac>
            *diffPulse = (cur_counter - enc->pre_counter + MAX_COUNTER) % MAX_COUNTER;
 8000ece:	89fa      	ldrh	r2, [r7, #14]
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	691b      	ldr	r3, [r3, #16]
 8000ed4:	1ad3      	subs	r3, r2, r3
 8000ed6:	f503 427f 	add.w	r2, r3, #65280	; 0xff00
 8000eda:	32ff      	adds	r2, #255	; 0xff
 8000edc:	4b08      	ldr	r3, [pc, #32]	; (8000f00 <updateDiffPulse+0xb8>)
 8000ede:	fba3 1302 	umull	r1, r3, r3, r2
 8000ee2:	0bd9      	lsrs	r1, r3, #15
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	041b      	lsls	r3, r3, #16
 8000ee8:	1a5b      	subs	r3, r3, r1
 8000eea:	1ad1      	subs	r1, r2, r3
 8000eec:	460a      	mov	r2, r1
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	601a      	str	r2, [r3, #0]
    return;
 8000ef2:	bf00      	nop
}
 8000ef4:	3714      	adds	r7, #20
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	80008001 	.word	0x80008001
 8000f04:	00000000 	.word	0x00000000

08000f08 <updateEncoder>:
 * then the timer is set in X4 mode (TIM_ENCODERMODE_TI12)
 * and we need to divide the pulses counter by two, because
 * they include the pulses for both the channels
 */
void updateEncoder(Encoder *enc, bool mode4X)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b084      	sub	sp, #16
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
 8000f10:	460b      	mov	r3, r1
 8000f12:	70fb      	strb	r3, [r7, #3]
    int32_t diffPulse = 0;
 8000f14:	2300      	movs	r3, #0
 8000f16:	60fb      	str	r3, [r7, #12]
    updateDiffPulse(enc, &diffPulse);
 8000f18:	f107 030c 	add.w	r3, r7, #12
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	6878      	ldr	r0, [r7, #4]
 8000f20:	f7ff ff92 	bl	8000e48 <updateDiffPulse>
    enc->_RPM = (((diffPulse * 1.0) / PULSE_PER_REVOLUTION) * 60 * 1000) / TIME_SAMPLING;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	4618      	mov	r0, r3
 8000f28:	f7ff faa0 	bl	800046c <__aeabi_i2d>
 8000f2c:	a346      	add	r3, pc, #280	; (adr r3, 8001048 <updateEncoder+0x140>)
 8000f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f32:	f7ff fc2f 	bl	8000794 <__aeabi_ddiv>
 8000f36:	4602      	mov	r2, r0
 8000f38:	460b      	mov	r3, r1
 8000f3a:	4610      	mov	r0, r2
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f04f 0200 	mov.w	r2, #0
 8000f42:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <updateEncoder+0x130>)
 8000f44:	f7ff fafc 	bl	8000540 <__aeabi_dmul>
 8000f48:	4602      	mov	r2, r0
 8000f4a:	460b      	mov	r3, r1
 8000f4c:	4610      	mov	r0, r2
 8000f4e:	4619      	mov	r1, r3
 8000f50:	f04f 0200 	mov.w	r2, #0
 8000f54:	4b39      	ldr	r3, [pc, #228]	; (800103c <updateEncoder+0x134>)
 8000f56:	f7ff faf3 	bl	8000540 <__aeabi_dmul>
 8000f5a:	4602      	mov	r2, r0
 8000f5c:	460b      	mov	r3, r1
 8000f5e:	4610      	mov	r0, r2
 8000f60:	4619      	mov	r1, r3
 8000f62:	f04f 0200 	mov.w	r2, #0
 8000f66:	4b36      	ldr	r3, [pc, #216]	; (8001040 <updateEncoder+0x138>)
 8000f68:	f7ff fc14 	bl	8000794 <__aeabi_ddiv>
 8000f6c:	4602      	mov	r2, r0
 8000f6e:	460b      	mov	r3, r1
 8000f70:	6879      	ldr	r1, [r7, #4]
 8000f72:	e9c1 2300 	strd	r2, r3, [r1]

    // if ((TIM3->SMCR & 0x3) == 0x3 && (TIM4->SMCR & 0x3) == 0x3)
    if (mode4X)
 8000f76:	78fb      	ldrb	r3, [r7, #3]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d00d      	beq.n	8000f98 <updateEncoder+0x90>
    {
        enc->_RPM /= 2;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f82:	f04f 0200 	mov.w	r2, #0
 8000f86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f8a:	f7ff fc03 	bl	8000794 <__aeabi_ddiv>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	460b      	mov	r3, r1
 8000f92:	6879      	ldr	r1, [r7, #4]
 8000f94:	e9c1 2300 	strd	r2, r3, [r1]
    }
    enc->_PWM = map(enc->_RPM, 0, MAX_RPM, 0, MAX_PID_VALUE);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	4b28      	ldr	r3, [pc, #160]	; (8001044 <updateEncoder+0x13c>)
 8000fa4:	f7ff fbf6 	bl	8000794 <__aeabi_ddiv>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	460b      	mov	r3, r1
 8000fac:	4610      	mov	r0, r2
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f04f 0200 	mov.w	r2, #0
 8000fb4:	4b21      	ldr	r3, [pc, #132]	; (800103c <updateEncoder+0x134>)
 8000fb6:	f7ff fac3 	bl	8000540 <__aeabi_dmul>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	460b      	mov	r3, r1
 8000fbe:	4610      	mov	r0, r2
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	f04f 0200 	mov.w	r2, #0
 8000fc6:	f04f 0300 	mov.w	r3, #0
 8000fca:	f7ff f903 	bl	80001d4 <__adddf3>
 8000fce:	4602      	mov	r2, r0
 8000fd0:	460b      	mov	r3, r1
 8000fd2:	6879      	ldr	r1, [r7, #4]
 8000fd4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    enc->pre_counter = enc->htim->Instance->CNT;
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	611a      	str	r2, [r3, #16]
    if (enc->_RPM < 0) enc->Direction = BACKWARD;
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fea:	f04f 0200 	mov.w	r2, #0
 8000fee:	f04f 0300 	mov.w	r3, #0
 8000ff2:	f7ff fd17 	bl	8000a24 <__aeabi_dcmplt>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <updateEncoder+0xfc>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	22ff      	movs	r2, #255	; 0xff
 8001000:	751a      	strb	r2, [r3, #20]
    else if (enc->_RPM > 0) enc->Direction = FORWARD;
    else enc->Direction = STOP;
}
 8001002:	e012      	b.n	800102a <updateEncoder+0x122>
    else if (enc->_RPM > 0) enc->Direction = FORWARD;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	e9d3 0100 	ldrd	r0, r1, [r3]
 800100a:	f04f 0200 	mov.w	r2, #0
 800100e:	f04f 0300 	mov.w	r3, #0
 8001012:	f7ff fd25 	bl	8000a60 <__aeabi_dcmpgt>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d003      	beq.n	8001024 <updateEncoder+0x11c>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2201      	movs	r2, #1
 8001020:	751a      	strb	r2, [r3, #20]
}
 8001022:	e002      	b.n	800102a <updateEncoder+0x122>
    else enc->Direction = STOP;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	2200      	movs	r2, #0
 8001028:	751a      	strb	r2, [r3, #20]
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	f3af 8000 	nop.w
 8001038:	404e0000 	.word	0x404e0000
 800103c:	408f4000 	.word	0x408f4000
 8001040:	40490000 	.word	0x40490000
 8001044:	40690000 	.word	0x40690000
 8001048:	00000000 	.word	0x00000000
 800104c:	40906800 	.word	0x40906800

08001050 <Encoder_Init>:

void Encoder_Init(Encoder *p1, TIM_HandleTypeDef *h_time)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
    p1->_RPM = 0;
 800105a:	6879      	ldr	r1, [r7, #4]
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	e9c1 2300 	strd	r2, r3, [r1]
    p1->_PWM = 0;
 8001068:	6879      	ldr	r1, [r7, #4]
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	f04f 0300 	mov.w	r3, #0
 8001072:	e9c1 2302 	strd	r2, r3, [r1, #8]
    p1->pre_counter = 0;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
    p1->htim = h_time;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	683a      	ldr	r2, [r7, #0]
 8001080:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Encoder_Start(p1->htim, TIM_CHANNEL_ALL) != HAL_OK)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	699b      	ldr	r3, [r3, #24]
 8001086:	213c      	movs	r1, #60	; 0x3c
 8001088:	4618      	mov	r0, r3
 800108a:	f005 fe05 	bl	8006c98 <HAL_TIM_Encoder_Start>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <Encoder_Init+0x48>
        Error_Handler(); // write in main.c, maybe turn some led on?
 8001094:	f001 f857 	bl	8002146 <Error_Handler>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <Motor_Init>:
#include "PWMcontrol.h"



void Motor_Init(PWMcontrol *PWMcontrol, TIM_HandleTypeDef *htim, uint32_t Channel1, uint32_t Channel2)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b085      	sub	sp, #20
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	603b      	str	r3, [r7, #0]
    PWMcontrol->htim = htim;
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	68ba      	ldr	r2, [r7, #8]
 80010b2:	601a      	str	r2, [r3, #0]
    PWMcontrol->Channel1 = Channel1;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	b29a      	uxth	r2, r3
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	809a      	strh	r2, [r3, #4]
    PWMcontrol->Channel2 = Channel2;
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	b29a      	uxth	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	80da      	strh	r2, [r3, #6]
//    HAL_TIM_PWM_Start(htim, Channel1);
//    HAL_TIM_PWM_Start(htim, Channel2);
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, 0);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	889b      	ldrh	r3, [r3, #4]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d105      	bne.n	80010d8 <Motor_Init+0x38>
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2200      	movs	r2, #0
 80010d4:	635a      	str	r2, [r3, #52]	; 0x34
 80010d6:	e018      	b.n	800110a <Motor_Init+0x6a>
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	889b      	ldrh	r3, [r3, #4]
 80010dc:	2b04      	cmp	r3, #4
 80010de:	d105      	bne.n	80010ec <Motor_Init+0x4c>
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	681a      	ldr	r2, [r3, #0]
 80010e6:	2300      	movs	r3, #0
 80010e8:	6393      	str	r3, [r2, #56]	; 0x38
 80010ea:	e00e      	b.n	800110a <Motor_Init+0x6a>
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	889b      	ldrh	r3, [r3, #4]
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d105      	bne.n	8001100 <Motor_Init+0x60>
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	2300      	movs	r3, #0
 80010fc:	63d3      	str	r3, [r2, #60]	; 0x3c
 80010fe:	e004      	b.n	800110a <Motor_Init+0x6a>
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	2300      	movs	r3, #0
 8001108:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	88db      	ldrh	r3, [r3, #6]
 800110e:	2b00      	cmp	r3, #0
 8001110:	d105      	bne.n	800111e <Motor_Init+0x7e>
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2200      	movs	r2, #0
 800111a:	635a      	str	r2, [r3, #52]	; 0x34
    return;
 800111c:	e019      	b.n	8001152 <Motor_Init+0xb2>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	88db      	ldrh	r3, [r3, #6]
 8001122:	2b04      	cmp	r3, #4
 8001124:	d105      	bne.n	8001132 <Motor_Init+0x92>
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	2300      	movs	r3, #0
 800112e:	6393      	str	r3, [r2, #56]	; 0x38
    return;
 8001130:	e00f      	b.n	8001152 <Motor_Init+0xb2>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	88db      	ldrh	r3, [r3, #6]
 8001136:	2b08      	cmp	r3, #8
 8001138:	d105      	bne.n	8001146 <Motor_Init+0xa6>
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	681a      	ldr	r2, [r3, #0]
 8001140:	2300      	movs	r3, #0
 8001142:	63d3      	str	r3, [r2, #60]	; 0x3c
    return;
 8001144:	e005      	b.n	8001152 <Motor_Init+0xb2>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	2300      	movs	r3, #0
 800114e:	6413      	str	r3, [r2, #64]	; 0x40
    return;
 8001150:	bf00      	nop
}
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr

0800115c <Servo_Init>:

void Servo_Init(PWMcontrol *PWMcontrol, TIM_HandleTypeDef *htim, uint32_t Channel, uint16_t PWM_middle)
{
 800115c:	b480      	push	{r7}
 800115e:	b085      	sub	sp, #20
 8001160:	af00      	add	r7, sp, #0
 8001162:	60f8      	str	r0, [r7, #12]
 8001164:	60b9      	str	r1, [r7, #8]
 8001166:	607a      	str	r2, [r7, #4]
 8001168:	807b      	strh	r3, [r7, #2]
    PWMcontrol->htim = htim;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	68ba      	ldr	r2, [r7, #8]
 800116e:	601a      	str	r2, [r3, #0]
    PWMcontrol->Channel1 = Channel;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	b29a      	uxth	r2, r3
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	809a      	strh	r2, [r3, #4]
//	HAL_TIM_PWM_Start(htim, Channel);
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM_middle);
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	889b      	ldrh	r3, [r3, #4]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d105      	bne.n	800118c <Servo_Init+0x30>
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	635a      	str	r2, [r3, #52]	; 0x34
    return;
 800118a:	e019      	b.n	80011c0 <Servo_Init+0x64>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM_middle);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	889b      	ldrh	r3, [r3, #4]
 8001190:	2b04      	cmp	r3, #4
 8001192:	d105      	bne.n	80011a0 <Servo_Init+0x44>
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	681a      	ldr	r2, [r3, #0]
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	6393      	str	r3, [r2, #56]	; 0x38
    return;
 800119e:	e00f      	b.n	80011c0 <Servo_Init+0x64>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM_middle);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	889b      	ldrh	r3, [r3, #4]
 80011a4:	2b08      	cmp	r3, #8
 80011a6:	d105      	bne.n	80011b4 <Servo_Init+0x58>
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	887b      	ldrh	r3, [r7, #2]
 80011b0:	63d3      	str	r3, [r2, #60]	; 0x3c
    return;
 80011b2:	e005      	b.n	80011c0 <Servo_Init+0x64>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM_middle);
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	6413      	str	r3, [r2, #64]	; 0x40
    return;
 80011be:	bf00      	nop
}
 80011c0:	3714      	adds	r7, #20
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <set_motor>:

void set_motor(PWMcontrol *PWMcontrol, int8_t direction, uint16_t PWM)
{
 80011ca:	b480      	push	{r7}
 80011cc:	b083      	sub	sp, #12
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	6078      	str	r0, [r7, #4]
 80011d2:	460b      	mov	r3, r1
 80011d4:	70fb      	strb	r3, [r7, #3]
 80011d6:	4613      	mov	r3, r2
 80011d8:	803b      	strh	r3, [r7, #0]
    if (direction == BACKWARD)
 80011da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80011de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e2:	d146      	bne.n	8001272 <set_motor+0xa8>
    {
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	889b      	ldrh	r3, [r3, #4]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d105      	bne.n	80011f8 <set_motor+0x2e>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	883a      	ldrh	r2, [r7, #0]
 80011f4:	635a      	str	r2, [r3, #52]	; 0x34
 80011f6:	e018      	b.n	800122a <set_motor+0x60>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	889b      	ldrh	r3, [r3, #4]
 80011fc:	2b04      	cmp	r3, #4
 80011fe:	d105      	bne.n	800120c <set_motor+0x42>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	681a      	ldr	r2, [r3, #0]
 8001206:	883b      	ldrh	r3, [r7, #0]
 8001208:	6393      	str	r3, [r2, #56]	; 0x38
 800120a:	e00e      	b.n	800122a <set_motor+0x60>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	889b      	ldrh	r3, [r3, #4]
 8001210:	2b08      	cmp	r3, #8
 8001212:	d105      	bne.n	8001220 <set_motor+0x56>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	883b      	ldrh	r3, [r7, #0]
 800121c:	63d3      	str	r3, [r2, #60]	; 0x3c
 800121e:	e004      	b.n	800122a <set_motor+0x60>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	681a      	ldr	r2, [r3, #0]
 8001226:	883b      	ldrh	r3, [r7, #0]
 8001228:	6413      	str	r3, [r2, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	88db      	ldrh	r3, [r3, #6]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d105      	bne.n	800123e <set_motor+0x74>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2200      	movs	r2, #0
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
    else
    {
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, 0);
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
    }
    return;
 800123c:	e0ab      	b.n	8001396 <set_motor+0x1cc>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	88db      	ldrh	r3, [r3, #6]
 8001242:	2b04      	cmp	r3, #4
 8001244:	d105      	bne.n	8001252 <set_motor+0x88>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2300      	movs	r3, #0
 800124e:	6393      	str	r3, [r2, #56]	; 0x38
 8001250:	e0a0      	b.n	8001394 <set_motor+0x1ca>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	88db      	ldrh	r3, [r3, #6]
 8001256:	2b08      	cmp	r3, #8
 8001258:	d105      	bne.n	8001266 <set_motor+0x9c>
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	2300      	movs	r3, #0
 8001262:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001264:	e096      	b.n	8001394 <set_motor+0x1ca>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	2300      	movs	r3, #0
 800126e:	6413      	str	r3, [r2, #64]	; 0x40
    return;
 8001270:	e091      	b.n	8001396 <set_motor+0x1cc>
    else if (direction == FORWARD)
 8001272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d146      	bne.n	8001308 <set_motor+0x13e>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, 0);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	889b      	ldrh	r3, [r3, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d105      	bne.n	800128e <set_motor+0xc4>
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2200      	movs	r2, #0
 800128a:	635a      	str	r2, [r3, #52]	; 0x34
 800128c:	e018      	b.n	80012c0 <set_motor+0xf6>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	889b      	ldrh	r3, [r3, #4]
 8001292:	2b04      	cmp	r3, #4
 8001294:	d105      	bne.n	80012a2 <set_motor+0xd8>
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	2300      	movs	r3, #0
 800129e:	6393      	str	r3, [r2, #56]	; 0x38
 80012a0:	e00e      	b.n	80012c0 <set_motor+0xf6>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	889b      	ldrh	r3, [r3, #4]
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d105      	bne.n	80012b6 <set_motor+0xec>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	2300      	movs	r3, #0
 80012b2:	63d3      	str	r3, [r2, #60]	; 0x3c
 80012b4:	e004      	b.n	80012c0 <set_motor+0xf6>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	2300      	movs	r3, #0
 80012be:	6413      	str	r3, [r2, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, PWM);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	88db      	ldrh	r3, [r3, #6]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d105      	bne.n	80012d4 <set_motor+0x10a>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	883a      	ldrh	r2, [r7, #0]
 80012d0:	635a      	str	r2, [r3, #52]	; 0x34
    return;
 80012d2:	e060      	b.n	8001396 <set_motor+0x1cc>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, PWM);
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	88db      	ldrh	r3, [r3, #6]
 80012d8:	2b04      	cmp	r3, #4
 80012da:	d105      	bne.n	80012e8 <set_motor+0x11e>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681a      	ldr	r2, [r3, #0]
 80012e2:	883b      	ldrh	r3, [r7, #0]
 80012e4:	6393      	str	r3, [r2, #56]	; 0x38
 80012e6:	e055      	b.n	8001394 <set_motor+0x1ca>
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	88db      	ldrh	r3, [r3, #6]
 80012ec:	2b08      	cmp	r3, #8
 80012ee:	d105      	bne.n	80012fc <set_motor+0x132>
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	681a      	ldr	r2, [r3, #0]
 80012f6:	883b      	ldrh	r3, [r7, #0]
 80012f8:	63d3      	str	r3, [r2, #60]	; 0x3c
 80012fa:	e04b      	b.n	8001394 <set_motor+0x1ca>
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	883b      	ldrh	r3, [r7, #0]
 8001304:	6413      	str	r3, [r2, #64]	; 0x40
    return;
 8001306:	e046      	b.n	8001396 <set_motor+0x1cc>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, 0);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	889b      	ldrh	r3, [r3, #4]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d105      	bne.n	800131c <set_motor+0x152>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	2200      	movs	r2, #0
 8001318:	635a      	str	r2, [r3, #52]	; 0x34
 800131a:	e018      	b.n	800134e <set_motor+0x184>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	889b      	ldrh	r3, [r3, #4]
 8001320:	2b04      	cmp	r3, #4
 8001322:	d105      	bne.n	8001330 <set_motor+0x166>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	2300      	movs	r3, #0
 800132c:	6393      	str	r3, [r2, #56]	; 0x38
 800132e:	e00e      	b.n	800134e <set_motor+0x184>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	889b      	ldrh	r3, [r3, #4]
 8001334:	2b08      	cmp	r3, #8
 8001336:	d105      	bne.n	8001344 <set_motor+0x17a>
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	2300      	movs	r3, #0
 8001340:	63d3      	str	r3, [r2, #60]	; 0x3c
 8001342:	e004      	b.n	800134e <set_motor+0x184>
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	681a      	ldr	r2, [r3, #0]
 800134a:	2300      	movs	r3, #0
 800134c:	6413      	str	r3, [r2, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	88db      	ldrh	r3, [r3, #6]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d105      	bne.n	8001362 <set_motor+0x198>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	2200      	movs	r2, #0
 800135e:	635a      	str	r2, [r3, #52]	; 0x34
    return;
 8001360:	e019      	b.n	8001396 <set_motor+0x1cc>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	88db      	ldrh	r3, [r3, #6]
 8001366:	2b04      	cmp	r3, #4
 8001368:	d105      	bne.n	8001376 <set_motor+0x1ac>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	2300      	movs	r3, #0
 8001372:	6393      	str	r3, [r2, #56]	; 0x38
    return;
 8001374:	e00f      	b.n	8001396 <set_motor+0x1cc>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	88db      	ldrh	r3, [r3, #6]
 800137a:	2b08      	cmp	r3, #8
 800137c:	d105      	bne.n	800138a <set_motor+0x1c0>
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	2300      	movs	r3, #0
 8001386:	63d3      	str	r3, [r2, #60]	; 0x3c
    return;
 8001388:	e005      	b.n	8001396 <set_motor+0x1cc>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	2300      	movs	r3, #0
 8001392:	6413      	str	r3, [r2, #64]	; 0x40
    return;
 8001394:	bf00      	nop
}
 8001396:	370c      	adds	r7, #12
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <ultraSonic_Init>:
#include "ultraSonic.h"

void ultraSonic_Init(ultraSonic *sensor, TIM_HandleTypeDef *htim, average_filter *filter, GPIO_TypeDef *TrigPort, uint16_t TrigPin)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b084      	sub	sp, #16
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	603b      	str	r3, [r7, #0]
    sensor->htim = htim;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	68ba      	ldr	r2, [r7, #8]
 80013b2:	601a      	str	r2, [r3, #0]
    sensor->pre_time = 0;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	2200      	movs	r2, #0
 80013b8:	809a      	strh	r2, [r3, #4]
    sensor->distance = 0;
 80013ba:	68f9      	ldr	r1, [r7, #12]
 80013bc:	f04f 0200 	mov.w	r2, #0
 80013c0:	f04f 0300 	mov.w	r3, #0
 80013c4:	e9c1 2302 	strd	r2, r3, [r1, #8]
    sensor->TrigPort = TrigPort;
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	611a      	str	r2, [r3, #16]
    sensor->TrigPin = TrigPin;
 80013ce:	8b3a      	ldrh	r2, [r7, #24]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	615a      	str	r2, [r3, #20]
    sensor->echoHigh = false;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2200      	movs	r2, #0
 80013d8:	761a      	strb	r2, [r3, #24]
    sensor->filter = filter;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	687a      	ldr	r2, [r7, #4]
 80013de:	61da      	str	r2, [r3, #28]
    HAL_GPIO_WritePin(sensor->TrigPort, sensor->TrigPin, 0);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6918      	ldr	r0, [r3, #16]
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	695b      	ldr	r3, [r3, #20]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	2200      	movs	r2, #0
 80013ec:	4619      	mov	r1, r3
 80013ee:	f002 fdfb 	bl	8003fe8 <HAL_GPIO_WritePin>
    reset_buffer(sensor->filter);
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	69db      	ldr	r3, [r3, #28]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fcba 	bl	8000d70 <reset_buffer>
}
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	0000      	movs	r0, r0
	...

08001408 <updateDistance>:

// throw into void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef* htim)
void updateDistance(ultraSonic *sensor, uint32_t Channel)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b084      	sub	sp, #16
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
    if (sensor->echoHigh == false)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	7e1b      	ldrb	r3, [r3, #24]
 8001416:	f083 0301 	eor.w	r3, r3, #1
 800141a:	b2db      	uxtb	r3, r3
 800141c:	2b00      	cmp	r3, #0
 800141e:	d075      	beq.n	800150c <updateDistance+0x104>
    {
        sensor->pre_time = HAL_TIM_ReadCapturedValue(sensor->htim, Channel);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	6839      	ldr	r1, [r7, #0]
 8001426:	4618      	mov	r0, r3
 8001428:	f005 fff2 	bl	8007410 <HAL_TIM_ReadCapturedValue>
 800142c:	4603      	mov	r3, r0
 800142e:	b29a      	uxth	r2, r3
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	809a      	strh	r2, [r3, #4]
        __HAL_TIM_SET_CAPTUREPOLARITY(sensor->htim, Channel, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d10a      	bne.n	8001450 <updateDistance+0x48>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	6a1a      	ldr	r2, [r3, #32]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	f022 020a 	bic.w	r2, r2, #10
 800144c:	621a      	str	r2, [r3, #32]
 800144e:	e025      	b.n	800149c <updateDistance+0x94>
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	2b04      	cmp	r3, #4
 8001454:	d10a      	bne.n	800146c <updateDistance+0x64>
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	6a1b      	ldr	r3, [r3, #32]
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	6812      	ldr	r2, [r2, #0]
 8001462:	6812      	ldr	r2, [r2, #0]
 8001464:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8001468:	6213      	str	r3, [r2, #32]
 800146a:	e017      	b.n	800149c <updateDistance+0x94>
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	2b08      	cmp	r3, #8
 8001470:	d10a      	bne.n	8001488 <updateDistance+0x80>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6a1b      	ldr	r3, [r3, #32]
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	6812      	ldr	r2, [r2, #0]
 800147e:	6812      	ldr	r2, [r2, #0]
 8001480:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8001484:	6213      	str	r3, [r2, #32]
 8001486:	e009      	b.n	800149c <updateDistance+0x94>
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	6a1b      	ldr	r3, [r3, #32]
 8001490:	687a      	ldr	r2, [r7, #4]
 8001492:	6812      	ldr	r2, [r2, #0]
 8001494:	6812      	ldr	r2, [r2, #0]
 8001496:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800149a:	6213      	str	r3, [r2, #32]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d10a      	bne.n	80014b8 <updateDistance+0xb0>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6a1a      	ldr	r2, [r3, #32]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f042 0202 	orr.w	r2, r2, #2
 80014b4:	621a      	str	r2, [r3, #32]
 80014b6:	e025      	b.n	8001504 <updateDistance+0xfc>
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2b04      	cmp	r3, #4
 80014bc:	d10a      	bne.n	80014d4 <updateDistance+0xcc>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	6a1b      	ldr	r3, [r3, #32]
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	6812      	ldr	r2, [r2, #0]
 80014ca:	6812      	ldr	r2, [r2, #0]
 80014cc:	f043 0320 	orr.w	r3, r3, #32
 80014d0:	6213      	str	r3, [r2, #32]
 80014d2:	e017      	b.n	8001504 <updateDistance+0xfc>
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	2b08      	cmp	r3, #8
 80014d8:	d10a      	bne.n	80014f0 <updateDistance+0xe8>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6a1b      	ldr	r3, [r3, #32]
 80014e2:	687a      	ldr	r2, [r7, #4]
 80014e4:	6812      	ldr	r2, [r2, #0]
 80014e6:	6812      	ldr	r2, [r2, #0]
 80014e8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ec:	6213      	str	r3, [r2, #32]
 80014ee:	e009      	b.n	8001504 <updateDistance+0xfc>
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6a1b      	ldr	r3, [r3, #32]
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6812      	ldr	r2, [r2, #0]
 80014fc:	6812      	ldr	r2, [r2, #0]
 80014fe:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001502:	6213      	str	r3, [r2, #32]
        sensor->echoHigh = true;
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	2201      	movs	r2, #1
 8001508:	761a      	strb	r2, [r3, #24]

    //         //    	            __HAL_TIM_SET_CAPTUREPOLARITY(sensor->htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
    //         __HAL_TIM_DISABLE_IT(sensor->htim, TIM_IT_CC2);
    //     }
    // }
}
 800150a:	e09b      	b.n	8001644 <updateDistance+0x23c>
        uint32_t diffTime = (HAL_TIM_ReadCapturedValue(sensor->htim, Channel) - sensor->pre_time + TIMER_STEP_CYCLE) % TIMER_STEP_CYCLE;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6839      	ldr	r1, [r7, #0]
 8001512:	4618      	mov	r0, r3
 8001514:	f005 ff7c 	bl	8007410 <HAL_TIM_ReadCapturedValue>
 8001518:	4602      	mov	r2, r0
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	889b      	ldrh	r3, [r3, #4]
 800151e:	b29b      	uxth	r3, r3
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001526:	33ff      	adds	r3, #255	; 0xff
 8001528:	b29b      	uxth	r3, r3
 800152a:	3b01      	subs	r3, #1
 800152c:	60fb      	str	r3, [r7, #12]
        apply_filter(sensor->filter, diffTime);
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	68fa      	ldr	r2, [r7, #12]
 8001534:	b212      	sxth	r2, r2
 8001536:	4611      	mov	r1, r2
 8001538:	4618      	mov	r0, r3
 800153a:	f7ff fc3b 	bl	8000db4 <apply_filter>
        sensor->distance = ((SOUND_SPEED * STEP_TIMER) * (sensor->filter->out)) / 2.0;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69db      	ldr	r3, [r3, #28]
 8001542:	699b      	ldr	r3, [r3, #24]
 8001544:	4618      	mov	r0, r3
 8001546:	f7fe ffa3 	bl	8000490 <__aeabi_f2d>
 800154a:	a341      	add	r3, pc, #260	; (adr r3, 8001650 <updateDistance+0x248>)
 800154c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001550:	f7fe fff6 	bl	8000540 <__aeabi_dmul>
 8001554:	4602      	mov	r2, r0
 8001556:	460b      	mov	r3, r1
 8001558:	4610      	mov	r0, r2
 800155a:	4619      	mov	r1, r3
 800155c:	f04f 0200 	mov.w	r2, #0
 8001560:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001564:	f7ff f916 	bl	8000794 <__aeabi_ddiv>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        sensor->echoHigh = false;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	761a      	strb	r2, [r3, #24]
        __HAL_TIM_SET_CAPTUREPOLARITY(sensor->htim, Channel, TIM_INPUTCHANNELPOLARITY_RISING);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d10a      	bne.n	8001594 <updateDistance+0x18c>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	6a1a      	ldr	r2, [r3, #32]
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f022 020a 	bic.w	r2, r2, #10
 8001590:	621a      	str	r2, [r3, #32]
 8001592:	e025      	b.n	80015e0 <updateDistance+0x1d8>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	2b04      	cmp	r3, #4
 8001598:	d10a      	bne.n	80015b0 <updateDistance+0x1a8>
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	687a      	ldr	r2, [r7, #4]
 80015a4:	6812      	ldr	r2, [r2, #0]
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80015ac:	6213      	str	r3, [r2, #32]
 80015ae:	e017      	b.n	80015e0 <updateDistance+0x1d8>
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2b08      	cmp	r3, #8
 80015b4:	d10a      	bne.n	80015cc <updateDistance+0x1c4>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	6a1b      	ldr	r3, [r3, #32]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6812      	ldr	r2, [r2, #0]
 80015c2:	6812      	ldr	r2, [r2, #0]
 80015c4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80015c8:	6213      	str	r3, [r2, #32]
 80015ca:	e009      	b.n	80015e0 <updateDistance+0x1d8>
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6a1b      	ldr	r3, [r3, #32]
 80015d4:	687a      	ldr	r2, [r7, #4]
 80015d6:	6812      	ldr	r2, [r2, #0]
 80015d8:	6812      	ldr	r2, [r2, #0]
 80015da:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80015de:	6213      	str	r3, [r2, #32]
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d108      	bne.n	80015f8 <updateDistance+0x1f0>
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	6a12      	ldr	r2, [r2, #32]
 80015f4:	621a      	str	r2, [r3, #32]
 80015f6:	e01f      	b.n	8001638 <updateDistance+0x230>
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	2b04      	cmp	r3, #4
 80015fc:	d108      	bne.n	8001610 <updateDistance+0x208>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	687a      	ldr	r2, [r7, #4]
 8001606:	6812      	ldr	r2, [r2, #0]
 8001608:	6812      	ldr	r2, [r2, #0]
 800160a:	6a1b      	ldr	r3, [r3, #32]
 800160c:	6213      	str	r3, [r2, #32]
 800160e:	e013      	b.n	8001638 <updateDistance+0x230>
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	2b08      	cmp	r3, #8
 8001614:	d108      	bne.n	8001628 <updateDistance+0x220>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	687a      	ldr	r2, [r7, #4]
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	6812      	ldr	r2, [r2, #0]
 8001622:	6a1b      	ldr	r3, [r3, #32]
 8001624:	6213      	str	r3, [r2, #32]
 8001626:	e007      	b.n	8001638 <updateDistance+0x230>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	6812      	ldr	r2, [r2, #0]
 8001632:	6812      	ldr	r2, [r2, #0]
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	6213      	str	r3, [r2, #32]
        HAL_TIM_IC_Stop_IT(sensor->htim, Channel);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	6839      	ldr	r1, [r7, #0]
 800163e:	4618      	mov	r0, r3
 8001640:	f005 f9d6 	bl	80069f0 <HAL_TIM_IC_Stop_IT>
}
 8001644:	bf00      	nop
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}
 800164c:	f3af 8000 	nop.w
 8001650:	1b328b6d 	.word	0x1b328b6d
 8001654:	3fa19264 	.word	0x3fa19264

08001658 <activeTrigger>:
//         time = 0;
//     }
// }

void activeTrigger(ultraSonic *sensor)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
    HAL_GPIO_WritePin(sensor->TrigPort, sensor->TrigPin, 1);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	6918      	ldr	r0, [r3, #16]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
 8001668:	b29b      	uxth	r3, r3
 800166a:	2201      	movs	r2, #1
 800166c:	4619      	mov	r1, r3
 800166e:	f002 fcbb 	bl	8003fe8 <HAL_GPIO_WritePin>
    delay_us(sensor->htim, 10);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	210a      	movs	r1, #10
 8001678:	4618      	mov	r0, r3
 800167a:	f000 f80d 	bl	8001698 <delay_us>
    HAL_GPIO_WritePin(sensor->TrigPort, sensor->TrigPin, 0);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6918      	ldr	r0, [r3, #16]
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	695b      	ldr	r3, [r3, #20]
 8001686:	b29b      	uxth	r3, r3
 8001688:	2200      	movs	r2, #0
 800168a:	4619      	mov	r1, r3
 800168c:	f002 fcac 	bl	8003fe8 <HAL_GPIO_WritePin>
//    __HAL_TIM_ENABLE_IT(sensor->htim, TIM_IT_CC1);
    // __HAL_TIM_ENABLE_IT(sensor->htim, TIM_IT_CC2);
}
 8001690:	bf00      	nop
 8001692:	3708      	adds	r7, #8
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <delay_us>:

void delay_us(TIM_HandleTypeDef *htim, uint16_t time)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	460b      	mov	r3, r1
 80016a2:	807b      	strh	r3, [r7, #2]
	HAL_TIM_Base_Start(htim);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f004 fdff 	bl	80062a8 <HAL_TIM_Base_Start>
    htim->Instance->CNT = 0; // __HAL_TIM_SET_COUNTER(&htim, Cnt);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2200      	movs	r2, #0
 80016b0:	625a      	str	r2, [r3, #36]	; 0x24
    while (htim->Instance->CNT < time); // while (__HAL_TIM_GET_COUNTER(&htim) < time)
 80016b2:	bf00      	nop
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80016ba:	887b      	ldrh	r3, [r7, #2]
 80016bc:	429a      	cmp	r2, r3
 80016be:	d3f9      	bcc.n	80016b4 <delay_us+0x1c>
    HAL_TIM_Base_Stop(htim);
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	f004 fe59 	bl	8006378 <HAL_TIM_Base_Stop>
}
 80016c6:	bf00      	nop
 80016c8:	3708      	adds	r7, #8
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b082      	sub	sp, #8
 80016d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016d6:	f001 f89d 	bl	8002814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016da:	f000 f881 	bl	80017e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016de:	f000 fbc7 	bl	8001e70 <MX_GPIO_Init>
  MX_DMA_Init();
 80016e2:	f000 fba5 	bl	8001e30 <MX_DMA_Init>
//  MX_I2C1_Init();
//  MX_I2S3_Init();
  MX_SPI1_Init();
 80016e6:	f000 f96f 	bl	80019c8 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80016ea:	f009 fb93 	bl	800ae14 <MX_USB_HOST_Init>
  MX_TIM1_Init();
 80016ee:	f000 f9a1 	bl	8001a34 <MX_TIM1_Init>
  MX_TIM2_Init();
 80016f2:	f000 fa29 	bl	8001b48 <MX_TIM2_Init>
  MX_TIM3_Init();
 80016f6:	f000 fa73 	bl	8001be0 <MX_TIM3_Init>
  MX_TIM9_Init();
 80016fa:	f000 fac5 	bl	8001c88 <MX_TIM9_Init>
  MX_ADC1_Init();
 80016fe:	f000 f8d9 	bl	80018b4 <MX_ADC1_Init>
  MX_TIM12_Init();
 8001702:	f000 fb31 	bl	8001d68 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  	ultraSonic_Init(&sensor1, &htim1, &filter1, GPIOE, GPIO_PIN_10);
 8001706:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	4b23      	ldr	r3, [pc, #140]	; (800179c <main+0xcc>)
 800170e:	4a24      	ldr	r2, [pc, #144]	; (80017a0 <main+0xd0>)
 8001710:	4924      	ldr	r1, [pc, #144]	; (80017a4 <main+0xd4>)
 8001712:	4825      	ldr	r0, [pc, #148]	; (80017a8 <main+0xd8>)
 8001714:	f7ff fe44 	bl	80013a0 <ultraSonic_Init>
    ultraSonic_Init(&sensor2, &htim1, &filter2, GPIOE, GPIO_PIN_10);
 8001718:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800171c:	9300      	str	r3, [sp, #0]
 800171e:	4b1f      	ldr	r3, [pc, #124]	; (800179c <main+0xcc>)
 8001720:	4a22      	ldr	r2, [pc, #136]	; (80017ac <main+0xdc>)
 8001722:	4920      	ldr	r1, [pc, #128]	; (80017a4 <main+0xd4>)
 8001724:	4822      	ldr	r0, [pc, #136]	; (80017b0 <main+0xe0>)
 8001726:	f7ff fe3b 	bl	80013a0 <ultraSonic_Init>
    ultraSonic_Init(&sensor3, &htim1, &filter3, GPIOE, GPIO_PIN_10);
 800172a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800172e:	9300      	str	r3, [sp, #0]
 8001730:	4b1a      	ldr	r3, [pc, #104]	; (800179c <main+0xcc>)
 8001732:	4a20      	ldr	r2, [pc, #128]	; (80017b4 <main+0xe4>)
 8001734:	491b      	ldr	r1, [pc, #108]	; (80017a4 <main+0xd4>)
 8001736:	4820      	ldr	r0, [pc, #128]	; (80017b8 <main+0xe8>)
 8001738:	f7ff fe32 	bl	80013a0 <ultraSonic_Init>
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_1);
 800173c:	2100      	movs	r1, #0
 800173e:	481f      	ldr	r0, [pc, #124]	; (80017bc <main+0xec>)
 8001740:	f004 ff0c 	bl	800655c <HAL_TIM_PWM_Start>
    Servo_Init(&servo, &htim12, TIM_CHANNEL_1, 750);
 8001744:	f240 23ee 	movw	r3, #750	; 0x2ee
 8001748:	2200      	movs	r2, #0
 800174a:	491c      	ldr	r1, [pc, #112]	; (80017bc <main+0xec>)
 800174c:	481c      	ldr	r0, [pc, #112]	; (80017c0 <main+0xf0>)
 800174e:	f7ff fd05 	bl	800115c <Servo_Init>
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_1);
 8001752:	2100      	movs	r1, #0
 8001754:	481b      	ldr	r0, [pc, #108]	; (80017c4 <main+0xf4>)
 8001756:	f004 ff01 	bl	800655c <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim9, TIM_CHANNEL_2);
 800175a:	2104      	movs	r1, #4
 800175c:	4819      	ldr	r0, [pc, #100]	; (80017c4 <main+0xf4>)
 800175e:	f004 fefd 	bl	800655c <HAL_TIM_PWM_Start>
    Motor_Init(&motor, &htim9, TIM_CHANNEL_1, TIM_CHANNEL_2);
 8001762:	2304      	movs	r3, #4
 8001764:	2200      	movs	r2, #0
 8001766:	4917      	ldr	r1, [pc, #92]	; (80017c4 <main+0xf4>)
 8001768:	4817      	ldr	r0, [pc, #92]	; (80017c8 <main+0xf8>)
 800176a:	f7ff fc99 	bl	80010a0 <Motor_Init>
    Encoder_Init(&enc, &htim3);
 800176e:	4917      	ldr	r1, [pc, #92]	; (80017cc <main+0xfc>)
 8001770:	4817      	ldr	r0, [pc, #92]	; (80017d0 <main+0x100>)
 8001772:	f7ff fc6d 	bl	8001050 <Encoder_Init>
    HAL_ADC_Start_DMA(&hadc1,(uint32_t *)adc, 5);
 8001776:	2205      	movs	r2, #5
 8001778:	4916      	ldr	r1, [pc, #88]	; (80017d4 <main+0x104>)
 800177a:	4817      	ldr	r0, [pc, #92]	; (80017d8 <main+0x108>)
 800177c:	f001 fa34 	bl	8002be8 <HAL_ADC_Start_DMA>
    HAL_TIM_Base_Start_IT(&htim2);
 8001780:	4816      	ldr	r0, [pc, #88]	; (80017dc <main+0x10c>)
 8001782:	f004 fe21 	bl	80063c8 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8001786:	f009 fb6b 	bl	800ae60 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    set_motor(&motor, BACKWARD, 500);
 800178a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800178e:	f04f 31ff 	mov.w	r1, #4294967295
 8001792:	480d      	ldr	r0, [pc, #52]	; (80017c8 <main+0xf8>)
 8001794:	f7ff fd19 	bl	80011ca <set_motor>
    MX_USB_HOST_Process();
 8001798:	e7f5      	b.n	8001786 <main+0xb6>
 800179a:	bf00      	nop
 800179c:	40021000 	.word	0x40021000
 80017a0:	20000398 	.word	0x20000398
 80017a4:	2000019c 	.word	0x2000019c
 80017a8:	20000338 	.word	0x20000338
 80017ac:	200003b8 	.word	0x200003b8
 80017b0:	20000358 	.word	0x20000358
 80017b4:	200003d8 	.word	0x200003d8
 80017b8:	20000378 	.word	0x20000378
 80017bc:	200002bc 	.word	0x200002bc
 80017c0:	20000304 	.word	0x20000304
 80017c4:	20000274 	.word	0x20000274
 80017c8:	2000030c 	.word	0x2000030c
 80017cc:	2000022c 	.word	0x2000022c
 80017d0:	20000318 	.word	0x20000318
 80017d4:	200003f8 	.word	0x200003f8
 80017d8:	2000009c 	.word	0x2000009c
 80017dc:	200001e4 	.word	0x200001e4

080017e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b094      	sub	sp, #80	; 0x50
 80017e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80017e6:	f107 0320 	add.w	r3, r7, #32
 80017ea:	2230      	movs	r2, #48	; 0x30
 80017ec:	2100      	movs	r1, #0
 80017ee:	4618      	mov	r0, r3
 80017f0:	f009 fed4 	bl	800b59c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80017f4:	f107 030c 	add.w	r3, r7, #12
 80017f8:	2200      	movs	r2, #0
 80017fa:	601a      	str	r2, [r3, #0]
 80017fc:	605a      	str	r2, [r3, #4]
 80017fe:	609a      	str	r2, [r3, #8]
 8001800:	60da      	str	r2, [r3, #12]
 8001802:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001804:	2300      	movs	r3, #0
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	4b28      	ldr	r3, [pc, #160]	; (80018ac <SystemClock_Config+0xcc>)
 800180a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180c:	4a27      	ldr	r2, [pc, #156]	; (80018ac <SystemClock_Config+0xcc>)
 800180e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001812:	6413      	str	r3, [r2, #64]	; 0x40
 8001814:	4b25      	ldr	r3, [pc, #148]	; (80018ac <SystemClock_Config+0xcc>)
 8001816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001818:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001820:	2300      	movs	r3, #0
 8001822:	607b      	str	r3, [r7, #4]
 8001824:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <SystemClock_Config+0xd0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a21      	ldr	r2, [pc, #132]	; (80018b0 <SystemClock_Config+0xd0>)
 800182a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <SystemClock_Config+0xd0>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001838:	607b      	str	r3, [r7, #4]
 800183a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800183c:	2301      	movs	r3, #1
 800183e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001840:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001844:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001846:	2302      	movs	r3, #2
 8001848:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800184a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800184e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001850:	2304      	movs	r3, #4
 8001852:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001854:	2348      	movs	r3, #72	; 0x48
 8001856:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001858:	2302      	movs	r3, #2
 800185a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800185c:	2303      	movs	r3, #3
 800185e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001860:	f107 0320 	add.w	r3, r7, #32
 8001864:	4618      	mov	r0, r3
 8001866:	f003 ffe3 	bl	8005830 <HAL_RCC_OscConfig>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001870:	f000 fc69 	bl	8002146 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001874:	230f      	movs	r3, #15
 8001876:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001878:	2302      	movs	r3, #2
 800187a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800187c:	2300      	movs	r3, #0
 800187e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001880:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001884:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800188a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800188c:	f107 030c 	add.w	r3, r7, #12
 8001890:	2102      	movs	r1, #2
 8001892:	4618      	mov	r0, r3
 8001894:	f004 fa44 	bl	8005d20 <HAL_RCC_ClockConfig>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800189e:	f000 fc52 	bl	8002146 <Error_Handler>
  }
}
 80018a2:	bf00      	nop
 80018a4:	3750      	adds	r7, #80	; 0x50
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40007000 	.word	0x40007000

080018b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80018ba:	463b      	mov	r3, r7
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80018c6:	4b3d      	ldr	r3, [pc, #244]	; (80019bc <MX_ADC1_Init+0x108>)
 80018c8:	4a3d      	ldr	r2, [pc, #244]	; (80019c0 <MX_ADC1_Init+0x10c>)
 80018ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80018cc:	4b3b      	ldr	r3, [pc, #236]	; (80019bc <MX_ADC1_Init+0x108>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80018d2:	4b3a      	ldr	r3, [pc, #232]	; (80019bc <MX_ADC1_Init+0x108>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80018d8:	4b38      	ldr	r3, [pc, #224]	; (80019bc <MX_ADC1_Init+0x108>)
 80018da:	2201      	movs	r2, #1
 80018dc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80018de:	4b37      	ldr	r3, [pc, #220]	; (80019bc <MX_ADC1_Init+0x108>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80018e4:	4b35      	ldr	r3, [pc, #212]	; (80019bc <MX_ADC1_Init+0x108>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80018ec:	4b33      	ldr	r3, [pc, #204]	; (80019bc <MX_ADC1_Init+0x108>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80018f2:	4b32      	ldr	r3, [pc, #200]	; (80019bc <MX_ADC1_Init+0x108>)
 80018f4:	4a33      	ldr	r2, [pc, #204]	; (80019c4 <MX_ADC1_Init+0x110>)
 80018f6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018f8:	4b30      	ldr	r3, [pc, #192]	; (80019bc <MX_ADC1_Init+0x108>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 80018fe:	4b2f      	ldr	r3, [pc, #188]	; (80019bc <MX_ADC1_Init+0x108>)
 8001900:	2205      	movs	r2, #5
 8001902:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001904:	4b2d      	ldr	r3, [pc, #180]	; (80019bc <MX_ADC1_Init+0x108>)
 8001906:	2201      	movs	r2, #1
 8001908:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800190c:	4b2b      	ldr	r3, [pc, #172]	; (80019bc <MX_ADC1_Init+0x108>)
 800190e:	2201      	movs	r2, #1
 8001910:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001912:	482a      	ldr	r0, [pc, #168]	; (80019bc <MX_ADC1_Init+0x108>)
 8001914:	f001 f814 	bl	8002940 <HAL_ADC_Init>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800191e:	f000 fc12 	bl	8002146 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001922:	2301      	movs	r3, #1
 8001924:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001926:	2301      	movs	r3, #1
 8001928:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800192a:	2306      	movs	r3, #6
 800192c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800192e:	463b      	mov	r3, r7
 8001930:	4619      	mov	r1, r3
 8001932:	4822      	ldr	r0, [pc, #136]	; (80019bc <MX_ADC1_Init+0x108>)
 8001934:	f001 fa90 	bl	8002e58 <HAL_ADC_ConfigChannel>
 8001938:	4603      	mov	r3, r0
 800193a:	2b00      	cmp	r3, #0
 800193c:	d001      	beq.n	8001942 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800193e:	f000 fc02 	bl	8002146 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8001942:	2302      	movs	r3, #2
 8001944:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001946:	2302      	movs	r3, #2
 8001948:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800194a:	463b      	mov	r3, r7
 800194c:	4619      	mov	r1, r3
 800194e:	481b      	ldr	r0, [pc, #108]	; (80019bc <MX_ADC1_Init+0x108>)
 8001950:	f001 fa82 	bl	8002e58 <HAL_ADC_ConfigChannel>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 800195a:	f000 fbf4 	bl	8002146 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800195e:	2303      	movs	r3, #3
 8001960:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8001962:	2303      	movs	r3, #3
 8001964:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001966:	463b      	mov	r3, r7
 8001968:	4619      	mov	r1, r3
 800196a:	4814      	ldr	r0, [pc, #80]	; (80019bc <MX_ADC1_Init+0x108>)
 800196c:	f001 fa74 	bl	8002e58 <HAL_ADC_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8001976:	f000 fbe6 	bl	8002146 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800197a:	2308      	movs	r3, #8
 800197c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800197e:	2304      	movs	r3, #4
 8001980:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001982:	463b      	mov	r3, r7
 8001984:	4619      	mov	r1, r3
 8001986:	480d      	ldr	r0, [pc, #52]	; (80019bc <MX_ADC1_Init+0x108>)
 8001988:	f001 fa66 	bl	8002e58 <HAL_ADC_ConfigChannel>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001992:	f000 fbd8 	bl	8002146 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001996:	2309      	movs	r3, #9
 8001998:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 800199a:	2305      	movs	r3, #5
 800199c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800199e:	463b      	mov	r3, r7
 80019a0:	4619      	mov	r1, r3
 80019a2:	4806      	ldr	r0, [pc, #24]	; (80019bc <MX_ADC1_Init+0x108>)
 80019a4:	f001 fa58 	bl	8002e58 <HAL_ADC_ConfigChannel>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 80019ae:	f000 fbca 	bl	8002146 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80019b2:	bf00      	nop
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	2000009c 	.word	0x2000009c
 80019c0:	40012000 	.word	0x40012000
 80019c4:	0f000001 	.word	0x0f000001

080019c8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019cc:	4b17      	ldr	r3, [pc, #92]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019ce:	4a18      	ldr	r2, [pc, #96]	; (8001a30 <MX_SPI1_Init+0x68>)
 80019d0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019d2:	4b16      	ldr	r3, [pc, #88]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019d4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019d8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019da:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019dc:	2200      	movs	r2, #0
 80019de:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019e0:	4b12      	ldr	r3, [pc, #72]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019e6:	4b11      	ldr	r3, [pc, #68]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019ec:	4b0f      	ldr	r3, [pc, #60]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019f2:	4b0e      	ldr	r3, [pc, #56]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019f8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019fa:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <MX_SPI1_Init+0x64>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <MX_SPI1_Init+0x64>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <MX_SPI1_Init+0x64>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a0c:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <MX_SPI1_Init+0x64>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <MX_SPI1_Init+0x64>)
 8001a14:	220a      	movs	r2, #10
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a18:	4804      	ldr	r0, [pc, #16]	; (8001a2c <MX_SPI1_Init+0x64>)
 8001a1a:	f004 fb6d 	bl	80060f8 <HAL_SPI_Init>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d001      	beq.n	8001a28 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a24:	f000 fb8f 	bl	8002146 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000144 	.word	0x20000144
 8001a30:	40013000 	.word	0x40013000

08001a34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b08a      	sub	sp, #40	; 0x28
 8001a38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a3a:	f107 0318 	add.w	r3, r7, #24
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001a52:	463b      	mov	r3, r7
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a5e:	4b38      	ldr	r3, [pc, #224]	; (8001b40 <MX_TIM1_Init+0x10c>)
 8001a60:	4a38      	ldr	r2, [pc, #224]	; (8001b44 <MX_TIM1_Init+0x110>)
 8001a62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 71;
 8001a64:	4b36      	ldr	r3, [pc, #216]	; (8001b40 <MX_TIM1_Init+0x10c>)
 8001a66:	2247      	movs	r2, #71	; 0x47
 8001a68:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a6a:	4b35      	ldr	r3, [pc, #212]	; (8001b40 <MX_TIM1_Init+0x10c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001a70:	4b33      	ldr	r3, [pc, #204]	; (8001b40 <MX_TIM1_Init+0x10c>)
 8001a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a78:	4b31      	ldr	r3, [pc, #196]	; (8001b40 <MX_TIM1_Init+0x10c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a7e:	4b30      	ldr	r3, [pc, #192]	; (8001b40 <MX_TIM1_Init+0x10c>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a84:	4b2e      	ldr	r3, [pc, #184]	; (8001b40 <MX_TIM1_Init+0x10c>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001a8a:	482d      	ldr	r0, [pc, #180]	; (8001b40 <MX_TIM1_Init+0x10c>)
 8001a8c:	f004 fbbd 	bl	800620a <HAL_TIM_Base_Init>
 8001a90:	4603      	mov	r3, r0
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d001      	beq.n	8001a9a <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001a96:	f000 fb56 	bl	8002146 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a9a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a9e:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001aa0:	f107 0318 	add.w	r3, r7, #24
 8001aa4:	4619      	mov	r1, r3
 8001aa6:	4826      	ldr	r0, [pc, #152]	; (8001b40 <MX_TIM1_Init+0x10c>)
 8001aa8:	f005 fbea 	bl	8007280 <HAL_TIM_ConfigClockSource>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001ab2:	f000 fb48 	bl	8002146 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001ab6:	4822      	ldr	r0, [pc, #136]	; (8001b40 <MX_TIM1_Init+0x10c>)
 8001ab8:	f004 fe18 	bl	80066ec <HAL_TIM_IC_Init>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d001      	beq.n	8001ac6 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001ac2:	f000 fb40 	bl	8002146 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ace:	f107 0310 	add.w	r3, r7, #16
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	481a      	ldr	r0, [pc, #104]	; (8001b40 <MX_TIM1_Init+0x10c>)
 8001ad6:	f006 f937 	bl	8007d48 <HAL_TIMEx_MasterConfigSynchronization>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001ae0:	f000 fb31 	bl	8002146 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001af4:	463b      	mov	r3, r7
 8001af6:	2200      	movs	r2, #0
 8001af8:	4619      	mov	r1, r3
 8001afa:	4811      	ldr	r0, [pc, #68]	; (8001b40 <MX_TIM1_Init+0x10c>)
 8001afc:	f005 fa62 	bl	8006fc4 <HAL_TIM_IC_ConfigChannel>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001b06:	f000 fb1e 	bl	8002146 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001b0a:	463b      	mov	r3, r7
 8001b0c:	2204      	movs	r2, #4
 8001b0e:	4619      	mov	r1, r3
 8001b10:	480b      	ldr	r0, [pc, #44]	; (8001b40 <MX_TIM1_Init+0x10c>)
 8001b12:	f005 fa57 	bl	8006fc4 <HAL_TIM_IC_ConfigChannel>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001b1c:	f000 fb13 	bl	8002146 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001b20:	463b      	mov	r3, r7
 8001b22:	2208      	movs	r2, #8
 8001b24:	4619      	mov	r1, r3
 8001b26:	4806      	ldr	r0, [pc, #24]	; (8001b40 <MX_TIM1_Init+0x10c>)
 8001b28:	f005 fa4c 	bl	8006fc4 <HAL_TIM_IC_ConfigChannel>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8001b32:	f000 fb08 	bl	8002146 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b36:	bf00      	nop
 8001b38:	3728      	adds	r7, #40	; 0x28
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000019c 	.word	0x2000019c
 8001b44:	40010000 	.word	0x40010000

08001b48 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b086      	sub	sp, #24
 8001b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b4e:	f107 0308 	add.w	r3, r7, #8
 8001b52:	2200      	movs	r2, #0
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	605a      	str	r2, [r3, #4]
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5c:	463b      	mov	r3, r7
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b64:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <MX_TIM2_Init+0x94>)
 8001b66:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001b6a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7200-1;
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <MX_TIM2_Init+0x94>)
 8001b6e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001b72:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b74:	4b19      	ldr	r3, [pc, #100]	; (8001bdc <MX_TIM2_Init+0x94>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 150-1;
 8001b7a:	4b18      	ldr	r3, [pc, #96]	; (8001bdc <MX_TIM2_Init+0x94>)
 8001b7c:	2295      	movs	r2, #149	; 0x95
 8001b7e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b80:	4b16      	ldr	r3, [pc, #88]	; (8001bdc <MX_TIM2_Init+0x94>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <MX_TIM2_Init+0x94>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b8c:	4813      	ldr	r0, [pc, #76]	; (8001bdc <MX_TIM2_Init+0x94>)
 8001b8e:	f004 fb3c 	bl	800620a <HAL_TIM_Base_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b98:	f000 fad5 	bl	8002146 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ba0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001ba2:	f107 0308 	add.w	r3, r7, #8
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	480c      	ldr	r0, [pc, #48]	; (8001bdc <MX_TIM2_Init+0x94>)
 8001baa:	f005 fb69 	bl	8007280 <HAL_TIM_ConfigClockSource>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d001      	beq.n	8001bb8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001bb4:	f000 fac7 	bl	8002146 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001bc0:	463b      	mov	r3, r7
 8001bc2:	4619      	mov	r1, r3
 8001bc4:	4805      	ldr	r0, [pc, #20]	; (8001bdc <MX_TIM2_Init+0x94>)
 8001bc6:	f006 f8bf 	bl	8007d48 <HAL_TIMEx_MasterConfigSynchronization>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d001      	beq.n	8001bd4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001bd0:	f000 fab9 	bl	8002146 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bd4:	bf00      	nop
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	200001e4 	.word	0x200001e4

08001be0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	b08c      	sub	sp, #48	; 0x30
 8001be4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	2224      	movs	r2, #36	; 0x24
 8001bec:	2100      	movs	r1, #0
 8001bee:	4618      	mov	r0, r3
 8001bf0:	f009 fcd4 	bl	800b59c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf4:	1d3b      	adds	r3, r7, #4
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	601a      	str	r2, [r3, #0]
 8001bfa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001bfc:	4b20      	ldr	r3, [pc, #128]	; (8001c80 <MX_TIM3_Init+0xa0>)
 8001bfe:	4a21      	ldr	r2, [pc, #132]	; (8001c84 <MX_TIM3_Init+0xa4>)
 8001c00:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001c02:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <MX_TIM3_Init+0xa0>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c08:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <MX_TIM3_Init+0xa0>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001c0e:	4b1c      	ldr	r3, [pc, #112]	; (8001c80 <MX_TIM3_Init+0xa0>)
 8001c10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c14:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c16:	4b1a      	ldr	r3, [pc, #104]	; (8001c80 <MX_TIM3_Init+0xa0>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c1c:	4b18      	ldr	r3, [pc, #96]	; (8001c80 <MX_TIM3_Init+0xa0>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c22:	2303      	movs	r3, #3
 8001c24:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c26:	2300      	movs	r3, #0
 8001c28:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c36:	2300      	movs	r3, #0
 8001c38:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c46:	f107 030c 	add.w	r3, r7, #12
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	480c      	ldr	r0, [pc, #48]	; (8001c80 <MX_TIM3_Init+0xa0>)
 8001c4e:	f004 ff7d 	bl	8006b4c <HAL_TIM_Encoder_Init>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d001      	beq.n	8001c5c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001c58:	f000 fa75 	bl	8002146 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	4619      	mov	r1, r3
 8001c68:	4805      	ldr	r0, [pc, #20]	; (8001c80 <MX_TIM3_Init+0xa0>)
 8001c6a:	f006 f86d 	bl	8007d48 <HAL_TIMEx_MasterConfigSynchronization>
 8001c6e:	4603      	mov	r3, r0
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d001      	beq.n	8001c78 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001c74:	f000 fa67 	bl	8002146 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c78:	bf00      	nop
 8001c7a:	3730      	adds	r7, #48	; 0x30
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	2000022c 	.word	0x2000022c
 8001c84:	40000400 	.word	0x40000400

08001c88 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b08c      	sub	sp, #48	; 0x30
 8001c8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c8e:	f107 0320 	add.w	r3, r7, #32
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]
 8001c9a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c9c:	1d3b      	adds	r3, r7, #4
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
 8001ca8:	611a      	str	r2, [r3, #16]
 8001caa:	615a      	str	r2, [r3, #20]
 8001cac:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001cae:	4b2c      	ldr	r3, [pc, #176]	; (8001d60 <MX_TIM9_Init+0xd8>)
 8001cb0:	4a2c      	ldr	r2, [pc, #176]	; (8001d64 <MX_TIM9_Init+0xdc>)
 8001cb2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 720;
 8001cb4:	4b2a      	ldr	r3, [pc, #168]	; (8001d60 <MX_TIM9_Init+0xd8>)
 8001cb6:	f44f 7234 	mov.w	r2, #720	; 0x2d0
 8001cba:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cbc:	4b28      	ldr	r3, [pc, #160]	; (8001d60 <MX_TIM9_Init+0xd8>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 1023;
 8001cc2:	4b27      	ldr	r3, [pc, #156]	; (8001d60 <MX_TIM9_Init+0xd8>)
 8001cc4:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001cc8:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cca:	4b25      	ldr	r3, [pc, #148]	; (8001d60 <MX_TIM9_Init+0xd8>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cd0:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <MX_TIM9_Init+0xd8>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001cd6:	4822      	ldr	r0, [pc, #136]	; (8001d60 <MX_TIM9_Init+0xd8>)
 8001cd8:	f004 fa97 	bl	800620a <HAL_TIM_Base_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM9_Init+0x5e>
  {
    Error_Handler();
 8001ce2:	f000 fa30 	bl	8002146 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cea:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001cec:	f107 0320 	add.w	r3, r7, #32
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	481b      	ldr	r0, [pc, #108]	; (8001d60 <MX_TIM9_Init+0xd8>)
 8001cf4:	f005 fac4 	bl	8007280 <HAL_TIM_ConfigClockSource>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM9_Init+0x7a>
  {
    Error_Handler();
 8001cfe:	f000 fa22 	bl	8002146 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001d02:	4817      	ldr	r0, [pc, #92]	; (8001d60 <MX_TIM9_Init+0xd8>)
 8001d04:	f004 fbd0 	bl	80064a8 <HAL_TIM_PWM_Init>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001d0e:	f000 fa1a 	bl	8002146 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d12:	2360      	movs	r3, #96	; 0x60
 8001d14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8001d16:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001d1a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d20:	2300      	movs	r3, #0
 8001d22:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d24:	1d3b      	adds	r3, r7, #4
 8001d26:	2200      	movs	r2, #0
 8001d28:	4619      	mov	r1, r3
 8001d2a:	480d      	ldr	r0, [pc, #52]	; (8001d60 <MX_TIM9_Init+0xd8>)
 8001d2c:	f005 f9e6 	bl	80070fc <HAL_TIM_PWM_ConfigChannel>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d001      	beq.n	8001d3a <MX_TIM9_Init+0xb2>
  {
    Error_Handler();
 8001d36:	f000 fa06 	bl	8002146 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d3a:	1d3b      	adds	r3, r7, #4
 8001d3c:	2204      	movs	r2, #4
 8001d3e:	4619      	mov	r1, r3
 8001d40:	4807      	ldr	r0, [pc, #28]	; (8001d60 <MX_TIM9_Init+0xd8>)
 8001d42:	f005 f9db 	bl	80070fc <HAL_TIM_PWM_ConfigChannel>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <MX_TIM9_Init+0xc8>
  {
    Error_Handler();
 8001d4c:	f000 f9fb 	bl	8002146 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001d50:	4803      	ldr	r0, [pc, #12]	; (8001d60 <MX_TIM9_Init+0xd8>)
 8001d52:	f000 fc19 	bl	8002588 <HAL_TIM_MspPostInit>

}
 8001d56:	bf00      	nop
 8001d58:	3730      	adds	r7, #48	; 0x30
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	20000274 	.word	0x20000274
 8001d64:	40014000 	.word	0x40014000

08001d68 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b08c      	sub	sp, #48	; 0x30
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6e:	f107 0320 	add.w	r3, r7, #32
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]
 8001d86:	60da      	str	r2, [r3, #12]
 8001d88:	611a      	str	r2, [r3, #16]
 8001d8a:	615a      	str	r2, [r3, #20]
 8001d8c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001d8e:	4b26      	ldr	r3, [pc, #152]	; (8001e28 <MX_TIM12_Init+0xc0>)
 8001d90:	4a26      	ldr	r2, [pc, #152]	; (8001e2c <MX_TIM12_Init+0xc4>)
 8001d92:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 144-1;
 8001d94:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <MX_TIM12_Init+0xc0>)
 8001d96:	228f      	movs	r2, #143	; 0x8f
 8001d98:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9a:	4b23      	ldr	r3, [pc, #140]	; (8001e28 <MX_TIM12_Init+0xc0>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 9999;
 8001da0:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <MX_TIM12_Init+0xc0>)
 8001da2:	f242 720f 	movw	r2, #9999	; 0x270f
 8001da6:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da8:	4b1f      	ldr	r3, [pc, #124]	; (8001e28 <MX_TIM12_Init+0xc0>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dae:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <MX_TIM12_Init+0xc0>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim12) != HAL_OK)
 8001db4:	481c      	ldr	r0, [pc, #112]	; (8001e28 <MX_TIM12_Init+0xc0>)
 8001db6:	f004 fa28 	bl	800620a <HAL_TIM_Base_Init>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d001      	beq.n	8001dc4 <MX_TIM12_Init+0x5c>
  {
    Error_Handler();
 8001dc0:	f000 f9c1 	bl	8002146 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dc4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc8:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim12, &sClockSourceConfig) != HAL_OK)
 8001dca:	f107 0320 	add.w	r3, r7, #32
 8001dce:	4619      	mov	r1, r3
 8001dd0:	4815      	ldr	r0, [pc, #84]	; (8001e28 <MX_TIM12_Init+0xc0>)
 8001dd2:	f005 fa55 	bl	8007280 <HAL_TIM_ConfigClockSource>
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d001      	beq.n	8001de0 <MX_TIM12_Init+0x78>
  {
    Error_Handler();
 8001ddc:	f000 f9b3 	bl	8002146 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001de0:	4811      	ldr	r0, [pc, #68]	; (8001e28 <MX_TIM12_Init+0xc0>)
 8001de2:	f004 fb61 	bl	80064a8 <HAL_TIM_PWM_Init>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d001      	beq.n	8001df0 <MX_TIM12_Init+0x88>
  {
    Error_Handler();
 8001dec:	f000 f9ab 	bl	8002146 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df0:	2360      	movs	r3, #96	; 0x60
 8001df2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 750-1;
 8001df4:	f240 23ed 	movw	r3, #749	; 0x2ed
 8001df8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2200      	movs	r2, #0
 8001e06:	4619      	mov	r1, r3
 8001e08:	4807      	ldr	r0, [pc, #28]	; (8001e28 <MX_TIM12_Init+0xc0>)
 8001e0a:	f005 f977 	bl	80070fc <HAL_TIM_PWM_ConfigChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM12_Init+0xb0>
  {
    Error_Handler();
 8001e14:	f000 f997 	bl	8002146 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001e18:	4803      	ldr	r0, [pc, #12]	; (8001e28 <MX_TIM12_Init+0xc0>)
 8001e1a:	f000 fbb5 	bl	8002588 <HAL_TIM_MspPostInit>

}
 8001e1e:	bf00      	nop
 8001e20:	3730      	adds	r7, #48	; 0x30
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	200002bc 	.word	0x200002bc
 8001e2c:	40001800 	.word	0x40001800

08001e30 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <MX_DMA_Init+0x3c>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <MX_DMA_Init+0x3c>)
 8001e40:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <MX_DMA_Init+0x3c>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001e52:	2200      	movs	r2, #0
 8001e54:	2100      	movs	r1, #0
 8001e56:	2038      	movs	r0, #56	; 0x38
 8001e58:	f001 fb83 	bl	8003562 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001e5c:	2038      	movs	r0, #56	; 0x38
 8001e5e:	f001 fb9c 	bl	800359a <HAL_NVIC_EnableIRQ>

}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800

08001e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b08c      	sub	sp, #48	; 0x30
 8001e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e76:	f107 031c 	add.w	r3, r7, #28
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	605a      	str	r2, [r3, #4]
 8001e80:	609a      	str	r2, [r3, #8]
 8001e82:	60da      	str	r2, [r3, #12]
 8001e84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	61bb      	str	r3, [r7, #24]
 8001e8a:	4b73      	ldr	r3, [pc, #460]	; (8002058 <MX_GPIO_Init+0x1e8>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	4a72      	ldr	r2, [pc, #456]	; (8002058 <MX_GPIO_Init+0x1e8>)
 8001e90:	f043 0310 	orr.w	r3, r3, #16
 8001e94:	6313      	str	r3, [r2, #48]	; 0x30
 8001e96:	4b70      	ldr	r3, [pc, #448]	; (8002058 <MX_GPIO_Init+0x1e8>)
 8001e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	61bb      	str	r3, [r7, #24]
 8001ea0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	4b6c      	ldr	r3, [pc, #432]	; (8002058 <MX_GPIO_Init+0x1e8>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a6b      	ldr	r2, [pc, #428]	; (8002058 <MX_GPIO_Init+0x1e8>)
 8001eac:	f043 0304 	orr.w	r3, r3, #4
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b69      	ldr	r3, [pc, #420]	; (8002058 <MX_GPIO_Init+0x1e8>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0304 	and.w	r3, r3, #4
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	4b65      	ldr	r3, [pc, #404]	; (8002058 <MX_GPIO_Init+0x1e8>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	4a64      	ldr	r2, [pc, #400]	; (8002058 <MX_GPIO_Init+0x1e8>)
 8001ec8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ecc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ece:	4b62      	ldr	r3, [pc, #392]	; (8002058 <MX_GPIO_Init+0x1e8>)
 8001ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	4b5e      	ldr	r3, [pc, #376]	; (8002058 <MX_GPIO_Init+0x1e8>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a5d      	ldr	r2, [pc, #372]	; (8002058 <MX_GPIO_Init+0x1e8>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b5b      	ldr	r3, [pc, #364]	; (8002058 <MX_GPIO_Init+0x1e8>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	4b57      	ldr	r3, [pc, #348]	; (8002058 <MX_GPIO_Init+0x1e8>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a56      	ldr	r2, [pc, #344]	; (8002058 <MX_GPIO_Init+0x1e8>)
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b54      	ldr	r3, [pc, #336]	; (8002058 <MX_GPIO_Init+0x1e8>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	4b50      	ldr	r3, [pc, #320]	; (8002058 <MX_GPIO_Init+0x1e8>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a4f      	ldr	r2, [pc, #316]	; (8002058 <MX_GPIO_Init+0x1e8>)
 8001f1c:	f043 0308 	orr.w	r3, r3, #8
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b4d      	ldr	r3, [pc, #308]	; (8002058 <MX_GPIO_Init+0x1e8>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0308 	and.w	r3, r3, #8
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8001f34:	4849      	ldr	r0, [pc, #292]	; (800205c <MX_GPIO_Init+0x1ec>)
 8001f36:	f002 f857 	bl	8003fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001f3a:	2201      	movs	r2, #1
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	4848      	ldr	r0, [pc, #288]	; (8002060 <MX_GPIO_Init+0x1f0>)
 8001f40:	f002 f852 	bl	8003fe8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001f44:	2200      	movs	r2, #0
 8001f46:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001f4a:	4846      	ldr	r0, [pc, #280]	; (8002064 <MX_GPIO_Init+0x1f4>)
 8001f4c:	f002 f84c 	bl	8003fe8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : CS_I2C_SPI_Pin PE10 */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|GPIO_PIN_10;
 8001f50:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8001f54:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f56:	2301      	movs	r3, #1
 8001f58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001f62:	f107 031c 	add.w	r3, r7, #28
 8001f66:	4619      	mov	r1, r3
 8001f68:	483c      	ldr	r0, [pc, #240]	; (800205c <MX_GPIO_Init+0x1ec>)
 8001f6a:	f001 fea1 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f72:	2301      	movs	r3, #1
 8001f74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001f7e:	f107 031c 	add.w	r3, r7, #28
 8001f82:	4619      	mov	r1, r3
 8001f84:	4836      	ldr	r0, [pc, #216]	; (8002060 <MX_GPIO_Init+0x1f0>)
 8001f86:	f001 fe93 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001f8a:	2308      	movs	r3, #8
 8001f8c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f8e:	2302      	movs	r3, #2
 8001f90:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f9a:	2305      	movs	r3, #5
 8001f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001f9e:	f107 031c 	add.w	r3, r7, #28
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	482e      	ldr	r0, [pc, #184]	; (8002060 <MX_GPIO_Init+0x1f0>)
 8001fa6:	f001 fe83 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001faa:	2301      	movs	r3, #1
 8001fac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001fae:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001fb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001fb8:	f107 031c 	add.w	r3, r7, #28
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	482a      	ldr	r0, [pc, #168]	; (8002068 <MX_GPIO_Init+0x1f8>)
 8001fc0:	f001 fe76 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001fc4:	2304      	movs	r3, #4
 8001fc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001fd0:	f107 031c 	add.w	r3, r7, #28
 8001fd4:	4619      	mov	r1, r3
 8001fd6:	4825      	ldr	r0, [pc, #148]	; (800206c <MX_GPIO_Init+0x1fc>)
 8001fd8:	f001 fe6a 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001fe0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fea:	2300      	movs	r3, #0
 8001fec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001fee:	2305      	movs	r3, #5
 8001ff0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001ff2:	f107 031c 	add.w	r3, r7, #28
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	481c      	ldr	r0, [pc, #112]	; (800206c <MX_GPIO_Init+0x1fc>)
 8001ffa:	f001 fe59 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001ffe:	f24f 0310 	movw	r3, #61456	; 0xf010
 8002002:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002004:	2301      	movs	r3, #1
 8002006:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002008:	2300      	movs	r3, #0
 800200a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800200c:	2300      	movs	r3, #0
 800200e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002010:	f107 031c 	add.w	r3, r7, #28
 8002014:	4619      	mov	r1, r3
 8002016:	4813      	ldr	r0, [pc, #76]	; (8002064 <MX_GPIO_Init+0x1f4>)
 8002018:	f001 fe4a 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800201c:	2320      	movs	r3, #32
 800201e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002020:	2300      	movs	r3, #0
 8002022:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002028:	f107 031c 	add.w	r3, r7, #28
 800202c:	4619      	mov	r1, r3
 800202e:	480d      	ldr	r0, [pc, #52]	; (8002064 <MX_GPIO_Init+0x1f4>)
 8002030:	f001 fe3e 	bl	8003cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002034:	2302      	movs	r3, #2
 8002036:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002038:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800203c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002042:	f107 031c 	add.w	r3, r7, #28
 8002046:	4619      	mov	r1, r3
 8002048:	4804      	ldr	r0, [pc, #16]	; (800205c <MX_GPIO_Init+0x1ec>)
 800204a:	f001 fe31 	bl	8003cb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800204e:	bf00      	nop
 8002050:	3730      	adds	r7, #48	; 0x30
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	40023800 	.word	0x40023800
 800205c:	40021000 	.word	0x40021000
 8002060:	40020800 	.word	0x40020800
 8002064:	40020c00 	.word	0x40020c00
 8002068:	40020000 	.word	0x40020000
 800206c:	40020400 	.word	0x40020400

08002070 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim2.Instance) // make sure
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	4b14      	ldr	r3, [pc, #80]	; (80020d0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	429a      	cmp	r2, r3
 8002082:	d121      	bne.n	80020c8 <HAL_TIM_PeriodElapsedCallback+0x58>
	{
		activeTrigger(&sensor1);
 8002084:	4813      	ldr	r0, [pc, #76]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002086:	f7ff fae7 	bl	8001658 <activeTrigger>
		HAL_TIM_IC_Start_IT((&sensor1)->htim, TIM_CHANNEL_1);
 800208a:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2100      	movs	r1, #0
 8002090:	4618      	mov	r0, r3
 8002092:	f004 fb85 	bl	80067a0 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start_IT((&sensor2)->htim, TIM_CHANNEL_2);
 8002096:	4b10      	ldr	r3, [pc, #64]	; (80020d8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2104      	movs	r1, #4
 800209c:	4618      	mov	r0, r3
 800209e:	f004 fb7f 	bl	80067a0 <HAL_TIM_IC_Start_IT>
		HAL_TIM_IC_Start_IT((&sensor3)->htim, TIM_CHANNEL_3);
 80020a2:	4b0e      	ldr	r3, [pc, #56]	; (80020dc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2108      	movs	r1, #8
 80020a8:	4618      	mov	r0, r3
 80020aa:	f004 fb79 	bl	80067a0 <HAL_TIM_IC_Start_IT>
		updateEncoder(&enc, ((TIM3->SMCR & 0x3) == 0x3));
 80020ae:	4b0c      	ldr	r3, [pc, #48]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 0303 	and.w	r3, r3, #3
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	bf0c      	ite	eq
 80020ba:	2301      	moveq	r3, #1
 80020bc:	2300      	movne	r3, #0
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	4619      	mov	r1, r3
 80020c2:	4808      	ldr	r0, [pc, #32]	; (80020e4 <HAL_TIM_PeriodElapsedCallback+0x74>)
 80020c4:	f7fe ff20 	bl	8000f08 <updateEncoder>
	}
}
 80020c8:	bf00      	nop
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	200001e4 	.word	0x200001e4
 80020d4:	20000338 	.word	0x20000338
 80020d8:	20000358 	.word	0x20000358
 80020dc:	20000378 	.word	0x20000378
 80020e0:	40000400 	.word	0x40000400
 80020e4:	20000318 	.word	0x20000318

080020e8 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback (TIM_HandleTypeDef* htim)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b082      	sub	sp, #8
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	7f1b      	ldrb	r3, [r3, #28]
 80020f4:	2b01      	cmp	r3, #1
 80020f6:	d104      	bne.n	8002102 <HAL_TIM_IC_CaptureCallback+0x1a>
	{
		updateDistance(&sensor1, TIM_CHANNEL_1);
 80020f8:	2100      	movs	r1, #0
 80020fa:	480c      	ldr	r0, [pc, #48]	; (800212c <HAL_TIM_IC_CaptureCallback+0x44>)
 80020fc:	f7ff f984 	bl	8001408 <updateDistance>
	}
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
	{
		updateDistance(&sensor3, TIM_CHANNEL_3);
	}
}
 8002100:	e010      	b.n	8002124 <HAL_TIM_IC_CaptureCallback+0x3c>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	7f1b      	ldrb	r3, [r3, #28]
 8002106:	2b02      	cmp	r3, #2
 8002108:	d104      	bne.n	8002114 <HAL_TIM_IC_CaptureCallback+0x2c>
		updateDistance(&sensor2, TIM_CHANNEL_2);
 800210a:	2104      	movs	r1, #4
 800210c:	4808      	ldr	r0, [pc, #32]	; (8002130 <HAL_TIM_IC_CaptureCallback+0x48>)
 800210e:	f7ff f97b 	bl	8001408 <updateDistance>
}
 8002112:	e007      	b.n	8002124 <HAL_TIM_IC_CaptureCallback+0x3c>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	7f1b      	ldrb	r3, [r3, #28]
 8002118:	2b04      	cmp	r3, #4
 800211a:	d103      	bne.n	8002124 <HAL_TIM_IC_CaptureCallback+0x3c>
		updateDistance(&sensor3, TIM_CHANNEL_3);
 800211c:	2108      	movs	r1, #8
 800211e:	4805      	ldr	r0, [pc, #20]	; (8002134 <HAL_TIM_IC_CaptureCallback+0x4c>)
 8002120:	f7ff f972 	bl	8001408 <updateDistance>
}
 8002124:	bf00      	nop
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	20000338 	.word	0x20000338
 8002130:	20000358 	.word	0x20000358
 8002134:	20000378 	.word	0x20000378

08002138 <SysTick_CallBack>:

void SysTick_CallBack(void)
 {
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
//     {
//         activeTrigger(&sensor);
//         HAL_TIM_IC_Start_IT((&sensor)->htim, TIM_CHANNEL_1);
//         time = 0;
//     }
 }
 800213c:	bf00      	nop
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002146:	b480      	push	{r7}
 8002148:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800214a:	b672      	cpsid	i
}
 800214c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800214e:	e7fe      	b.n	800214e <Error_Handler+0x8>

08002150 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	607b      	str	r3, [r7, #4]
 800215a:	4b10      	ldr	r3, [pc, #64]	; (800219c <HAL_MspInit+0x4c>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	4a0f      	ldr	r2, [pc, #60]	; (800219c <HAL_MspInit+0x4c>)
 8002160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002164:	6453      	str	r3, [r2, #68]	; 0x44
 8002166:	4b0d      	ldr	r3, [pc, #52]	; (800219c <HAL_MspInit+0x4c>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216e:	607b      	str	r3, [r7, #4]
 8002170:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	603b      	str	r3, [r7, #0]
 8002176:	4b09      	ldr	r3, [pc, #36]	; (800219c <HAL_MspInit+0x4c>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	4a08      	ldr	r2, [pc, #32]	; (800219c <HAL_MspInit+0x4c>)
 800217c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002180:	6413      	str	r3, [r2, #64]	; 0x40
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <HAL_MspInit+0x4c>)
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218a:	603b      	str	r3, [r7, #0]
 800218c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800218e:	2007      	movs	r0, #7
 8002190:	f001 f9dc 	bl	800354c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002194:	bf00      	nop
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40023800 	.word	0x40023800

080021a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b08a      	sub	sp, #40	; 0x28
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021a8:	f107 0314 	add.w	r3, r7, #20
 80021ac:	2200      	movs	r2, #0
 80021ae:	601a      	str	r2, [r3, #0]
 80021b0:	605a      	str	r2, [r3, #4]
 80021b2:	609a      	str	r2, [r3, #8]
 80021b4:	60da      	str	r2, [r3, #12]
 80021b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	4a40      	ldr	r2, [pc, #256]	; (80022c0 <HAL_ADC_MspInit+0x120>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d179      	bne.n	80022b6 <HAL_ADC_MspInit+0x116>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80021c2:	2300      	movs	r3, #0
 80021c4:	613b      	str	r3, [r7, #16]
 80021c6:	4b3f      	ldr	r3, [pc, #252]	; (80022c4 <HAL_ADC_MspInit+0x124>)
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	4a3e      	ldr	r2, [pc, #248]	; (80022c4 <HAL_ADC_MspInit+0x124>)
 80021cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021d0:	6453      	str	r3, [r2, #68]	; 0x44
 80021d2:	4b3c      	ldr	r3, [pc, #240]	; (80022c4 <HAL_ADC_MspInit+0x124>)
 80021d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021da:	613b      	str	r3, [r7, #16]
 80021dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	4b38      	ldr	r3, [pc, #224]	; (80022c4 <HAL_ADC_MspInit+0x124>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	4a37      	ldr	r2, [pc, #220]	; (80022c4 <HAL_ADC_MspInit+0x124>)
 80021e8:	f043 0301 	orr.w	r3, r3, #1
 80021ec:	6313      	str	r3, [r2, #48]	; 0x30
 80021ee:	4b35      	ldr	r3, [pc, #212]	; (80022c4 <HAL_ADC_MspInit+0x124>)
 80021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80021fa:	2300      	movs	r3, #0
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	4b31      	ldr	r3, [pc, #196]	; (80022c4 <HAL_ADC_MspInit+0x124>)
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	4a30      	ldr	r2, [pc, #192]	; (80022c4 <HAL_ADC_MspInit+0x124>)
 8002204:	f043 0302 	orr.w	r3, r3, #2
 8002208:	6313      	str	r3, [r2, #48]	; 0x30
 800220a:	4b2e      	ldr	r3, [pc, #184]	; (80022c4 <HAL_ADC_MspInit+0x124>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	60bb      	str	r3, [r7, #8]
 8002214:	68bb      	ldr	r3, [r7, #8]
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002216:	230e      	movs	r3, #14
 8002218:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800221a:	2303      	movs	r3, #3
 800221c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002222:	f107 0314 	add.w	r3, r7, #20
 8002226:	4619      	mov	r1, r3
 8002228:	4827      	ldr	r0, [pc, #156]	; (80022c8 <HAL_ADC_MspInit+0x128>)
 800222a:	f001 fd41 	bl	8003cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800222e:	2303      	movs	r3, #3
 8002230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002232:	2303      	movs	r3, #3
 8002234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002236:	2300      	movs	r3, #0
 8002238:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800223a:	f107 0314 	add.w	r3, r7, #20
 800223e:	4619      	mov	r1, r3
 8002240:	4822      	ldr	r0, [pc, #136]	; (80022cc <HAL_ADC_MspInit+0x12c>)
 8002242:	f001 fd35 	bl	8003cb0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002246:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <HAL_ADC_MspInit+0x130>)
 8002248:	4a22      	ldr	r2, [pc, #136]	; (80022d4 <HAL_ADC_MspInit+0x134>)
 800224a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800224c:	4b20      	ldr	r3, [pc, #128]	; (80022d0 <HAL_ADC_MspInit+0x130>)
 800224e:	2200      	movs	r2, #0
 8002250:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002252:	4b1f      	ldr	r3, [pc, #124]	; (80022d0 <HAL_ADC_MspInit+0x130>)
 8002254:	2200      	movs	r2, #0
 8002256:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002258:	4b1d      	ldr	r3, [pc, #116]	; (80022d0 <HAL_ADC_MspInit+0x130>)
 800225a:	2200      	movs	r2, #0
 800225c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800225e:	4b1c      	ldr	r3, [pc, #112]	; (80022d0 <HAL_ADC_MspInit+0x130>)
 8002260:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002264:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002266:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_ADC_MspInit+0x130>)
 8002268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800226c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800226e:	4b18      	ldr	r3, [pc, #96]	; (80022d0 <HAL_ADC_MspInit+0x130>)
 8002270:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002274:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002276:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <HAL_ADC_MspInit+0x130>)
 8002278:	f44f 7280 	mov.w	r2, #256	; 0x100
 800227c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800227e:	4b14      	ldr	r3, [pc, #80]	; (80022d0 <HAL_ADC_MspInit+0x130>)
 8002280:	2200      	movs	r2, #0
 8002282:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002284:	4b12      	ldr	r3, [pc, #72]	; (80022d0 <HAL_ADC_MspInit+0x130>)
 8002286:	2200      	movs	r2, #0
 8002288:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800228a:	4811      	ldr	r0, [pc, #68]	; (80022d0 <HAL_ADC_MspInit+0x130>)
 800228c:	f001 f9a0 	bl	80035d0 <HAL_DMA_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 8002296:	f7ff ff56 	bl	8002146 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a0c      	ldr	r2, [pc, #48]	; (80022d0 <HAL_ADC_MspInit+0x130>)
 800229e:	639a      	str	r2, [r3, #56]	; 0x38
 80022a0:	4a0b      	ldr	r2, [pc, #44]	; (80022d0 <HAL_ADC_MspInit+0x130>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80022a6:	2200      	movs	r2, #0
 80022a8:	2100      	movs	r1, #0
 80022aa:	2012      	movs	r0, #18
 80022ac:	f001 f959 	bl	8003562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80022b0:	2012      	movs	r0, #18
 80022b2:	f001 f972 	bl	800359a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80022b6:	bf00      	nop
 80022b8:	3728      	adds	r7, #40	; 0x28
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	40012000 	.word	0x40012000
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40020000 	.word	0x40020000
 80022cc:	40020400 	.word	0x40020400
 80022d0:	200000e4 	.word	0x200000e4
 80022d4:	40026410 	.word	0x40026410

080022d8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b08a      	sub	sp, #40	; 0x28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f107 0314 	add.w	r3, r7, #20
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a19      	ldr	r2, [pc, #100]	; (800235c <HAL_SPI_MspInit+0x84>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d12b      	bne.n	8002352 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	4b18      	ldr	r3, [pc, #96]	; (8002360 <HAL_SPI_MspInit+0x88>)
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	4a17      	ldr	r2, [pc, #92]	; (8002360 <HAL_SPI_MspInit+0x88>)
 8002304:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002308:	6453      	str	r3, [r2, #68]	; 0x44
 800230a:	4b15      	ldr	r3, [pc, #84]	; (8002360 <HAL_SPI_MspInit+0x88>)
 800230c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002312:	613b      	str	r3, [r7, #16]
 8002314:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	4b11      	ldr	r3, [pc, #68]	; (8002360 <HAL_SPI_MspInit+0x88>)
 800231c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800231e:	4a10      	ldr	r2, [pc, #64]	; (8002360 <HAL_SPI_MspInit+0x88>)
 8002320:	f043 0301 	orr.w	r3, r3, #1
 8002324:	6313      	str	r3, [r2, #48]	; 0x30
 8002326:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <HAL_SPI_MspInit+0x88>)
 8002328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002332:	23e0      	movs	r3, #224	; 0xe0
 8002334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002336:	2302      	movs	r3, #2
 8002338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233a:	2300      	movs	r3, #0
 800233c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800233e:	2300      	movs	r3, #0
 8002340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002342:	2305      	movs	r3, #5
 8002344:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002346:	f107 0314 	add.w	r3, r7, #20
 800234a:	4619      	mov	r1, r3
 800234c:	4805      	ldr	r0, [pc, #20]	; (8002364 <HAL_SPI_MspInit+0x8c>)
 800234e:	f001 fcaf 	bl	8003cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002352:	bf00      	nop
 8002354:	3728      	adds	r7, #40	; 0x28
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40013000 	.word	0x40013000
 8002360:	40023800 	.word	0x40023800
 8002364:	40020000 	.word	0x40020000

08002368 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08c      	sub	sp, #48	; 0x30
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a43      	ldr	r2, [pc, #268]	; (8002494 <HAL_TIM_Base_MspInit+0x12c>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d135      	bne.n	80023f6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	61bb      	str	r3, [r7, #24]
 800238e:	4b42      	ldr	r3, [pc, #264]	; (8002498 <HAL_TIM_Base_MspInit+0x130>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	4a41      	ldr	r2, [pc, #260]	; (8002498 <HAL_TIM_Base_MspInit+0x130>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6453      	str	r3, [r2, #68]	; 0x44
 800239a:	4b3f      	ldr	r3, [pc, #252]	; (8002498 <HAL_TIM_Base_MspInit+0x130>)
 800239c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	61bb      	str	r3, [r7, #24]
 80023a4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	4b3b      	ldr	r3, [pc, #236]	; (8002498 <HAL_TIM_Base_MspInit+0x130>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a3a      	ldr	r2, [pc, #232]	; (8002498 <HAL_TIM_Base_MspInit+0x130>)
 80023b0:	f043 0310 	orr.w	r3, r3, #16
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b38      	ldr	r3, [pc, #224]	; (8002498 <HAL_TIM_Base_MspInit+0x130>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0310 	and.w	r3, r3, #16
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    PE13     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 80023c2:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 80023c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023c8:	2302      	movs	r3, #2
 80023ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d0:	2300      	movs	r3, #0
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023d4:	2301      	movs	r3, #1
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	4619      	mov	r1, r3
 80023de:	482f      	ldr	r0, [pc, #188]	; (800249c <HAL_TIM_Base_MspInit+0x134>)
 80023e0:	f001 fc66 	bl	8003cb0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 1);
 80023e4:	2201      	movs	r2, #1
 80023e6:	2100      	movs	r1, #0
 80023e8:	201b      	movs	r0, #27
 80023ea:	f001 f8ba 	bl	8003562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80023ee:	201b      	movs	r0, #27
 80023f0:	f001 f8d3 	bl	800359a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80023f4:	e04a      	b.n	800248c <HAL_TIM_Base_MspInit+0x124>
  else if(htim_base->Instance==TIM2)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023fe:	d116      	bne.n	800242e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002400:	2300      	movs	r3, #0
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	4b24      	ldr	r3, [pc, #144]	; (8002498 <HAL_TIM_Base_MspInit+0x130>)
 8002406:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002408:	4a23      	ldr	r2, [pc, #140]	; (8002498 <HAL_TIM_Base_MspInit+0x130>)
 800240a:	f043 0301 	orr.w	r3, r3, #1
 800240e:	6413      	str	r3, [r2, #64]	; 0x40
 8002410:	4b21      	ldr	r3, [pc, #132]	; (8002498 <HAL_TIM_Base_MspInit+0x130>)
 8002412:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002414:	f003 0301 	and.w	r3, r3, #1
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800241c:	2200      	movs	r2, #0
 800241e:	2100      	movs	r1, #0
 8002420:	201c      	movs	r0, #28
 8002422:	f001 f89e 	bl	8003562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002426:	201c      	movs	r0, #28
 8002428:	f001 f8b7 	bl	800359a <HAL_NVIC_EnableIRQ>
}
 800242c:	e02e      	b.n	800248c <HAL_TIM_Base_MspInit+0x124>
  else if(htim_base->Instance==TIM9)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1b      	ldr	r2, [pc, #108]	; (80024a0 <HAL_TIM_Base_MspInit+0x138>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d10e      	bne.n	8002456 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	4b16      	ldr	r3, [pc, #88]	; (8002498 <HAL_TIM_Base_MspInit+0x130>)
 800243e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002440:	4a15      	ldr	r2, [pc, #84]	; (8002498 <HAL_TIM_Base_MspInit+0x130>)
 8002442:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002446:	6453      	str	r3, [r2, #68]	; 0x44
 8002448:	4b13      	ldr	r3, [pc, #76]	; (8002498 <HAL_TIM_Base_MspInit+0x130>)
 800244a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800244c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002450:	60fb      	str	r3, [r7, #12]
 8002452:	68fb      	ldr	r3, [r7, #12]
}
 8002454:	e01a      	b.n	800248c <HAL_TIM_Base_MspInit+0x124>
  else if(htim_base->Instance==TIM12)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a12      	ldr	r2, [pc, #72]	; (80024a4 <HAL_TIM_Base_MspInit+0x13c>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d115      	bne.n	800248c <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002460:	2300      	movs	r3, #0
 8002462:	60bb      	str	r3, [r7, #8]
 8002464:	4b0c      	ldr	r3, [pc, #48]	; (8002498 <HAL_TIM_Base_MspInit+0x130>)
 8002466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002468:	4a0b      	ldr	r2, [pc, #44]	; (8002498 <HAL_TIM_Base_MspInit+0x130>)
 800246a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800246e:	6413      	str	r3, [r2, #64]	; 0x40
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_TIM_Base_MspInit+0x130>)
 8002472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 800247c:	2200      	movs	r2, #0
 800247e:	2100      	movs	r1, #0
 8002480:	202b      	movs	r0, #43	; 0x2b
 8002482:	f001 f86e 	bl	8003562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8002486:	202b      	movs	r0, #43	; 0x2b
 8002488:	f001 f887 	bl	800359a <HAL_NVIC_EnableIRQ>
}
 800248c:	bf00      	nop
 800248e:	3730      	adds	r7, #48	; 0x30
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40010000 	.word	0x40010000
 8002498:	40023800 	.word	0x40023800
 800249c:	40021000 	.word	0x40021000
 80024a0:	40014000 	.word	0x40014000
 80024a4:	40001800 	.word	0x40001800

080024a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b08a      	sub	sp, #40	; 0x28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024b0:	f107 0314 	add.w	r3, r7, #20
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	605a      	str	r2, [r3, #4]
 80024ba:	609a      	str	r2, [r3, #8]
 80024bc:	60da      	str	r2, [r3, #12]
 80024be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a2c      	ldr	r2, [pc, #176]	; (8002578 <HAL_TIM_Encoder_MspInit+0xd0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d151      	bne.n	800256e <HAL_TIM_Encoder_MspInit+0xc6>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024ca:	2300      	movs	r3, #0
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	4b2b      	ldr	r3, [pc, #172]	; (800257c <HAL_TIM_Encoder_MspInit+0xd4>)
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	4a2a      	ldr	r2, [pc, #168]	; (800257c <HAL_TIM_Encoder_MspInit+0xd4>)
 80024d4:	f043 0302 	orr.w	r3, r3, #2
 80024d8:	6413      	str	r3, [r2, #64]	; 0x40
 80024da:	4b28      	ldr	r3, [pc, #160]	; (800257c <HAL_TIM_Encoder_MspInit+0xd4>)
 80024dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024de:	f003 0302 	and.w	r3, r3, #2
 80024e2:	613b      	str	r3, [r7, #16]
 80024e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	60fb      	str	r3, [r7, #12]
 80024ea:	4b24      	ldr	r3, [pc, #144]	; (800257c <HAL_TIM_Encoder_MspInit+0xd4>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ee:	4a23      	ldr	r2, [pc, #140]	; (800257c <HAL_TIM_Encoder_MspInit+0xd4>)
 80024f0:	f043 0304 	orr.w	r3, r3, #4
 80024f4:	6313      	str	r3, [r2, #48]	; 0x30
 80024f6:	4b21      	ldr	r3, [pc, #132]	; (800257c <HAL_TIM_Encoder_MspInit+0xd4>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	f003 0304 	and.w	r3, r3, #4
 80024fe:	60fb      	str	r3, [r7, #12]
 8002500:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
 8002506:	4b1d      	ldr	r3, [pc, #116]	; (800257c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	4a1c      	ldr	r2, [pc, #112]	; (800257c <HAL_TIM_Encoder_MspInit+0xd4>)
 800250c:	f043 0302 	orr.w	r3, r3, #2
 8002510:	6313      	str	r3, [r2, #48]	; 0x30
 8002512:	4b1a      	ldr	r3, [pc, #104]	; (800257c <HAL_TIM_Encoder_MspInit+0xd4>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800251e:	2340      	movs	r3, #64	; 0x40
 8002520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002522:	2302      	movs	r3, #2
 8002524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	2300      	movs	r3, #0
 800252c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800252e:	2302      	movs	r3, #2
 8002530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002532:	f107 0314 	add.w	r3, r7, #20
 8002536:	4619      	mov	r1, r3
 8002538:	4811      	ldr	r0, [pc, #68]	; (8002580 <HAL_TIM_Encoder_MspInit+0xd8>)
 800253a:	f001 fbb9 	bl	8003cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800253e:	2320      	movs	r3, #32
 8002540:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002542:	2302      	movs	r3, #2
 8002544:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002546:	2300      	movs	r3, #0
 8002548:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800254a:	2300      	movs	r3, #0
 800254c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800254e:	2302      	movs	r3, #2
 8002550:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002552:	f107 0314 	add.w	r3, r7, #20
 8002556:	4619      	mov	r1, r3
 8002558:	480a      	ldr	r0, [pc, #40]	; (8002584 <HAL_TIM_Encoder_MspInit+0xdc>)
 800255a:	f001 fba9 	bl	8003cb0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800255e:	2200      	movs	r2, #0
 8002560:	2100      	movs	r1, #0
 8002562:	201d      	movs	r0, #29
 8002564:	f000 fffd 	bl	8003562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002568:	201d      	movs	r0, #29
 800256a:	f001 f816 	bl	800359a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800256e:	bf00      	nop
 8002570:	3728      	adds	r7, #40	; 0x28
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40000400 	.word	0x40000400
 800257c:	40023800 	.word	0x40023800
 8002580:	40020800 	.word	0x40020800
 8002584:	40020400 	.word	0x40020400

08002588 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b08a      	sub	sp, #40	; 0x28
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002590:	f107 0314 	add.w	r3, r7, #20
 8002594:	2200      	movs	r2, #0
 8002596:	601a      	str	r2, [r3, #0]
 8002598:	605a      	str	r2, [r3, #4]
 800259a:	609a      	str	r2, [r3, #8]
 800259c:	60da      	str	r2, [r3, #12]
 800259e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM9)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a24      	ldr	r2, [pc, #144]	; (8002638 <HAL_TIM_MspPostInit+0xb0>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d11e      	bne.n	80025e8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM9_MspPostInit 0 */

  /* USER CODE END TIM9_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	4b23      	ldr	r3, [pc, #140]	; (800263c <HAL_TIM_MspPostInit+0xb4>)
 80025b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b2:	4a22      	ldr	r2, [pc, #136]	; (800263c <HAL_TIM_MspPostInit+0xb4>)
 80025b4:	f043 0310 	orr.w	r3, r3, #16
 80025b8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ba:	4b20      	ldr	r3, [pc, #128]	; (800263c <HAL_TIM_MspPostInit+0xb4>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	f003 0310 	and.w	r3, r3, #16
 80025c2:	613b      	str	r3, [r7, #16]
 80025c4:	693b      	ldr	r3, [r7, #16]
    /**TIM9 GPIO Configuration
    PE5     ------> TIM9_CH1
    PE6     ------> TIM9_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80025c6:	2360      	movs	r3, #96	; 0x60
 80025c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ca:	2302      	movs	r3, #2
 80025cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ce:	2300      	movs	r3, #0
 80025d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d2:	2300      	movs	r3, #0
 80025d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80025d6:	2303      	movs	r3, #3
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025da:	f107 0314 	add.w	r3, r7, #20
 80025de:	4619      	mov	r1, r3
 80025e0:	4817      	ldr	r0, [pc, #92]	; (8002640 <HAL_TIM_MspPostInit+0xb8>)
 80025e2:	f001 fb65 	bl	8003cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80025e6:	e023      	b.n	8002630 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM12)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a15      	ldr	r2, [pc, #84]	; (8002644 <HAL_TIM_MspPostInit+0xbc>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d11e      	bne.n	8002630 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	4b11      	ldr	r3, [pc, #68]	; (800263c <HAL_TIM_MspPostInit+0xb4>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	4a10      	ldr	r2, [pc, #64]	; (800263c <HAL_TIM_MspPostInit+0xb4>)
 80025fc:	f043 0302 	orr.w	r3, r3, #2
 8002600:	6313      	str	r3, [r2, #48]	; 0x30
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <HAL_TIM_MspPostInit+0xb4>)
 8002604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002606:	f003 0302 	and.w	r3, r3, #2
 800260a:	60fb      	str	r3, [r7, #12]
 800260c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 800260e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002614:	2302      	movs	r3, #2
 8002616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002618:	2300      	movs	r3, #0
 800261a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800261c:	2300      	movs	r3, #0
 800261e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002620:	2309      	movs	r3, #9
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002624:	f107 0314 	add.w	r3, r7, #20
 8002628:	4619      	mov	r1, r3
 800262a:	4807      	ldr	r0, [pc, #28]	; (8002648 <HAL_TIM_MspPostInit+0xc0>)
 800262c:	f001 fb40 	bl	8003cb0 <HAL_GPIO_Init>
}
 8002630:	bf00      	nop
 8002632:	3728      	adds	r7, #40	; 0x28
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40014000 	.word	0x40014000
 800263c:	40023800 	.word	0x40023800
 8002640:	40021000 	.word	0x40021000
 8002644:	40001800 	.word	0x40001800
 8002648:	40020400 	.word	0x40020400

0800264c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002650:	e7fe      	b.n	8002650 <NMI_Handler+0x4>

08002652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002656:	e7fe      	b.n	8002656 <HardFault_Handler+0x4>

08002658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800265c:	e7fe      	b.n	800265c <MemManage_Handler+0x4>

0800265e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800265e:	b480      	push	{r7}
 8002660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002662:	e7fe      	b.n	8002662 <BusFault_Handler+0x4>

08002664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002668:	e7fe      	b.n	8002668 <UsageFault_Handler+0x4>

0800266a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800266a:	b480      	push	{r7}
 800266c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800266e:	bf00      	nop
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr

08002678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002678:	b480      	push	{r7}
 800267a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800267c:	bf00      	nop
 800267e:	46bd      	mov	sp, r7
 8002680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002684:	4770      	bx	lr

08002686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002686:	b480      	push	{r7}
 8002688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800268a:	bf00      	nop
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr

08002694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002698:	f000 f90e 	bl	80028b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  SysTick_CallBack();
 800269c:	f7ff fd4c 	bl	8002138 <SysTick_CallBack>
  /* USER CODE END SysTick_IRQn 1 */
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80026a8:	4802      	ldr	r0, [pc, #8]	; (80026b4 <ADC_IRQHandler+0x10>)
 80026aa:	f000 f98c 	bl	80029c6 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 80026ae:	bf00      	nop
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	2000009c 	.word	0x2000009c

080026b8 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80026bc:	4802      	ldr	r0, [pc, #8]	; (80026c8 <TIM1_CC_IRQHandler+0x10>)
 80026be:	f004 fb79 	bl	8006db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80026c2:	bf00      	nop
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	2000019c 	.word	0x2000019c

080026cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026d0:	4802      	ldr	r0, [pc, #8]	; (80026dc <TIM2_IRQHandler+0x10>)
 80026d2:	f004 fb6f 	bl	8006db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	200001e4 	.word	0x200001e4

080026e0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80026e4:	4802      	ldr	r0, [pc, #8]	; (80026f0 <TIM3_IRQHandler+0x10>)
 80026e6:	f004 fb65 	bl	8006db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80026ea:	bf00      	nop
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	bf00      	nop
 80026f0:	2000022c 	.word	0x2000022c

080026f4 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim12);
 80026f8:	4802      	ldr	r0, [pc, #8]	; (8002704 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 80026fa:	f004 fb5b 	bl	8006db4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80026fe:	bf00      	nop
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	200002bc 	.word	0x200002bc

08002708 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800270c:	4802      	ldr	r0, [pc, #8]	; (8002718 <DMA2_Stream0_IRQHandler+0x10>)
 800270e:	f001 f865 	bl	80037dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002712:	bf00      	nop
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	200000e4 	.word	0x200000e4

0800271c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002720:	4802      	ldr	r0, [pc, #8]	; (800272c <OTG_FS_IRQHandler+0x10>)
 8002722:	f001 fee5 	bl	80044f0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	200007e8 	.word	0x200007e8

08002730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002738:	4a14      	ldr	r2, [pc, #80]	; (800278c <_sbrk+0x5c>)
 800273a:	4b15      	ldr	r3, [pc, #84]	; (8002790 <_sbrk+0x60>)
 800273c:	1ad3      	subs	r3, r2, r3
 800273e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002744:	4b13      	ldr	r3, [pc, #76]	; (8002794 <_sbrk+0x64>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2b00      	cmp	r3, #0
 800274a:	d102      	bne.n	8002752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800274c:	4b11      	ldr	r3, [pc, #68]	; (8002794 <_sbrk+0x64>)
 800274e:	4a12      	ldr	r2, [pc, #72]	; (8002798 <_sbrk+0x68>)
 8002750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002752:	4b10      	ldr	r3, [pc, #64]	; (8002794 <_sbrk+0x64>)
 8002754:	681a      	ldr	r2, [r3, #0]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	4413      	add	r3, r2
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	429a      	cmp	r2, r3
 800275e:	d207      	bcs.n	8002770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002760:	f008 ff34 	bl	800b5cc <__errno>
 8002764:	4603      	mov	r3, r0
 8002766:	220c      	movs	r2, #12
 8002768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800276a:	f04f 33ff 	mov.w	r3, #4294967295
 800276e:	e009      	b.n	8002784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002770:	4b08      	ldr	r3, [pc, #32]	; (8002794 <_sbrk+0x64>)
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002776:	4b07      	ldr	r3, [pc, #28]	; (8002794 <_sbrk+0x64>)
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	4a05      	ldr	r2, [pc, #20]	; (8002794 <_sbrk+0x64>)
 8002780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002782:	68fb      	ldr	r3, [r7, #12]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3718      	adds	r7, #24
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	20020000 	.word	0x20020000
 8002790:	00000400 	.word	0x00000400
 8002794:	20000404 	.word	0x20000404
 8002798:	20000c38 	.word	0x20000c38

0800279c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800279c:	b480      	push	{r7}
 800279e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <SystemInit+0x20>)
 80027a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027a6:	4a05      	ldr	r2, [pc, #20]	; (80027bc <SystemInit+0x20>)
 80027a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80027b0:	bf00      	nop
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr
 80027ba:	bf00      	nop
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80027c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80027f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80027c4:	480d      	ldr	r0, [pc, #52]	; (80027fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80027c6:	490e      	ldr	r1, [pc, #56]	; (8002800 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80027c8:	4a0e      	ldr	r2, [pc, #56]	; (8002804 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80027ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80027cc:	e002      	b.n	80027d4 <LoopCopyDataInit>

080027ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027d2:	3304      	adds	r3, #4

080027d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027d8:	d3f9      	bcc.n	80027ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027da:	4a0b      	ldr	r2, [pc, #44]	; (8002808 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80027dc:	4c0b      	ldr	r4, [pc, #44]	; (800280c <LoopFillZerobss+0x26>)
  movs r3, #0
 80027de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027e0:	e001      	b.n	80027e6 <LoopFillZerobss>

080027e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027e4:	3204      	adds	r2, #4

080027e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027e8:	d3fb      	bcc.n	80027e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80027ea:	f7ff ffd7 	bl	800279c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80027ee:	f008 fef3 	bl	800b5d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027f2:	f7fe ff6d 	bl	80016d0 <main>
  bx  lr    
 80027f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002800:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8002804:	0800b700 	.word	0x0800b700
  ldr r2, =_sbss
 8002808:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800280c:	20000c34 	.word	0x20000c34

08002810 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002810:	e7fe      	b.n	8002810 <CAN1_RX0_IRQHandler>
	...

08002814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002818:	4b0e      	ldr	r3, [pc, #56]	; (8002854 <HAL_Init+0x40>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a0d      	ldr	r2, [pc, #52]	; (8002854 <HAL_Init+0x40>)
 800281e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002822:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <HAL_Init+0x40>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a0a      	ldr	r2, [pc, #40]	; (8002854 <HAL_Init+0x40>)
 800282a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800282e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002830:	4b08      	ldr	r3, [pc, #32]	; (8002854 <HAL_Init+0x40>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a07      	ldr	r2, [pc, #28]	; (8002854 <HAL_Init+0x40>)
 8002836:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800283a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800283c:	2003      	movs	r0, #3
 800283e:	f000 fe85 	bl	800354c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002842:	2000      	movs	r0, #0
 8002844:	f000 f808 	bl	8002858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002848:	f7ff fc82 	bl	8002150 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800284c:	2300      	movs	r3, #0
}
 800284e:	4618      	mov	r0, r3
 8002850:	bd80      	pop	{r7, pc}
 8002852:	bf00      	nop
 8002854:	40023c00 	.word	0x40023c00

08002858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b082      	sub	sp, #8
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002860:	4b12      	ldr	r3, [pc, #72]	; (80028ac <HAL_InitTick+0x54>)
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <HAL_InitTick+0x58>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	4619      	mov	r1, r3
 800286a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800286e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002872:	fbb2 f3f3 	udiv	r3, r2, r3
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fe9d 	bl	80035b6 <HAL_SYSTICK_Config>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d001      	beq.n	8002886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002882:	2301      	movs	r3, #1
 8002884:	e00e      	b.n	80028a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2b0f      	cmp	r3, #15
 800288a:	d80a      	bhi.n	80028a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800288c:	2200      	movs	r2, #0
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	f04f 30ff 	mov.w	r0, #4294967295
 8002894:	f000 fe65 	bl	8003562 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002898:	4a06      	ldr	r2, [pc, #24]	; (80028b4 <HAL_InitTick+0x5c>)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
 80028a0:	e000      	b.n	80028a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	3708      	adds	r7, #8
 80028a8:	46bd      	mov	sp, r7
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	20000000 	.word	0x20000000
 80028b0:	20000008 	.word	0x20000008
 80028b4:	20000004 	.word	0x20000004

080028b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028bc:	4b06      	ldr	r3, [pc, #24]	; (80028d8 <HAL_IncTick+0x20>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	461a      	mov	r2, r3
 80028c2:	4b06      	ldr	r3, [pc, #24]	; (80028dc <HAL_IncTick+0x24>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	4413      	add	r3, r2
 80028c8:	4a04      	ldr	r2, [pc, #16]	; (80028dc <HAL_IncTick+0x24>)
 80028ca:	6013      	str	r3, [r2, #0]
}
 80028cc:	bf00      	nop
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	20000008 	.word	0x20000008
 80028dc:	20000408 	.word	0x20000408

080028e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0
  return uwTick;
 80028e4:	4b03      	ldr	r3, [pc, #12]	; (80028f4 <HAL_GetTick+0x14>)
 80028e6:	681b      	ldr	r3, [r3, #0]
}
 80028e8:	4618      	mov	r0, r3
 80028ea:	46bd      	mov	sp, r7
 80028ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f0:	4770      	bx	lr
 80028f2:	bf00      	nop
 80028f4:	20000408 	.word	0x20000408

080028f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002900:	f7ff ffee 	bl	80028e0 <HAL_GetTick>
 8002904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002910:	d005      	beq.n	800291e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002912:	4b0a      	ldr	r3, [pc, #40]	; (800293c <HAL_Delay+0x44>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	4413      	add	r3, r2
 800291c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800291e:	bf00      	nop
 8002920:	f7ff ffde 	bl	80028e0 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	429a      	cmp	r2, r3
 800292e:	d8f7      	bhi.n	8002920 <HAL_Delay+0x28>
  {
  }
}
 8002930:	bf00      	nop
 8002932:	bf00      	nop
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	20000008 	.word	0x20000008

08002940 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b084      	sub	sp, #16
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002948:	2300      	movs	r3, #0
 800294a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e033      	b.n	80029be <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800295a:	2b00      	cmp	r3, #0
 800295c:	d109      	bne.n	8002972 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800295e:	6878      	ldr	r0, [r7, #4]
 8002960:	f7ff fc1e 	bl	80021a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002976:	f003 0310 	and.w	r3, r3, #16
 800297a:	2b00      	cmp	r3, #0
 800297c:	d118      	bne.n	80029b0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002982:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002986:	f023 0302 	bic.w	r3, r3, #2
 800298a:	f043 0202 	orr.w	r2, r3, #2
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 fb82 	bl	800309c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2200      	movs	r2, #0
 800299c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a2:	f023 0303 	bic.w	r3, r3, #3
 80029a6:	f043 0201 	orr.w	r2, r3, #1
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	641a      	str	r2, [r3, #64]	; 0x40
 80029ae:	e001      	b.n	80029b4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2200      	movs	r2, #0
 80029b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80029bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b086      	sub	sp, #24
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80029ce:	2300      	movs	r3, #0
 80029d0:	617b      	str	r3, [r7, #20]
 80029d2:	2300      	movs	r3, #0
 80029d4:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f003 0302 	and.w	r3, r3, #2
 80029ec:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d049      	beq.n	8002a90 <HAL_ADC_IRQHandler+0xca>
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d046      	beq.n	8002a90 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f003 0310 	and.w	r3, r3, #16
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d105      	bne.n	8002a1a <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a12:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d12b      	bne.n	8002a80 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d127      	bne.n	8002a80 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a36:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d006      	beq.n	8002a4c <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d119      	bne.n	8002a80 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 0220 	bic.w	r2, r2, #32
 8002a5a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d105      	bne.n	8002a80 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a78:	f043 0201 	orr.w	r2, r3, #1
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f9c1 	bl	8002e08 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f06f 0212 	mvn.w	r2, #18
 8002a8e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a9e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d057      	beq.n	8002b56 <HAL_ADC_IRQHandler+0x190>
 8002aa6:	693b      	ldr	r3, [r7, #16]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d054      	beq.n	8002b56 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d105      	bne.n	8002ac4 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002abc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d139      	bne.n	8002b46 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d006      	beq.n	8002aee <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d12b      	bne.n	8002b46 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d124      	bne.n	8002b46 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d11d      	bne.n	8002b46 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d119      	bne.n	8002b46 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685a      	ldr	r2, [r3, #4]
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b20:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d105      	bne.n	8002b46 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	f043 0201 	orr.w	r2, r3, #1
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fc26 	bl	8003398 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f06f 020c 	mvn.w	r2, #12
 8002b54:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002b5e:	68bb      	ldr	r3, [r7, #8]
 8002b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b64:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d017      	beq.n	8002b9c <HAL_ADC_IRQHandler+0x1d6>
 8002b6c:	693b      	ldr	r3, [r7, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d014      	beq.n	8002b9c <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d10d      	bne.n	8002b9c <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b84:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f94f 	bl	8002e30 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f06f 0201 	mvn.w	r2, #1
 8002b9a:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	f003 0320 	and.w	r3, r3, #32
 8002ba2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002baa:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d015      	beq.n	8002bde <HAL_ADC_IRQHandler+0x218>
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d012      	beq.n	8002bde <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bbc:	f043 0202 	orr.w	r2, r3, #2
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f06f 0220 	mvn.w	r2, #32
 8002bcc:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002bce:	6878      	ldr	r0, [r7, #4]
 8002bd0:	f000 f938 	bl	8002e44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f06f 0220 	mvn.w	r2, #32
 8002bdc:	601a      	str	r2, [r3, #0]
  }
}
 8002bde:	bf00      	nop
 8002be0:	3718      	adds	r7, #24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}
	...

08002be8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b086      	sub	sp, #24
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d101      	bne.n	8002c06 <HAL_ADC_Start_DMA+0x1e>
 8002c02:	2302      	movs	r3, #2
 8002c04:	e0e9      	b.n	8002dda <HAL_ADC_Start_DMA+0x1f2>
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2201      	movs	r2, #1
 8002c0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d018      	beq.n	8002c4e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689a      	ldr	r2, [r3, #8]
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f042 0201 	orr.w	r2, r2, #1
 8002c2a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002c2c:	4b6d      	ldr	r3, [pc, #436]	; (8002de4 <HAL_ADC_Start_DMA+0x1fc>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a6d      	ldr	r2, [pc, #436]	; (8002de8 <HAL_ADC_Start_DMA+0x200>)
 8002c32:	fba2 2303 	umull	r2, r3, r2, r3
 8002c36:	0c9a      	lsrs	r2, r3, #18
 8002c38:	4613      	mov	r3, r2
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4413      	add	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002c40:	e002      	b.n	8002c48 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f9      	bne.n	8002c42 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c5c:	d107      	bne.n	8002c6e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c6c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	689b      	ldr	r3, [r3, #8]
 8002c74:	f003 0301 	and.w	r3, r3, #1
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	f040 80a1 	bne.w	8002dc0 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002c86:	f023 0301 	bic.w	r3, r3, #1
 8002c8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d007      	beq.n	8002cb0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002ca8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cbc:	d106      	bne.n	8002ccc <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cc2:	f023 0206 	bic.w	r2, r3, #6
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	645a      	str	r2, [r3, #68]	; 0x44
 8002cca:	e002      	b.n	8002cd2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002cda:	4b44      	ldr	r3, [pc, #272]	; (8002dec <HAL_ADC_Start_DMA+0x204>)
 8002cdc:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ce2:	4a43      	ldr	r2, [pc, #268]	; (8002df0 <HAL_ADC_Start_DMA+0x208>)
 8002ce4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cea:	4a42      	ldr	r2, [pc, #264]	; (8002df4 <HAL_ADC_Start_DMA+0x20c>)
 8002cec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cf2:	4a41      	ldr	r2, [pc, #260]	; (8002df8 <HAL_ADC_Start_DMA+0x210>)
 8002cf4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002cfe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685a      	ldr	r2, [r3, #4]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002d0e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	689a      	ldr	r2, [r3, #8]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d1e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	334c      	adds	r3, #76	; 0x4c
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	68ba      	ldr	r2, [r7, #8]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f000 fcfc 	bl	800372c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 031f 	and.w	r3, r3, #31
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d12a      	bne.n	8002d96 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a2d      	ldr	r2, [pc, #180]	; (8002dfc <HAL_ADC_Start_DMA+0x214>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d015      	beq.n	8002d76 <HAL_ADC_Start_DMA+0x18e>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4a2c      	ldr	r2, [pc, #176]	; (8002e00 <HAL_ADC_Start_DMA+0x218>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d105      	bne.n	8002d60 <HAL_ADC_Start_DMA+0x178>
 8002d54:	4b25      	ldr	r3, [pc, #148]	; (8002dec <HAL_ADC_Start_DMA+0x204>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f003 031f 	and.w	r3, r3, #31
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d00a      	beq.n	8002d76 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a27      	ldr	r2, [pc, #156]	; (8002e04 <HAL_ADC_Start_DMA+0x21c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d136      	bne.n	8002dd8 <HAL_ADC_Start_DMA+0x1f0>
 8002d6a:	4b20      	ldr	r3, [pc, #128]	; (8002dec <HAL_ADC_Start_DMA+0x204>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f003 0310 	and.w	r3, r3, #16
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d130      	bne.n	8002dd8 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	689b      	ldr	r3, [r3, #8]
 8002d7c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d129      	bne.n	8002dd8 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689a      	ldr	r2, [r3, #8]
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002d92:	609a      	str	r2, [r3, #8]
 8002d94:	e020      	b.n	8002dd8 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a18      	ldr	r2, [pc, #96]	; (8002dfc <HAL_ADC_Start_DMA+0x214>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d11b      	bne.n	8002dd8 <HAL_ADC_Start_DMA+0x1f0>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d114      	bne.n	8002dd8 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689a      	ldr	r2, [r3, #8]
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002dbc:	609a      	str	r2, [r3, #8]
 8002dbe:	e00b      	b.n	8002dd8 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc4:	f043 0210 	orr.w	r2, r3, #16
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd0:	f043 0201 	orr.w	r2, r3, #1
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3718      	adds	r7, #24
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20000000 	.word	0x20000000
 8002de8:	431bde83 	.word	0x431bde83
 8002dec:	40012300 	.word	0x40012300
 8002df0:	08003295 	.word	0x08003295
 8002df4:	0800334f 	.word	0x0800334f
 8002df8:	0800336b 	.word	0x0800336b
 8002dfc:	40012000 	.word	0x40012000
 8002e00:	40012100 	.word	0x40012100
 8002e04:	40012200 	.word	0x40012200

08002e08 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002e10:	bf00      	nop
 8002e12:	370c      	adds	r7, #12
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002e24:	bf00      	nop
 8002e26:	370c      	adds	r7, #12
 8002e28:	46bd      	mov	sp, r7
 8002e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2e:	4770      	bx	lr

08002e30 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002e38:	bf00      	nop
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr

08002e44 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b083      	sub	sp, #12
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002e4c:	bf00      	nop
 8002e4e:	370c      	adds	r7, #12
 8002e50:	46bd      	mov	sp, r7
 8002e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e56:	4770      	bx	lr

08002e58 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b085      	sub	sp, #20
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e62:	2300      	movs	r3, #0
 8002e64:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d101      	bne.n	8002e74 <HAL_ADC_ConfigChannel+0x1c>
 8002e70:	2302      	movs	r3, #2
 8002e72:	e105      	b.n	8003080 <HAL_ADC_ConfigChannel+0x228>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b09      	cmp	r3, #9
 8002e82:	d925      	bls.n	8002ed0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68d9      	ldr	r1, [r3, #12]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	b29b      	uxth	r3, r3
 8002e90:	461a      	mov	r2, r3
 8002e92:	4613      	mov	r3, r2
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4413      	add	r3, r2
 8002e98:	3b1e      	subs	r3, #30
 8002e9a:	2207      	movs	r2, #7
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	43da      	mvns	r2, r3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	400a      	ands	r2, r1
 8002ea8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	68d9      	ldr	r1, [r3, #12]
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	4618      	mov	r0, r3
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	005b      	lsls	r3, r3, #1
 8002ec0:	4403      	add	r3, r0
 8002ec2:	3b1e      	subs	r3, #30
 8002ec4:	409a      	lsls	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	60da      	str	r2, [r3, #12]
 8002ece:	e022      	b.n	8002f16 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6919      	ldr	r1, [r3, #16]
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	461a      	mov	r2, r3
 8002ede:	4613      	mov	r3, r2
 8002ee0:	005b      	lsls	r3, r3, #1
 8002ee2:	4413      	add	r3, r2
 8002ee4:	2207      	movs	r2, #7
 8002ee6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eea:	43da      	mvns	r2, r3
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	400a      	ands	r2, r1
 8002ef2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6919      	ldr	r1, [r3, #16]
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	b29b      	uxth	r3, r3
 8002f04:	4618      	mov	r0, r3
 8002f06:	4603      	mov	r3, r0
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	4403      	add	r3, r0
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	430a      	orrs	r2, r1
 8002f14:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b06      	cmp	r3, #6
 8002f1c:	d824      	bhi.n	8002f68 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3b05      	subs	r3, #5
 8002f30:	221f      	movs	r2, #31
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43da      	mvns	r2, r3
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	400a      	ands	r2, r1
 8002f3e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685a      	ldr	r2, [r3, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	4413      	add	r3, r2
 8002f58:	3b05      	subs	r3, #5
 8002f5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	430a      	orrs	r2, r1
 8002f64:	635a      	str	r2, [r3, #52]	; 0x34
 8002f66:	e04c      	b.n	8003002 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b0c      	cmp	r3, #12
 8002f6e:	d824      	bhi.n	8002fba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	685a      	ldr	r2, [r3, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	4413      	add	r3, r2
 8002f80:	3b23      	subs	r3, #35	; 0x23
 8002f82:	221f      	movs	r2, #31
 8002f84:	fa02 f303 	lsl.w	r3, r2, r3
 8002f88:	43da      	mvns	r2, r3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	400a      	ands	r2, r1
 8002f90:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	009b      	lsls	r3, r3, #2
 8002fa8:	4413      	add	r3, r2
 8002faa:	3b23      	subs	r3, #35	; 0x23
 8002fac:	fa00 f203 	lsl.w	r2, r0, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
 8002fb8:	e023      	b.n	8003002 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	685a      	ldr	r2, [r3, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	009b      	lsls	r3, r3, #2
 8002fc8:	4413      	add	r3, r2
 8002fca:	3b41      	subs	r3, #65	; 0x41
 8002fcc:	221f      	movs	r2, #31
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	43da      	mvns	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	400a      	ands	r2, r1
 8002fda:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	b29b      	uxth	r3, r3
 8002fe8:	4618      	mov	r0, r3
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3b41      	subs	r3, #65	; 0x41
 8002ff6:	fa00 f203 	lsl.w	r2, r0, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003002:	4b22      	ldr	r3, [pc, #136]	; (800308c <HAL_ADC_ConfigChannel+0x234>)
 8003004:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a21      	ldr	r2, [pc, #132]	; (8003090 <HAL_ADC_ConfigChannel+0x238>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d109      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x1cc>
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	2b12      	cmp	r3, #18
 8003016:	d105      	bne.n	8003024 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a19      	ldr	r2, [pc, #100]	; (8003090 <HAL_ADC_ConfigChannel+0x238>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d123      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x21e>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2b10      	cmp	r3, #16
 8003034:	d003      	beq.n	800303e <HAL_ADC_ConfigChannel+0x1e6>
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	2b11      	cmp	r3, #17
 800303c:	d11b      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	2b10      	cmp	r3, #16
 8003050:	d111      	bne.n	8003076 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003052:	4b10      	ldr	r3, [pc, #64]	; (8003094 <HAL_ADC_ConfigChannel+0x23c>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	4a10      	ldr	r2, [pc, #64]	; (8003098 <HAL_ADC_ConfigChannel+0x240>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	0c9a      	lsrs	r2, r3, #18
 800305e:	4613      	mov	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	4413      	add	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003068:	e002      	b.n	8003070 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	3b01      	subs	r3, #1
 800306e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d1f9      	bne.n	800306a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800307e:	2300      	movs	r3, #0
}
 8003080:	4618      	mov	r0, r3
 8003082:	3714      	adds	r7, #20
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	40012300 	.word	0x40012300
 8003090:	40012000 	.word	0x40012000
 8003094:	20000000 	.word	0x20000000
 8003098:	431bde83 	.word	0x431bde83

0800309c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030a4:	4b79      	ldr	r3, [pc, #484]	; (800328c <ADC_Init+0x1f0>)
 80030a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	685a      	ldr	r2, [r3, #4]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	431a      	orrs	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	685a      	ldr	r2, [r3, #4]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	6859      	ldr	r1, [r3, #4]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	691b      	ldr	r3, [r3, #16]
 80030dc:	021a      	lsls	r2, r3, #8
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	430a      	orrs	r2, r1
 80030e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	685a      	ldr	r2, [r3, #4]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80030f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6859      	ldr	r1, [r3, #4]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	689a      	ldr	r2, [r3, #8]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	430a      	orrs	r2, r1
 8003106:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	689a      	ldr	r2, [r3, #8]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003116:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6899      	ldr	r1, [r3, #8]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	68da      	ldr	r2, [r3, #12]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	430a      	orrs	r2, r1
 8003128:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312e:	4a58      	ldr	r2, [pc, #352]	; (8003290 <ADC_Init+0x1f4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d022      	beq.n	800317a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	689a      	ldr	r2, [r3, #8]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003142:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6899      	ldr	r1, [r3, #8]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003164:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	6899      	ldr	r1, [r3, #8]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	609a      	str	r2, [r3, #8]
 8003178:	e00f      	b.n	800319a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	689a      	ldr	r2, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003188:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	689a      	ldr	r2, [r3, #8]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003198:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689a      	ldr	r2, [r3, #8]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 0202 	bic.w	r2, r2, #2
 80031a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	6899      	ldr	r1, [r3, #8]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	7e1b      	ldrb	r3, [r3, #24]
 80031b4:	005a      	lsls	r2, r3, #1
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	430a      	orrs	r2, r1
 80031bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d01b      	beq.n	8003200 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685a      	ldr	r2, [r3, #4]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80031e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	6859      	ldr	r1, [r3, #4]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	3b01      	subs	r3, #1
 80031f4:	035a      	lsls	r2, r3, #13
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	605a      	str	r2, [r3, #4]
 80031fe:	e007      	b.n	8003210 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800320e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800321e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	69db      	ldr	r3, [r3, #28]
 800322a:	3b01      	subs	r3, #1
 800322c:	051a      	lsls	r2, r3, #20
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689a      	ldr	r2, [r3, #8]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003244:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6899      	ldr	r1, [r3, #8]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003252:	025a      	lsls	r2, r3, #9
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	430a      	orrs	r2, r1
 800325a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	689a      	ldr	r2, [r3, #8]
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800326a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6899      	ldr	r1, [r3, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	029a      	lsls	r2, r3, #10
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	609a      	str	r2, [r3, #8]
}
 8003280:	bf00      	nop
 8003282:	3714      	adds	r7, #20
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr
 800328c:	40012300 	.word	0x40012300
 8003290:	0f000001 	.word	0x0f000001

08003294 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b084      	sub	sp, #16
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d13c      	bne.n	8003328 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d12b      	bne.n	8003320 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d127      	bne.n	8003320 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d006      	beq.n	80032ec <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d119      	bne.n	8003320 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	685a      	ldr	r2, [r3, #4]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0220 	bic.w	r2, r2, #32
 80032fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003300:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800330c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003310:	2b00      	cmp	r3, #0
 8003312:	d105      	bne.n	8003320 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003318:	f043 0201 	orr.w	r2, r3, #1
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003320:	68f8      	ldr	r0, [r7, #12]
 8003322:	f7ff fd71 	bl	8002e08 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003326:	e00e      	b.n	8003346 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b00      	cmp	r3, #0
 8003332:	d003      	beq.n	800333c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003334:	68f8      	ldr	r0, [r7, #12]
 8003336:	f7ff fd85 	bl	8002e44 <HAL_ADC_ErrorCallback>
}
 800333a:	e004      	b.n	8003346 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	4798      	blx	r3
}
 8003346:	bf00      	nop
 8003348:	3710      	adds	r7, #16
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800335a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f7ff fd5d 	bl	8002e1c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003362:	bf00      	nop
 8003364:	3710      	adds	r7, #16
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b084      	sub	sp, #16
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003376:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	2240      	movs	r2, #64	; 0x40
 800337c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	f043 0204 	orr.w	r2, r3, #4
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800338a:	68f8      	ldr	r0, [r7, #12]
 800338c:	f7ff fd5a 	bl	8002e44 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003390:	bf00      	nop
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}

08003398 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003398:	b480      	push	{r7}
 800339a:	b083      	sub	sp, #12
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80033a0:	bf00      	nop
 80033a2:	370c      	adds	r7, #12
 80033a4:	46bd      	mov	sp, r7
 80033a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033aa:	4770      	bx	lr

080033ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b085      	sub	sp, #20
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f003 0307 	and.w	r3, r3, #7
 80033ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033bc:	4b0c      	ldr	r3, [pc, #48]	; (80033f0 <__NVIC_SetPriorityGrouping+0x44>)
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033c2:	68ba      	ldr	r2, [r7, #8]
 80033c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033c8:	4013      	ands	r3, r2
 80033ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033de:	4a04      	ldr	r2, [pc, #16]	; (80033f0 <__NVIC_SetPriorityGrouping+0x44>)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	60d3      	str	r3, [r2, #12]
}
 80033e4:	bf00      	nop
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	e000ed00 	.word	0xe000ed00

080033f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033f8:	4b04      	ldr	r3, [pc, #16]	; (800340c <__NVIC_GetPriorityGrouping+0x18>)
 80033fa:	68db      	ldr	r3, [r3, #12]
 80033fc:	0a1b      	lsrs	r3, r3, #8
 80033fe:	f003 0307 	and.w	r3, r3, #7
}
 8003402:	4618      	mov	r0, r3
 8003404:	46bd      	mov	sp, r7
 8003406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340a:	4770      	bx	lr
 800340c:	e000ed00 	.word	0xe000ed00

08003410 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003410:	b480      	push	{r7}
 8003412:	b083      	sub	sp, #12
 8003414:	af00      	add	r7, sp, #0
 8003416:	4603      	mov	r3, r0
 8003418:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800341a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341e:	2b00      	cmp	r3, #0
 8003420:	db0b      	blt.n	800343a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003422:	79fb      	ldrb	r3, [r7, #7]
 8003424:	f003 021f 	and.w	r2, r3, #31
 8003428:	4907      	ldr	r1, [pc, #28]	; (8003448 <__NVIC_EnableIRQ+0x38>)
 800342a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800342e:	095b      	lsrs	r3, r3, #5
 8003430:	2001      	movs	r0, #1
 8003432:	fa00 f202 	lsl.w	r2, r0, r2
 8003436:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800343a:	bf00      	nop
 800343c:	370c      	adds	r7, #12
 800343e:	46bd      	mov	sp, r7
 8003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	e000e100 	.word	0xe000e100

0800344c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800344c:	b480      	push	{r7}
 800344e:	b083      	sub	sp, #12
 8003450:	af00      	add	r7, sp, #0
 8003452:	4603      	mov	r3, r0
 8003454:	6039      	str	r1, [r7, #0]
 8003456:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003458:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345c:	2b00      	cmp	r3, #0
 800345e:	db0a      	blt.n	8003476 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	b2da      	uxtb	r2, r3
 8003464:	490c      	ldr	r1, [pc, #48]	; (8003498 <__NVIC_SetPriority+0x4c>)
 8003466:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800346a:	0112      	lsls	r2, r2, #4
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	440b      	add	r3, r1
 8003470:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003474:	e00a      	b.n	800348c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	b2da      	uxtb	r2, r3
 800347a:	4908      	ldr	r1, [pc, #32]	; (800349c <__NVIC_SetPriority+0x50>)
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	f003 030f 	and.w	r3, r3, #15
 8003482:	3b04      	subs	r3, #4
 8003484:	0112      	lsls	r2, r2, #4
 8003486:	b2d2      	uxtb	r2, r2
 8003488:	440b      	add	r3, r1
 800348a:	761a      	strb	r2, [r3, #24]
}
 800348c:	bf00      	nop
 800348e:	370c      	adds	r7, #12
 8003490:	46bd      	mov	sp, r7
 8003492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003496:	4770      	bx	lr
 8003498:	e000e100 	.word	0xe000e100
 800349c:	e000ed00 	.word	0xe000ed00

080034a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034a0:	b480      	push	{r7}
 80034a2:	b089      	sub	sp, #36	; 0x24
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	60f8      	str	r0, [r7, #12]
 80034a8:	60b9      	str	r1, [r7, #8]
 80034aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	f003 0307 	and.w	r3, r3, #7
 80034b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f1c3 0307 	rsb	r3, r3, #7
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	bf28      	it	cs
 80034be:	2304      	movcs	r3, #4
 80034c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034c2:	69fb      	ldr	r3, [r7, #28]
 80034c4:	3304      	adds	r3, #4
 80034c6:	2b06      	cmp	r3, #6
 80034c8:	d902      	bls.n	80034d0 <NVIC_EncodePriority+0x30>
 80034ca:	69fb      	ldr	r3, [r7, #28]
 80034cc:	3b03      	subs	r3, #3
 80034ce:	e000      	b.n	80034d2 <NVIC_EncodePriority+0x32>
 80034d0:	2300      	movs	r3, #0
 80034d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034d4:	f04f 32ff 	mov.w	r2, #4294967295
 80034d8:	69bb      	ldr	r3, [r7, #24]
 80034da:	fa02 f303 	lsl.w	r3, r2, r3
 80034de:	43da      	mvns	r2, r3
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	401a      	ands	r2, r3
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034e8:	f04f 31ff 	mov.w	r1, #4294967295
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	fa01 f303 	lsl.w	r3, r1, r3
 80034f2:	43d9      	mvns	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034f8:	4313      	orrs	r3, r2
         );
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3724      	adds	r7, #36	; 0x24
 80034fe:	46bd      	mov	sp, r7
 8003500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003504:	4770      	bx	lr
	...

08003508 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3b01      	subs	r3, #1
 8003514:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003518:	d301      	bcc.n	800351e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800351a:	2301      	movs	r3, #1
 800351c:	e00f      	b.n	800353e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800351e:	4a0a      	ldr	r2, [pc, #40]	; (8003548 <SysTick_Config+0x40>)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	3b01      	subs	r3, #1
 8003524:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003526:	210f      	movs	r1, #15
 8003528:	f04f 30ff 	mov.w	r0, #4294967295
 800352c:	f7ff ff8e 	bl	800344c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003530:	4b05      	ldr	r3, [pc, #20]	; (8003548 <SysTick_Config+0x40>)
 8003532:	2200      	movs	r2, #0
 8003534:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003536:	4b04      	ldr	r3, [pc, #16]	; (8003548 <SysTick_Config+0x40>)
 8003538:	2207      	movs	r2, #7
 800353a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	e000e010 	.word	0xe000e010

0800354c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f7ff ff29 	bl	80033ac <__NVIC_SetPriorityGrouping>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}

08003562 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003562:	b580      	push	{r7, lr}
 8003564:	b086      	sub	sp, #24
 8003566:	af00      	add	r7, sp, #0
 8003568:	4603      	mov	r3, r0
 800356a:	60b9      	str	r1, [r7, #8]
 800356c:	607a      	str	r2, [r7, #4]
 800356e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003574:	f7ff ff3e 	bl	80033f4 <__NVIC_GetPriorityGrouping>
 8003578:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800357a:	687a      	ldr	r2, [r7, #4]
 800357c:	68b9      	ldr	r1, [r7, #8]
 800357e:	6978      	ldr	r0, [r7, #20]
 8003580:	f7ff ff8e 	bl	80034a0 <NVIC_EncodePriority>
 8003584:	4602      	mov	r2, r0
 8003586:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800358a:	4611      	mov	r1, r2
 800358c:	4618      	mov	r0, r3
 800358e:	f7ff ff5d 	bl	800344c <__NVIC_SetPriority>
}
 8003592:	bf00      	nop
 8003594:	3718      	adds	r7, #24
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}

0800359a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800359a:	b580      	push	{r7, lr}
 800359c:	b082      	sub	sp, #8
 800359e:	af00      	add	r7, sp, #0
 80035a0:	4603      	mov	r3, r0
 80035a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f7ff ff31 	bl	8003410 <__NVIC_EnableIRQ>
}
 80035ae:	bf00      	nop
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}

080035b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035b6:	b580      	push	{r7, lr}
 80035b8:	b082      	sub	sp, #8
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff ffa2 	bl	8003508 <SysTick_Config>
 80035c4:	4603      	mov	r3, r0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3708      	adds	r7, #8
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
	...

080035d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80035d8:	2300      	movs	r3, #0
 80035da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80035dc:	f7ff f980 	bl	80028e0 <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d101      	bne.n	80035ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e099      	b.n	8003720 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2202      	movs	r2, #2
 80035f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0201 	bic.w	r2, r2, #1
 800360a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800360c:	e00f      	b.n	800362e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800360e:	f7ff f967 	bl	80028e0 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b05      	cmp	r3, #5
 800361a:	d908      	bls.n	800362e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2220      	movs	r2, #32
 8003620:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2203      	movs	r2, #3
 8003626:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800362a:	2303      	movs	r3, #3
 800362c:	e078      	b.n	8003720 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0301 	and.w	r3, r3, #1
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1e8      	bne.n	800360e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	4b38      	ldr	r3, [pc, #224]	; (8003728 <HAL_DMA_Init+0x158>)
 8003648:	4013      	ands	r3, r2
 800364a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685a      	ldr	r2, [r3, #4]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800365a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	691b      	ldr	r3, [r3, #16]
 8003660:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003666:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	699b      	ldr	r3, [r3, #24]
 800366c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003672:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	4313      	orrs	r3, r2
 800367e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003684:	2b04      	cmp	r3, #4
 8003686:	d107      	bne.n	8003698 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003690:	4313      	orrs	r3, r2
 8003692:	697a      	ldr	r2, [r7, #20]
 8003694:	4313      	orrs	r3, r2
 8003696:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	697a      	ldr	r2, [r7, #20]
 800369e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0307 	bic.w	r3, r3, #7
 80036ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036b4:	697a      	ldr	r2, [r7, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036be:	2b04      	cmp	r3, #4
 80036c0:	d117      	bne.n	80036f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d00e      	beq.n	80036f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 fa6f 	bl	8003bb8 <DMA_CheckFifoParam>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2240      	movs	r2, #64	; 0x40
 80036e4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80036ee:	2301      	movs	r3, #1
 80036f0:	e016      	b.n	8003720 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f000 fa26 	bl	8003b4c <DMA_CalcBaseAndBitshift>
 8003700:	4603      	mov	r3, r0
 8003702:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003708:	223f      	movs	r2, #63	; 0x3f
 800370a:	409a      	lsls	r2, r3
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3718      	adds	r7, #24
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}
 8003728:	f010803f 	.word	0xf010803f

0800372c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	60f8      	str	r0, [r7, #12]
 8003734:	60b9      	str	r1, [r7, #8]
 8003736:	607a      	str	r2, [r7, #4]
 8003738:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800373a:	2300      	movs	r3, #0
 800373c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003742:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <HAL_DMA_Start_IT+0x26>
 800374e:	2302      	movs	r3, #2
 8003750:	e040      	b.n	80037d4 <HAL_DMA_Start_IT+0xa8>
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2201      	movs	r2, #1
 8003756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003760:	b2db      	uxtb	r3, r3
 8003762:	2b01      	cmp	r3, #1
 8003764:	d12f      	bne.n	80037c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	2202      	movs	r2, #2
 800376a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f9b8 	bl	8003af0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003784:	223f      	movs	r2, #63	; 0x3f
 8003786:	409a      	lsls	r2, r3
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0216 	orr.w	r2, r2, #22
 800379a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d007      	beq.n	80037b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0208 	orr.w	r2, r2, #8
 80037b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0201 	orr.w	r2, r2, #1
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	e005      	b.n	80037d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2200      	movs	r2, #0
 80037ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037ce:	2302      	movs	r3, #2
 80037d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80037d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3718      	adds	r7, #24
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}

080037dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b086      	sub	sp, #24
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037e4:	2300      	movs	r3, #0
 80037e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037e8:	4b8e      	ldr	r3, [pc, #568]	; (8003a24 <HAL_DMA_IRQHandler+0x248>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a8e      	ldr	r2, [pc, #568]	; (8003a28 <HAL_DMA_IRQHandler+0x24c>)
 80037ee:	fba2 2303 	umull	r2, r3, r2, r3
 80037f2:	0a9b      	lsrs	r3, r3, #10
 80037f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003806:	2208      	movs	r2, #8
 8003808:	409a      	lsls	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	4013      	ands	r3, r2
 800380e:	2b00      	cmp	r3, #0
 8003810:	d01a      	beq.n	8003848 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f003 0304 	and.w	r3, r3, #4
 800381c:	2b00      	cmp	r3, #0
 800381e:	d013      	beq.n	8003848 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 0204 	bic.w	r2, r2, #4
 800382e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003834:	2208      	movs	r2, #8
 8003836:	409a      	lsls	r2, r3
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003840:	f043 0201 	orr.w	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800384c:	2201      	movs	r2, #1
 800384e:	409a      	lsls	r2, r3
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	4013      	ands	r3, r2
 8003854:	2b00      	cmp	r3, #0
 8003856:	d012      	beq.n	800387e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00b      	beq.n	800387e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386a:	2201      	movs	r2, #1
 800386c:	409a      	lsls	r2, r3
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003876:	f043 0202 	orr.w	r2, r3, #2
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003882:	2204      	movs	r2, #4
 8003884:	409a      	lsls	r2, r3
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	4013      	ands	r3, r2
 800388a:	2b00      	cmp	r3, #0
 800388c:	d012      	beq.n	80038b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0302 	and.w	r3, r3, #2
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00b      	beq.n	80038b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a0:	2204      	movs	r2, #4
 80038a2:	409a      	lsls	r2, r3
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ac:	f043 0204 	orr.w	r2, r3, #4
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038b8:	2210      	movs	r2, #16
 80038ba:	409a      	lsls	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4013      	ands	r3, r2
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d043      	beq.n	800394c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0308 	and.w	r3, r3, #8
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d03c      	beq.n	800394c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038d6:	2210      	movs	r2, #16
 80038d8:	409a      	lsls	r2, r3
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d018      	beq.n	800391e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d108      	bne.n	800390c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d024      	beq.n	800394c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	4798      	blx	r3
 800390a:	e01f      	b.n	800394c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01b      	beq.n	800394c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	4798      	blx	r3
 800391c:	e016      	b.n	800394c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003928:	2b00      	cmp	r3, #0
 800392a:	d107      	bne.n	800393c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0208 	bic.w	r2, r2, #8
 800393a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003940:	2b00      	cmp	r3, #0
 8003942:	d003      	beq.n	800394c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003948:	6878      	ldr	r0, [r7, #4]
 800394a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003950:	2220      	movs	r2, #32
 8003952:	409a      	lsls	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	4013      	ands	r3, r2
 8003958:	2b00      	cmp	r3, #0
 800395a:	f000 808f 	beq.w	8003a7c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f003 0310 	and.w	r3, r3, #16
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 8087 	beq.w	8003a7c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003972:	2220      	movs	r2, #32
 8003974:	409a      	lsls	r2, r3
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003980:	b2db      	uxtb	r3, r3
 8003982:	2b05      	cmp	r3, #5
 8003984:	d136      	bne.n	80039f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681a      	ldr	r2, [r3, #0]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f022 0216 	bic.w	r2, r2, #22
 8003994:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	695a      	ldr	r2, [r3, #20]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80039a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d103      	bne.n	80039b6 <HAL_DMA_IRQHandler+0x1da>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d007      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	681a      	ldr	r2, [r3, #0]
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f022 0208 	bic.w	r2, r2, #8
 80039c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ca:	223f      	movs	r2, #63	; 0x3f
 80039cc:	409a      	lsls	r2, r3
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d07e      	beq.n	8003ae8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039ee:	6878      	ldr	r0, [r7, #4]
 80039f0:	4798      	blx	r3
        }
        return;
 80039f2:	e079      	b.n	8003ae8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d01d      	beq.n	8003a3e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d10d      	bne.n	8003a2c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d031      	beq.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	4798      	blx	r3
 8003a20:	e02c      	b.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
 8003a22:	bf00      	nop
 8003a24:	20000000 	.word	0x20000000
 8003a28:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d023      	beq.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	4798      	blx	r3
 8003a3c:	e01e      	b.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d10f      	bne.n	8003a6c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f022 0210 	bic.w	r2, r2, #16
 8003a5a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d003      	beq.n	8003a7c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a78:	6878      	ldr	r0, [r7, #4]
 8003a7a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d032      	beq.n	8003aea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a88:	f003 0301 	and.w	r3, r3, #1
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d022      	beq.n	8003ad6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2205      	movs	r2, #5
 8003a94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f022 0201 	bic.w	r2, r2, #1
 8003aa6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003aa8:	68bb      	ldr	r3, [r7, #8]
 8003aaa:	3301      	adds	r3, #1
 8003aac:	60bb      	str	r3, [r7, #8]
 8003aae:	697a      	ldr	r2, [r7, #20]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d307      	bcc.n	8003ac4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d1f2      	bne.n	8003aa8 <HAL_DMA_IRQHandler+0x2cc>
 8003ac2:	e000      	b.n	8003ac6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003ac4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d005      	beq.n	8003aea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	4798      	blx	r3
 8003ae6:	e000      	b.n	8003aea <HAL_DMA_IRQHandler+0x30e>
        return;
 8003ae8:	bf00      	nop
    }
  }
}
 8003aea:	3718      	adds	r7, #24
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003af0:	b480      	push	{r7}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	607a      	str	r2, [r7, #4]
 8003afc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	681a      	ldr	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b0c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	683a      	ldr	r2, [r7, #0]
 8003b14:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	2b40      	cmp	r3, #64	; 0x40
 8003b1c:	d108      	bne.n	8003b30 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b2e:	e007      	b.n	8003b40 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68ba      	ldr	r2, [r7, #8]
 8003b36:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	687a      	ldr	r2, [r7, #4]
 8003b3e:	60da      	str	r2, [r3, #12]
}
 8003b40:	bf00      	nop
 8003b42:	3714      	adds	r7, #20
 8003b44:	46bd      	mov	sp, r7
 8003b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4a:	4770      	bx	lr

08003b4c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	3b10      	subs	r3, #16
 8003b5c:	4a14      	ldr	r2, [pc, #80]	; (8003bb0 <DMA_CalcBaseAndBitshift+0x64>)
 8003b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b62:	091b      	lsrs	r3, r3, #4
 8003b64:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b66:	4a13      	ldr	r2, [pc, #76]	; (8003bb4 <DMA_CalcBaseAndBitshift+0x68>)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	461a      	mov	r2, r3
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b03      	cmp	r3, #3
 8003b78:	d909      	bls.n	8003b8e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b82:	f023 0303 	bic.w	r3, r3, #3
 8003b86:	1d1a      	adds	r2, r3, #4
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	659a      	str	r2, [r3, #88]	; 0x58
 8003b8c:	e007      	b.n	8003b9e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b96:	f023 0303 	bic.w	r3, r3, #3
 8003b9a:	687a      	ldr	r2, [r7, #4]
 8003b9c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	3714      	adds	r7, #20
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bac:	4770      	bx	lr
 8003bae:	bf00      	nop
 8003bb0:	aaaaaaab 	.word	0xaaaaaaab
 8003bb4:	0800b6e8 	.word	0x0800b6e8

08003bb8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b085      	sub	sp, #20
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bc8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	699b      	ldr	r3, [r3, #24]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d11f      	bne.n	8003c12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	2b03      	cmp	r3, #3
 8003bd6:	d856      	bhi.n	8003c86 <DMA_CheckFifoParam+0xce>
 8003bd8:	a201      	add	r2, pc, #4	; (adr r2, 8003be0 <DMA_CheckFifoParam+0x28>)
 8003bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bde:	bf00      	nop
 8003be0:	08003bf1 	.word	0x08003bf1
 8003be4:	08003c03 	.word	0x08003c03
 8003be8:	08003bf1 	.word	0x08003bf1
 8003bec:	08003c87 	.word	0x08003c87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d046      	beq.n	8003c8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c00:	e043      	b.n	8003c8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c06:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c0a:	d140      	bne.n	8003c8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c10:	e03d      	b.n	8003c8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	699b      	ldr	r3, [r3, #24]
 8003c16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c1a:	d121      	bne.n	8003c60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b03      	cmp	r3, #3
 8003c20:	d837      	bhi.n	8003c92 <DMA_CheckFifoParam+0xda>
 8003c22:	a201      	add	r2, pc, #4	; (adr r2, 8003c28 <DMA_CheckFifoParam+0x70>)
 8003c24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c28:	08003c39 	.word	0x08003c39
 8003c2c:	08003c3f 	.word	0x08003c3f
 8003c30:	08003c39 	.word	0x08003c39
 8003c34:	08003c51 	.word	0x08003c51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	73fb      	strb	r3, [r7, #15]
      break;
 8003c3c:	e030      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d025      	beq.n	8003c96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c4a:	2301      	movs	r3, #1
 8003c4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c4e:	e022      	b.n	8003c96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c54:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c58:	d11f      	bne.n	8003c9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c5e:	e01c      	b.n	8003c9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d903      	bls.n	8003c6e <DMA_CheckFifoParam+0xb6>
 8003c66:	68bb      	ldr	r3, [r7, #8]
 8003c68:	2b03      	cmp	r3, #3
 8003c6a:	d003      	beq.n	8003c74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c6c:	e018      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	73fb      	strb	r3, [r7, #15]
      break;
 8003c72:	e015      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c78:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00e      	beq.n	8003c9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
      break;
 8003c84:	e00b      	b.n	8003c9e <DMA_CheckFifoParam+0xe6>
      break;
 8003c86:	bf00      	nop
 8003c88:	e00a      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      break;
 8003c8a:	bf00      	nop
 8003c8c:	e008      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      break;
 8003c8e:	bf00      	nop
 8003c90:	e006      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      break;
 8003c92:	bf00      	nop
 8003c94:	e004      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      break;
 8003c96:	bf00      	nop
 8003c98:	e002      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c9a:	bf00      	nop
 8003c9c:	e000      	b.n	8003ca0 <DMA_CheckFifoParam+0xe8>
      break;
 8003c9e:	bf00      	nop
    }
  } 
  
  return status; 
 8003ca0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
 8003cae:	bf00      	nop

08003cb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b089      	sub	sp, #36	; 0x24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
 8003cca:	e16b      	b.n	8003fa4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003ccc:	2201      	movs	r2, #1
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ce0:	693a      	ldr	r2, [r7, #16]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	f040 815a 	bne.w	8003f9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 0303 	and.w	r3, r3, #3
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d005      	beq.n	8003d02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cfe:	2b02      	cmp	r3, #2
 8003d00:	d130      	bne.n	8003d64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d08:	69fb      	ldr	r3, [r7, #28]
 8003d0a:	005b      	lsls	r3, r3, #1
 8003d0c:	2203      	movs	r2, #3
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43db      	mvns	r3, r3
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4013      	ands	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	68da      	ldr	r2, [r3, #12]
 8003d1e:	69fb      	ldr	r3, [r7, #28]
 8003d20:	005b      	lsls	r3, r3, #1
 8003d22:	fa02 f303 	lsl.w	r3, r2, r3
 8003d26:	69ba      	ldr	r2, [r7, #24]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	69ba      	ldr	r2, [r7, #24]
 8003d30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	685b      	ldr	r3, [r3, #4]
 8003d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d38:	2201      	movs	r2, #1
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d40:	43db      	mvns	r3, r3
 8003d42:	69ba      	ldr	r2, [r7, #24]
 8003d44:	4013      	ands	r3, r2
 8003d46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	091b      	lsrs	r3, r3, #4
 8003d4e:	f003 0201 	and.w	r2, r3, #1
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	69ba      	ldr	r2, [r7, #24]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	69ba      	ldr	r2, [r7, #24]
 8003d62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	2b03      	cmp	r3, #3
 8003d6e:	d017      	beq.n	8003da0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	2203      	movs	r2, #3
 8003d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d80:	43db      	mvns	r3, r3
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4013      	ands	r3, r2
 8003d86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	005b      	lsls	r3, r3, #1
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	69ba      	ldr	r2, [r7, #24]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	685b      	ldr	r3, [r3, #4]
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	2b02      	cmp	r3, #2
 8003daa:	d123      	bne.n	8003df4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	08da      	lsrs	r2, r3, #3
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	3208      	adds	r2, #8
 8003db4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003db8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dba:	69fb      	ldr	r3, [r7, #28]
 8003dbc:	f003 0307 	and.w	r3, r3, #7
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	220f      	movs	r2, #15
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4013      	ands	r3, r2
 8003dce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	691a      	ldr	r2, [r3, #16]
 8003dd4:	69fb      	ldr	r3, [r7, #28]
 8003dd6:	f003 0307 	and.w	r3, r3, #7
 8003dda:	009b      	lsls	r3, r3, #2
 8003ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8003de0:	69ba      	ldr	r2, [r7, #24]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	08da      	lsrs	r2, r3, #3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3208      	adds	r2, #8
 8003dee:	69b9      	ldr	r1, [r7, #24]
 8003df0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	005b      	lsls	r3, r3, #1
 8003dfe:	2203      	movs	r2, #3
 8003e00:	fa02 f303 	lsl.w	r3, r2, r3
 8003e04:	43db      	mvns	r3, r3
 8003e06:	69ba      	ldr	r2, [r7, #24]
 8003e08:	4013      	ands	r3, r2
 8003e0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	f003 0203 	and.w	r2, r3, #3
 8003e14:	69fb      	ldr	r3, [r7, #28]
 8003e16:	005b      	lsls	r3, r3, #1
 8003e18:	fa02 f303 	lsl.w	r3, r2, r3
 8003e1c:	69ba      	ldr	r2, [r7, #24]
 8003e1e:	4313      	orrs	r3, r2
 8003e20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80b4 	beq.w	8003f9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e36:	2300      	movs	r3, #0
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	4b60      	ldr	r3, [pc, #384]	; (8003fbc <HAL_GPIO_Init+0x30c>)
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3e:	4a5f      	ldr	r2, [pc, #380]	; (8003fbc <HAL_GPIO_Init+0x30c>)
 8003e40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e44:	6453      	str	r3, [r2, #68]	; 0x44
 8003e46:	4b5d      	ldr	r3, [pc, #372]	; (8003fbc <HAL_GPIO_Init+0x30c>)
 8003e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e4e:	60fb      	str	r3, [r7, #12]
 8003e50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e52:	4a5b      	ldr	r2, [pc, #364]	; (8003fc0 <HAL_GPIO_Init+0x310>)
 8003e54:	69fb      	ldr	r3, [r7, #28]
 8003e56:	089b      	lsrs	r3, r3, #2
 8003e58:	3302      	adds	r3, #2
 8003e5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	f003 0303 	and.w	r3, r3, #3
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	220f      	movs	r2, #15
 8003e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e6e:	43db      	mvns	r3, r3
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	4013      	ands	r3, r2
 8003e74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a52      	ldr	r2, [pc, #328]	; (8003fc4 <HAL_GPIO_Init+0x314>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d02b      	beq.n	8003ed6 <HAL_GPIO_Init+0x226>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	4a51      	ldr	r2, [pc, #324]	; (8003fc8 <HAL_GPIO_Init+0x318>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d025      	beq.n	8003ed2 <HAL_GPIO_Init+0x222>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4a50      	ldr	r2, [pc, #320]	; (8003fcc <HAL_GPIO_Init+0x31c>)
 8003e8a:	4293      	cmp	r3, r2
 8003e8c:	d01f      	beq.n	8003ece <HAL_GPIO_Init+0x21e>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a4f      	ldr	r2, [pc, #316]	; (8003fd0 <HAL_GPIO_Init+0x320>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d019      	beq.n	8003eca <HAL_GPIO_Init+0x21a>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a4e      	ldr	r2, [pc, #312]	; (8003fd4 <HAL_GPIO_Init+0x324>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d013      	beq.n	8003ec6 <HAL_GPIO_Init+0x216>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a4d      	ldr	r2, [pc, #308]	; (8003fd8 <HAL_GPIO_Init+0x328>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d00d      	beq.n	8003ec2 <HAL_GPIO_Init+0x212>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a4c      	ldr	r2, [pc, #304]	; (8003fdc <HAL_GPIO_Init+0x32c>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d007      	beq.n	8003ebe <HAL_GPIO_Init+0x20e>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a4b      	ldr	r2, [pc, #300]	; (8003fe0 <HAL_GPIO_Init+0x330>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d101      	bne.n	8003eba <HAL_GPIO_Init+0x20a>
 8003eb6:	2307      	movs	r3, #7
 8003eb8:	e00e      	b.n	8003ed8 <HAL_GPIO_Init+0x228>
 8003eba:	2308      	movs	r3, #8
 8003ebc:	e00c      	b.n	8003ed8 <HAL_GPIO_Init+0x228>
 8003ebe:	2306      	movs	r3, #6
 8003ec0:	e00a      	b.n	8003ed8 <HAL_GPIO_Init+0x228>
 8003ec2:	2305      	movs	r3, #5
 8003ec4:	e008      	b.n	8003ed8 <HAL_GPIO_Init+0x228>
 8003ec6:	2304      	movs	r3, #4
 8003ec8:	e006      	b.n	8003ed8 <HAL_GPIO_Init+0x228>
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e004      	b.n	8003ed8 <HAL_GPIO_Init+0x228>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e002      	b.n	8003ed8 <HAL_GPIO_Init+0x228>
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e000      	b.n	8003ed8 <HAL_GPIO_Init+0x228>
 8003ed6:	2300      	movs	r3, #0
 8003ed8:	69fa      	ldr	r2, [r7, #28]
 8003eda:	f002 0203 	and.w	r2, r2, #3
 8003ede:	0092      	lsls	r2, r2, #2
 8003ee0:	4093      	lsls	r3, r2
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003ee8:	4935      	ldr	r1, [pc, #212]	; (8003fc0 <HAL_GPIO_Init+0x310>)
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	089b      	lsrs	r3, r3, #2
 8003eee:	3302      	adds	r3, #2
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ef6:	4b3b      	ldr	r3, [pc, #236]	; (8003fe4 <HAL_GPIO_Init+0x334>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	43db      	mvns	r3, r3
 8003f00:	69ba      	ldr	r2, [r7, #24]
 8003f02:	4013      	ands	r3, r2
 8003f04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f12:	69ba      	ldr	r2, [r7, #24]
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f1a:	4a32      	ldr	r2, [pc, #200]	; (8003fe4 <HAL_GPIO_Init+0x334>)
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f20:	4b30      	ldr	r3, [pc, #192]	; (8003fe4 <HAL_GPIO_Init+0x334>)
 8003f22:	68db      	ldr	r3, [r3, #12]
 8003f24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	43db      	mvns	r3, r3
 8003f2a:	69ba      	ldr	r2, [r7, #24]
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d003      	beq.n	8003f44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f3c:	69ba      	ldr	r2, [r7, #24]
 8003f3e:	693b      	ldr	r3, [r7, #16]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f44:	4a27      	ldr	r2, [pc, #156]	; (8003fe4 <HAL_GPIO_Init+0x334>)
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f4a:	4b26      	ldr	r3, [pc, #152]	; (8003fe4 <HAL_GPIO_Init+0x334>)
 8003f4c:	685b      	ldr	r3, [r3, #4]
 8003f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	43db      	mvns	r3, r3
 8003f54:	69ba      	ldr	r2, [r7, #24]
 8003f56:	4013      	ands	r3, r2
 8003f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d003      	beq.n	8003f6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	693b      	ldr	r3, [r7, #16]
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f6e:	4a1d      	ldr	r2, [pc, #116]	; (8003fe4 <HAL_GPIO_Init+0x334>)
 8003f70:	69bb      	ldr	r3, [r7, #24]
 8003f72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003f74:	4b1b      	ldr	r3, [pc, #108]	; (8003fe4 <HAL_GPIO_Init+0x334>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	43db      	mvns	r3, r3
 8003f7e:	69ba      	ldr	r2, [r7, #24]
 8003f80:	4013      	ands	r3, r2
 8003f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d003      	beq.n	8003f98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f98:	4a12      	ldr	r2, [pc, #72]	; (8003fe4 <HAL_GPIO_Init+0x334>)
 8003f9a:	69bb      	ldr	r3, [r7, #24]
 8003f9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	2b0f      	cmp	r3, #15
 8003fa8:	f67f ae90 	bls.w	8003ccc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fac:	bf00      	nop
 8003fae:	bf00      	nop
 8003fb0:	3724      	adds	r7, #36	; 0x24
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	40023800 	.word	0x40023800
 8003fc0:	40013800 	.word	0x40013800
 8003fc4:	40020000 	.word	0x40020000
 8003fc8:	40020400 	.word	0x40020400
 8003fcc:	40020800 	.word	0x40020800
 8003fd0:	40020c00 	.word	0x40020c00
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	40021400 	.word	0x40021400
 8003fdc:	40021800 	.word	0x40021800
 8003fe0:	40021c00 	.word	0x40021c00
 8003fe4:	40013c00 	.word	0x40013c00

08003fe8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b083      	sub	sp, #12
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	460b      	mov	r3, r1
 8003ff2:	807b      	strh	r3, [r7, #2]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ff8:	787b      	ldrb	r3, [r7, #1]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ffe:	887a      	ldrh	r2, [r7, #2]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004004:	e003      	b.n	800400e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004006:	887b      	ldrh	r3, [r7, #2]
 8004008:	041a      	lsls	r2, r3, #16
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	619a      	str	r2, [r3, #24]
}
 800400e:	bf00      	nop
 8004010:	370c      	adds	r7, #12
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr

0800401a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800401a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800401c:	b08f      	sub	sp, #60	; 0x3c
 800401e:	af0a      	add	r7, sp, #40	; 0x28
 8004020:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d101      	bne.n	800402c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e054      	b.n	80040d6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8004038:	b2db      	uxtb	r3, r3
 800403a:	2b00      	cmp	r3, #0
 800403c:	d106      	bne.n	800404c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f006 ff42 	bl	800aed0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2203      	movs	r2, #3
 8004050:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405c:	2b00      	cmp	r3, #0
 800405e:	d102      	bne.n	8004066 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	2200      	movs	r2, #0
 8004064:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f003 ff6e 	bl	8007f4c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	603b      	str	r3, [r7, #0]
 8004076:	687e      	ldr	r6, [r7, #4]
 8004078:	466d      	mov	r5, sp
 800407a:	f106 0410 	add.w	r4, r6, #16
 800407e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004080:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004082:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004084:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004086:	e894 0003 	ldmia.w	r4, {r0, r1}
 800408a:	e885 0003 	stmia.w	r5, {r0, r1}
 800408e:	1d33      	adds	r3, r6, #4
 8004090:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004092:	6838      	ldr	r0, [r7, #0]
 8004094:	f003 fee8 	bl	8007e68 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	2101      	movs	r1, #1
 800409e:	4618      	mov	r0, r3
 80040a0:	f003 ff65 	bl	8007f6e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	603b      	str	r3, [r7, #0]
 80040aa:	687e      	ldr	r6, [r7, #4]
 80040ac:	466d      	mov	r5, sp
 80040ae:	f106 0410 	add.w	r4, r6, #16
 80040b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80040b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80040ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80040be:	e885 0003 	stmia.w	r5, {r0, r1}
 80040c2:	1d33      	adds	r3, r6, #4
 80040c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040c6:	6838      	ldr	r0, [r7, #0]
 80040c8:	f004 f8ee 	bl	80082a8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80040d4:	2300      	movs	r3, #0
}
 80040d6:	4618      	mov	r0, r3
 80040d8:	3714      	adds	r7, #20
 80040da:	46bd      	mov	sp, r7
 80040dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080040de <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80040de:	b590      	push	{r4, r7, lr}
 80040e0:	b089      	sub	sp, #36	; 0x24
 80040e2:	af04      	add	r7, sp, #16
 80040e4:	6078      	str	r0, [r7, #4]
 80040e6:	4608      	mov	r0, r1
 80040e8:	4611      	mov	r1, r2
 80040ea:	461a      	mov	r2, r3
 80040ec:	4603      	mov	r3, r0
 80040ee:	70fb      	strb	r3, [r7, #3]
 80040f0:	460b      	mov	r3, r1
 80040f2:	70bb      	strb	r3, [r7, #2]
 80040f4:	4613      	mov	r3, r2
 80040f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80040fe:	2b01      	cmp	r3, #1
 8004100:	d101      	bne.n	8004106 <HAL_HCD_HC_Init+0x28>
 8004102:	2302      	movs	r3, #2
 8004104:	e076      	b.n	80041f4 <HAL_HCD_HC_Init+0x116>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2201      	movs	r2, #1
 800410a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800410e:	78fb      	ldrb	r3, [r7, #3]
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	212c      	movs	r1, #44	; 0x2c
 8004114:	fb01 f303 	mul.w	r3, r1, r3
 8004118:	4413      	add	r3, r2
 800411a:	333d      	adds	r3, #61	; 0x3d
 800411c:	2200      	movs	r2, #0
 800411e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8004120:	78fb      	ldrb	r3, [r7, #3]
 8004122:	687a      	ldr	r2, [r7, #4]
 8004124:	212c      	movs	r1, #44	; 0x2c
 8004126:	fb01 f303 	mul.w	r3, r1, r3
 800412a:	4413      	add	r3, r2
 800412c:	3338      	adds	r3, #56	; 0x38
 800412e:	787a      	ldrb	r2, [r7, #1]
 8004130:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004132:	78fb      	ldrb	r3, [r7, #3]
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	212c      	movs	r1, #44	; 0x2c
 8004138:	fb01 f303 	mul.w	r3, r1, r3
 800413c:	4413      	add	r3, r2
 800413e:	3340      	adds	r3, #64	; 0x40
 8004140:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004142:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004144:	78fb      	ldrb	r3, [r7, #3]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	212c      	movs	r1, #44	; 0x2c
 800414a:	fb01 f303 	mul.w	r3, r1, r3
 800414e:	4413      	add	r3, r2
 8004150:	3339      	adds	r3, #57	; 0x39
 8004152:	78fa      	ldrb	r2, [r7, #3]
 8004154:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8004156:	78fb      	ldrb	r3, [r7, #3]
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	212c      	movs	r1, #44	; 0x2c
 800415c:	fb01 f303 	mul.w	r3, r1, r3
 8004160:	4413      	add	r3, r2
 8004162:	333f      	adds	r3, #63	; 0x3f
 8004164:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8004168:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800416a:	78fb      	ldrb	r3, [r7, #3]
 800416c:	78ba      	ldrb	r2, [r7, #2]
 800416e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004172:	b2d0      	uxtb	r0, r2
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	212c      	movs	r1, #44	; 0x2c
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	4413      	add	r3, r2
 800417e:	333a      	adds	r3, #58	; 0x3a
 8004180:	4602      	mov	r2, r0
 8004182:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004184:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004188:	2b00      	cmp	r3, #0
 800418a:	da09      	bge.n	80041a0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800418c:	78fb      	ldrb	r3, [r7, #3]
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	212c      	movs	r1, #44	; 0x2c
 8004192:	fb01 f303 	mul.w	r3, r1, r3
 8004196:	4413      	add	r3, r2
 8004198:	333b      	adds	r3, #59	; 0x3b
 800419a:	2201      	movs	r2, #1
 800419c:	701a      	strb	r2, [r3, #0]
 800419e:	e008      	b.n	80041b2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80041a0:	78fb      	ldrb	r3, [r7, #3]
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	212c      	movs	r1, #44	; 0x2c
 80041a6:	fb01 f303 	mul.w	r3, r1, r3
 80041aa:	4413      	add	r3, r2
 80041ac:	333b      	adds	r3, #59	; 0x3b
 80041ae:	2200      	movs	r2, #0
 80041b0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80041b2:	78fb      	ldrb	r3, [r7, #3]
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	212c      	movs	r1, #44	; 0x2c
 80041b8:	fb01 f303 	mul.w	r3, r1, r3
 80041bc:	4413      	add	r3, r2
 80041be:	333c      	adds	r3, #60	; 0x3c
 80041c0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80041c4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6818      	ldr	r0, [r3, #0]
 80041ca:	787c      	ldrb	r4, [r7, #1]
 80041cc:	78ba      	ldrb	r2, [r7, #2]
 80041ce:	78f9      	ldrb	r1, [r7, #3]
 80041d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80041d2:	9302      	str	r3, [sp, #8]
 80041d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80041d8:	9301      	str	r3, [sp, #4]
 80041da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	4623      	mov	r3, r4
 80041e2:	f004 f9e7 	bl	80085b4 <USB_HC_Init>
 80041e6:	4603      	mov	r3, r0
 80041e8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80041f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd90      	pop	{r4, r7, pc}

080041fc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80041fc:	b580      	push	{r7, lr}
 80041fe:	b084      	sub	sp, #16
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
 8004204:	460b      	mov	r3, r1
 8004206:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8004208:	2300      	movs	r3, #0
 800420a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004212:	2b01      	cmp	r3, #1
 8004214:	d101      	bne.n	800421a <HAL_HCD_HC_Halt+0x1e>
 8004216:	2302      	movs	r3, #2
 8004218:	e00f      	b.n	800423a <HAL_HCD_HC_Halt+0x3e>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2201      	movs	r2, #1
 800421e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	78fa      	ldrb	r2, [r7, #3]
 8004228:	4611      	mov	r1, r2
 800422a:	4618      	mov	r0, r3
 800422c:	f004 fc37 	bl	8008a9e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8004238:	7bfb      	ldrb	r3, [r7, #15]
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b082      	sub	sp, #8
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	4608      	mov	r0, r1
 800424e:	4611      	mov	r1, r2
 8004250:	461a      	mov	r2, r3
 8004252:	4603      	mov	r3, r0
 8004254:	70fb      	strb	r3, [r7, #3]
 8004256:	460b      	mov	r3, r1
 8004258:	70bb      	strb	r3, [r7, #2]
 800425a:	4613      	mov	r3, r2
 800425c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800425e:	78fb      	ldrb	r3, [r7, #3]
 8004260:	687a      	ldr	r2, [r7, #4]
 8004262:	212c      	movs	r1, #44	; 0x2c
 8004264:	fb01 f303 	mul.w	r3, r1, r3
 8004268:	4413      	add	r3, r2
 800426a:	333b      	adds	r3, #59	; 0x3b
 800426c:	78ba      	ldrb	r2, [r7, #2]
 800426e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004270:	78fb      	ldrb	r3, [r7, #3]
 8004272:	687a      	ldr	r2, [r7, #4]
 8004274:	212c      	movs	r1, #44	; 0x2c
 8004276:	fb01 f303 	mul.w	r3, r1, r3
 800427a:	4413      	add	r3, r2
 800427c:	333f      	adds	r3, #63	; 0x3f
 800427e:	787a      	ldrb	r2, [r7, #1]
 8004280:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004282:	7c3b      	ldrb	r3, [r7, #16]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d112      	bne.n	80042ae <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8004288:	78fb      	ldrb	r3, [r7, #3]
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	212c      	movs	r1, #44	; 0x2c
 800428e:	fb01 f303 	mul.w	r3, r1, r3
 8004292:	4413      	add	r3, r2
 8004294:	3342      	adds	r3, #66	; 0x42
 8004296:	2203      	movs	r2, #3
 8004298:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800429a:	78fb      	ldrb	r3, [r7, #3]
 800429c:	687a      	ldr	r2, [r7, #4]
 800429e:	212c      	movs	r1, #44	; 0x2c
 80042a0:	fb01 f303 	mul.w	r3, r1, r3
 80042a4:	4413      	add	r3, r2
 80042a6:	333d      	adds	r3, #61	; 0x3d
 80042a8:	7f3a      	ldrb	r2, [r7, #28]
 80042aa:	701a      	strb	r2, [r3, #0]
 80042ac:	e008      	b.n	80042c0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80042ae:	78fb      	ldrb	r3, [r7, #3]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	212c      	movs	r1, #44	; 0x2c
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	4413      	add	r3, r2
 80042ba:	3342      	adds	r3, #66	; 0x42
 80042bc:	2202      	movs	r2, #2
 80042be:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80042c0:	787b      	ldrb	r3, [r7, #1]
 80042c2:	2b03      	cmp	r3, #3
 80042c4:	f200 80c6 	bhi.w	8004454 <HAL_HCD_HC_SubmitRequest+0x210>
 80042c8:	a201      	add	r2, pc, #4	; (adr r2, 80042d0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80042ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ce:	bf00      	nop
 80042d0:	080042e1 	.word	0x080042e1
 80042d4:	08004441 	.word	0x08004441
 80042d8:	08004345 	.word	0x08004345
 80042dc:	080043c3 	.word	0x080043c3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80042e0:	7c3b      	ldrb	r3, [r7, #16]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	f040 80b8 	bne.w	8004458 <HAL_HCD_HC_SubmitRequest+0x214>
 80042e8:	78bb      	ldrb	r3, [r7, #2]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f040 80b4 	bne.w	8004458 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80042f0:	8b3b      	ldrh	r3, [r7, #24]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d108      	bne.n	8004308 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80042f6:	78fb      	ldrb	r3, [r7, #3]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	212c      	movs	r1, #44	; 0x2c
 80042fc:	fb01 f303 	mul.w	r3, r1, r3
 8004300:	4413      	add	r3, r2
 8004302:	3355      	adds	r3, #85	; 0x55
 8004304:	2201      	movs	r2, #1
 8004306:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8004308:	78fb      	ldrb	r3, [r7, #3]
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	212c      	movs	r1, #44	; 0x2c
 800430e:	fb01 f303 	mul.w	r3, r1, r3
 8004312:	4413      	add	r3, r2
 8004314:	3355      	adds	r3, #85	; 0x55
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d109      	bne.n	8004330 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800431c:	78fb      	ldrb	r3, [r7, #3]
 800431e:	687a      	ldr	r2, [r7, #4]
 8004320:	212c      	movs	r1, #44	; 0x2c
 8004322:	fb01 f303 	mul.w	r3, r1, r3
 8004326:	4413      	add	r3, r2
 8004328:	3342      	adds	r3, #66	; 0x42
 800432a:	2200      	movs	r2, #0
 800432c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800432e:	e093      	b.n	8004458 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004330:	78fb      	ldrb	r3, [r7, #3]
 8004332:	687a      	ldr	r2, [r7, #4]
 8004334:	212c      	movs	r1, #44	; 0x2c
 8004336:	fb01 f303 	mul.w	r3, r1, r3
 800433a:	4413      	add	r3, r2
 800433c:	3342      	adds	r3, #66	; 0x42
 800433e:	2202      	movs	r2, #2
 8004340:	701a      	strb	r2, [r3, #0]
      break;
 8004342:	e089      	b.n	8004458 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004344:	78bb      	ldrb	r3, [r7, #2]
 8004346:	2b00      	cmp	r3, #0
 8004348:	d11d      	bne.n	8004386 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800434a:	78fb      	ldrb	r3, [r7, #3]
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	212c      	movs	r1, #44	; 0x2c
 8004350:	fb01 f303 	mul.w	r3, r1, r3
 8004354:	4413      	add	r3, r2
 8004356:	3355      	adds	r3, #85	; 0x55
 8004358:	781b      	ldrb	r3, [r3, #0]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d109      	bne.n	8004372 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800435e:	78fb      	ldrb	r3, [r7, #3]
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	212c      	movs	r1, #44	; 0x2c
 8004364:	fb01 f303 	mul.w	r3, r1, r3
 8004368:	4413      	add	r3, r2
 800436a:	3342      	adds	r3, #66	; 0x42
 800436c:	2200      	movs	r2, #0
 800436e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004370:	e073      	b.n	800445a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004372:	78fb      	ldrb	r3, [r7, #3]
 8004374:	687a      	ldr	r2, [r7, #4]
 8004376:	212c      	movs	r1, #44	; 0x2c
 8004378:	fb01 f303 	mul.w	r3, r1, r3
 800437c:	4413      	add	r3, r2
 800437e:	3342      	adds	r3, #66	; 0x42
 8004380:	2202      	movs	r2, #2
 8004382:	701a      	strb	r2, [r3, #0]
      break;
 8004384:	e069      	b.n	800445a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004386:	78fb      	ldrb	r3, [r7, #3]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	212c      	movs	r1, #44	; 0x2c
 800438c:	fb01 f303 	mul.w	r3, r1, r3
 8004390:	4413      	add	r3, r2
 8004392:	3354      	adds	r3, #84	; 0x54
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d109      	bne.n	80043ae <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800439a:	78fb      	ldrb	r3, [r7, #3]
 800439c:	687a      	ldr	r2, [r7, #4]
 800439e:	212c      	movs	r1, #44	; 0x2c
 80043a0:	fb01 f303 	mul.w	r3, r1, r3
 80043a4:	4413      	add	r3, r2
 80043a6:	3342      	adds	r3, #66	; 0x42
 80043a8:	2200      	movs	r2, #0
 80043aa:	701a      	strb	r2, [r3, #0]
      break;
 80043ac:	e055      	b.n	800445a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043ae:	78fb      	ldrb	r3, [r7, #3]
 80043b0:	687a      	ldr	r2, [r7, #4]
 80043b2:	212c      	movs	r1, #44	; 0x2c
 80043b4:	fb01 f303 	mul.w	r3, r1, r3
 80043b8:	4413      	add	r3, r2
 80043ba:	3342      	adds	r3, #66	; 0x42
 80043bc:	2202      	movs	r2, #2
 80043be:	701a      	strb	r2, [r3, #0]
      break;
 80043c0:	e04b      	b.n	800445a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80043c2:	78bb      	ldrb	r3, [r7, #2]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d11d      	bne.n	8004404 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80043c8:	78fb      	ldrb	r3, [r7, #3]
 80043ca:	687a      	ldr	r2, [r7, #4]
 80043cc:	212c      	movs	r1, #44	; 0x2c
 80043ce:	fb01 f303 	mul.w	r3, r1, r3
 80043d2:	4413      	add	r3, r2
 80043d4:	3355      	adds	r3, #85	; 0x55
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d109      	bne.n	80043f0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80043dc:	78fb      	ldrb	r3, [r7, #3]
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	212c      	movs	r1, #44	; 0x2c
 80043e2:	fb01 f303 	mul.w	r3, r1, r3
 80043e6:	4413      	add	r3, r2
 80043e8:	3342      	adds	r3, #66	; 0x42
 80043ea:	2200      	movs	r2, #0
 80043ec:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80043ee:	e034      	b.n	800445a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80043f0:	78fb      	ldrb	r3, [r7, #3]
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	212c      	movs	r1, #44	; 0x2c
 80043f6:	fb01 f303 	mul.w	r3, r1, r3
 80043fa:	4413      	add	r3, r2
 80043fc:	3342      	adds	r3, #66	; 0x42
 80043fe:	2202      	movs	r2, #2
 8004400:	701a      	strb	r2, [r3, #0]
      break;
 8004402:	e02a      	b.n	800445a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8004404:	78fb      	ldrb	r3, [r7, #3]
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	212c      	movs	r1, #44	; 0x2c
 800440a:	fb01 f303 	mul.w	r3, r1, r3
 800440e:	4413      	add	r3, r2
 8004410:	3354      	adds	r3, #84	; 0x54
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d109      	bne.n	800442c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004418:	78fb      	ldrb	r3, [r7, #3]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	212c      	movs	r1, #44	; 0x2c
 800441e:	fb01 f303 	mul.w	r3, r1, r3
 8004422:	4413      	add	r3, r2
 8004424:	3342      	adds	r3, #66	; 0x42
 8004426:	2200      	movs	r2, #0
 8004428:	701a      	strb	r2, [r3, #0]
      break;
 800442a:	e016      	b.n	800445a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800442c:	78fb      	ldrb	r3, [r7, #3]
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	212c      	movs	r1, #44	; 0x2c
 8004432:	fb01 f303 	mul.w	r3, r1, r3
 8004436:	4413      	add	r3, r2
 8004438:	3342      	adds	r3, #66	; 0x42
 800443a:	2202      	movs	r2, #2
 800443c:	701a      	strb	r2, [r3, #0]
      break;
 800443e:	e00c      	b.n	800445a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004440:	78fb      	ldrb	r3, [r7, #3]
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	212c      	movs	r1, #44	; 0x2c
 8004446:	fb01 f303 	mul.w	r3, r1, r3
 800444a:	4413      	add	r3, r2
 800444c:	3342      	adds	r3, #66	; 0x42
 800444e:	2200      	movs	r2, #0
 8004450:	701a      	strb	r2, [r3, #0]
      break;
 8004452:	e002      	b.n	800445a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004454:	bf00      	nop
 8004456:	e000      	b.n	800445a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8004458:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800445a:	78fb      	ldrb	r3, [r7, #3]
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	212c      	movs	r1, #44	; 0x2c
 8004460:	fb01 f303 	mul.w	r3, r1, r3
 8004464:	4413      	add	r3, r2
 8004466:	3344      	adds	r3, #68	; 0x44
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800446c:	78fb      	ldrb	r3, [r7, #3]
 800446e:	8b3a      	ldrh	r2, [r7, #24]
 8004470:	6879      	ldr	r1, [r7, #4]
 8004472:	202c      	movs	r0, #44	; 0x2c
 8004474:	fb00 f303 	mul.w	r3, r0, r3
 8004478:	440b      	add	r3, r1
 800447a:	334c      	adds	r3, #76	; 0x4c
 800447c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800447e:	78fb      	ldrb	r3, [r7, #3]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	212c      	movs	r1, #44	; 0x2c
 8004484:	fb01 f303 	mul.w	r3, r1, r3
 8004488:	4413      	add	r3, r2
 800448a:	3360      	adds	r3, #96	; 0x60
 800448c:	2200      	movs	r2, #0
 800448e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004490:	78fb      	ldrb	r3, [r7, #3]
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	212c      	movs	r1, #44	; 0x2c
 8004496:	fb01 f303 	mul.w	r3, r1, r3
 800449a:	4413      	add	r3, r2
 800449c:	3350      	adds	r3, #80	; 0x50
 800449e:	2200      	movs	r2, #0
 80044a0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80044a2:	78fb      	ldrb	r3, [r7, #3]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	212c      	movs	r1, #44	; 0x2c
 80044a8:	fb01 f303 	mul.w	r3, r1, r3
 80044ac:	4413      	add	r3, r2
 80044ae:	3339      	adds	r3, #57	; 0x39
 80044b0:	78fa      	ldrb	r2, [r7, #3]
 80044b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80044b4:	78fb      	ldrb	r3, [r7, #3]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	212c      	movs	r1, #44	; 0x2c
 80044ba:	fb01 f303 	mul.w	r3, r1, r3
 80044be:	4413      	add	r3, r2
 80044c0:	3361      	adds	r3, #97	; 0x61
 80044c2:	2200      	movs	r2, #0
 80044c4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	78fb      	ldrb	r3, [r7, #3]
 80044cc:	222c      	movs	r2, #44	; 0x2c
 80044ce:	fb02 f303 	mul.w	r3, r2, r3
 80044d2:	3338      	adds	r3, #56	; 0x38
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	18d1      	adds	r1, r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	691b      	ldr	r3, [r3, #16]
 80044dc:	b2db      	uxtb	r3, r3
 80044de:	461a      	mov	r2, r3
 80044e0:	f004 f98a 	bl	80087f8 <USB_HC_StartXfer>
 80044e4:	4603      	mov	r3, r0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop

080044f0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4618      	mov	r0, r3
 8004508:	f003 fe8b 	bl	8008222 <USB_GetMode>
 800450c:	4603      	mov	r3, r0
 800450e:	2b01      	cmp	r3, #1
 8004510:	f040 80f6 	bne.w	8004700 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4618      	mov	r0, r3
 800451a:	f003 fe6f 	bl	80081fc <USB_ReadInterrupts>
 800451e:	4603      	mov	r3, r0
 8004520:	2b00      	cmp	r3, #0
 8004522:	f000 80ec 	beq.w	80046fe <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f003 fe66 	bl	80081fc <USB_ReadInterrupts>
 8004530:	4603      	mov	r3, r0
 8004532:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004536:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800453a:	d104      	bne.n	8004546 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004544:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f003 fe56 	bl	80081fc <USB_ReadInterrupts>
 8004550:	4603      	mov	r3, r0
 8004552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004556:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800455a:	d104      	bne.n	8004566 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004564:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4618      	mov	r0, r3
 800456c:	f003 fe46 	bl	80081fc <USB_ReadInterrupts>
 8004570:	4603      	mov	r3, r0
 8004572:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004576:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800457a:	d104      	bne.n	8004586 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004584:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f003 fe36 	bl	80081fc <USB_ReadInterrupts>
 8004590:	4603      	mov	r3, r0
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b02      	cmp	r3, #2
 8004598:	d103      	bne.n	80045a2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	2202      	movs	r2, #2
 80045a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	4618      	mov	r0, r3
 80045a8:	f003 fe28 	bl	80081fc <USB_ReadInterrupts>
 80045ac:	4603      	mov	r3, r0
 80045ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80045b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80045b6:	d11c      	bne.n	80045f2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80045c0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f003 0301 	and.w	r3, r3, #1
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10f      	bne.n	80045f2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80045d2:	2110      	movs	r1, #16
 80045d4:	6938      	ldr	r0, [r7, #16]
 80045d6:	f003 fd17 	bl	8008008 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80045da:	6938      	ldr	r0, [r7, #16]
 80045dc:	f003 fd48 	bl	8008070 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2101      	movs	r1, #1
 80045e6:	4618      	mov	r0, r3
 80045e8:	f003 ff1e 	bl	8008428 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f006 fced 	bl	800afcc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4618      	mov	r0, r3
 80045f8:	f003 fe00 	bl	80081fc <USB_ReadInterrupts>
 80045fc:	4603      	mov	r3, r0
 80045fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004602:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004606:	d102      	bne.n	800460e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f001 f89e 	bl	800574a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4618      	mov	r0, r3
 8004614:	f003 fdf2 	bl	80081fc <USB_ReadInterrupts>
 8004618:	4603      	mov	r3, r0
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b08      	cmp	r3, #8
 8004620:	d106      	bne.n	8004630 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f006 fcb6 	bl	800af94 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2208      	movs	r2, #8
 800462e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4618      	mov	r0, r3
 8004636:	f003 fde1 	bl	80081fc <USB_ReadInterrupts>
 800463a:	4603      	mov	r3, r0
 800463c:	f003 0310 	and.w	r3, r3, #16
 8004640:	2b10      	cmp	r3, #16
 8004642:	d101      	bne.n	8004648 <HAL_HCD_IRQHandler+0x158>
 8004644:	2301      	movs	r3, #1
 8004646:	e000      	b.n	800464a <HAL_HCD_IRQHandler+0x15a>
 8004648:	2300      	movs	r3, #0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d012      	beq.n	8004674 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	699a      	ldr	r2, [r3, #24]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f022 0210 	bic.w	r2, r2, #16
 800465c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 ffa1 	bl	80055a6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	699a      	ldr	r2, [r3, #24]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f042 0210 	orr.w	r2, r2, #16
 8004672:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4618      	mov	r0, r3
 800467a:	f003 fdbf 	bl	80081fc <USB_ReadInterrupts>
 800467e:	4603      	mov	r3, r0
 8004680:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004684:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004688:	d13a      	bne.n	8004700 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4618      	mov	r0, r3
 8004690:	f004 f9f4 	bl	8008a7c <USB_HC_ReadInterrupt>
 8004694:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004696:	2300      	movs	r3, #0
 8004698:	617b      	str	r3, [r7, #20]
 800469a:	e025      	b.n	80046e8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f003 030f 	and.w	r3, r3, #15
 80046a2:	68ba      	ldr	r2, [r7, #8]
 80046a4:	fa22 f303 	lsr.w	r3, r2, r3
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d018      	beq.n	80046e2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80046b0:	697b      	ldr	r3, [r7, #20]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80046c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046c6:	d106      	bne.n	80046d6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	4619      	mov	r1, r3
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 f8ab 	bl	800482a <HCD_HC_IN_IRQHandler>
 80046d4:	e005      	b.n	80046e2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	4619      	mov	r1, r3
 80046dc:	6878      	ldr	r0, [r7, #4]
 80046de:	f000 fbf9 	bl	8004ed4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80046e2:	697b      	ldr	r3, [r7, #20]
 80046e4:	3301      	adds	r3, #1
 80046e6:	617b      	str	r3, [r7, #20]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	697a      	ldr	r2, [r7, #20]
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d3d4      	bcc.n	800469c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80046fa:	615a      	str	r2, [r3, #20]
 80046fc:	e000      	b.n	8004700 <HAL_HCD_IRQHandler+0x210>
      return;
 80046fe:	bf00      	nop
    }
  }
}
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8004714:	2b01      	cmp	r3, #1
 8004716:	d101      	bne.n	800471c <HAL_HCD_Start+0x16>
 8004718:	2302      	movs	r3, #2
 800471a:	e013      	b.n	8004744 <HAL_HCD_Start+0x3e>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2101      	movs	r1, #1
 800472a:	4618      	mov	r0, r3
 800472c:	f003 fee0 	bl	80084f0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4618      	mov	r0, r3
 8004736:	f003 fbf8 	bl	8007f2a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2200      	movs	r2, #0
 800473e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004742:	2300      	movs	r3, #0
}
 8004744:	4618      	mov	r0, r3
 8004746:	3708      	adds	r7, #8
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}

0800474c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b082      	sub	sp, #8
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800475a:	2b01      	cmp	r3, #1
 800475c:	d101      	bne.n	8004762 <HAL_HCD_Stop+0x16>
 800475e:	2302      	movs	r3, #2
 8004760:	e00d      	b.n	800477e <HAL_HCD_Stop+0x32>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2201      	movs	r2, #1
 8004766:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4618      	mov	r0, r3
 8004770:	f004 face 	bl	8008d10 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8004786:	b580      	push	{r7, lr}
 8004788:	b082      	sub	sp, #8
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	4618      	mov	r0, r3
 8004794:	f003 fe82 	bl	800849c <USB_ResetPort>
 8004798:	4603      	mov	r3, r0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3708      	adds	r7, #8
 800479e:	46bd      	mov	sp, r7
 80047a0:	bd80      	pop	{r7, pc}

080047a2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80047a2:	b480      	push	{r7}
 80047a4:	b083      	sub	sp, #12
 80047a6:	af00      	add	r7, sp, #0
 80047a8:	6078      	str	r0, [r7, #4]
 80047aa:	460b      	mov	r3, r1
 80047ac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80047ae:	78fb      	ldrb	r3, [r7, #3]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	212c      	movs	r1, #44	; 0x2c
 80047b4:	fb01 f303 	mul.w	r3, r1, r3
 80047b8:	4413      	add	r3, r2
 80047ba:	3360      	adds	r3, #96	; 0x60
 80047bc:	781b      	ldrb	r3, [r3, #0]
}
 80047be:	4618      	mov	r0, r3
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	460b      	mov	r3, r1
 80047d4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80047d6:	78fb      	ldrb	r3, [r7, #3]
 80047d8:	687a      	ldr	r2, [r7, #4]
 80047da:	212c      	movs	r1, #44	; 0x2c
 80047dc:	fb01 f303 	mul.w	r3, r1, r3
 80047e0:	4413      	add	r3, r2
 80047e2:	3350      	adds	r3, #80	; 0x50
 80047e4:	681b      	ldr	r3, [r3, #0]
}
 80047e6:	4618      	mov	r0, r3
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr

080047f2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80047f2:	b580      	push	{r7, lr}
 80047f4:	b082      	sub	sp, #8
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f003 fec6 	bl	8008590 <USB_GetCurrentFrame>
 8004804:	4603      	mov	r3, r0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3708      	adds	r7, #8
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}

0800480e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800480e:	b580      	push	{r7, lr}
 8004810:	b082      	sub	sp, #8
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4618      	mov	r0, r3
 800481c:	f003 fea1 	bl	8008562 <USB_GetHostSpeed>
 8004820:	4603      	mov	r3, r0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3708      	adds	r7, #8
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800482a:	b580      	push	{r7, lr}
 800482c:	b086      	sub	sp, #24
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
 8004832:	460b      	mov	r3, r1
 8004834:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800483c:	697b      	ldr	r3, [r7, #20]
 800483e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004840:	78fb      	ldrb	r3, [r7, #3]
 8004842:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	015a      	lsls	r2, r3, #5
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	4413      	add	r3, r2
 800484c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b04      	cmp	r3, #4
 8004858:	d11a      	bne.n	8004890 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	015a      	lsls	r2, r3, #5
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	4413      	add	r3, r2
 8004862:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004866:	461a      	mov	r2, r3
 8004868:	2304      	movs	r3, #4
 800486a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	212c      	movs	r1, #44	; 0x2c
 8004872:	fb01 f303 	mul.w	r3, r1, r3
 8004876:	4413      	add	r3, r2
 8004878:	3361      	adds	r3, #97	; 0x61
 800487a:	2206      	movs	r2, #6
 800487c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	68fa      	ldr	r2, [r7, #12]
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	4611      	mov	r1, r2
 8004888:	4618      	mov	r0, r3
 800488a:	f004 f908 	bl	8008a9e <USB_HC_Halt>
 800488e:	e0af      	b.n	80049f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	4413      	add	r3, r2
 8004898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80048a6:	d11b      	bne.n	80048e0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	015a      	lsls	r2, r3, #5
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	4413      	add	r3, r2
 80048b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048b4:	461a      	mov	r2, r3
 80048b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80048ba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	212c      	movs	r1, #44	; 0x2c
 80048c2:	fb01 f303 	mul.w	r3, r1, r3
 80048c6:	4413      	add	r3, r2
 80048c8:	3361      	adds	r3, #97	; 0x61
 80048ca:	2207      	movs	r2, #7
 80048cc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68fa      	ldr	r2, [r7, #12]
 80048d4:	b2d2      	uxtb	r2, r2
 80048d6:	4611      	mov	r1, r2
 80048d8:	4618      	mov	r0, r3
 80048da:	f004 f8e0 	bl	8008a9e <USB_HC_Halt>
 80048de:	e087      	b.n	80049f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 0320 	and.w	r3, r3, #32
 80048f2:	2b20      	cmp	r3, #32
 80048f4:	d109      	bne.n	800490a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	015a      	lsls	r2, r3, #5
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	4413      	add	r3, r2
 80048fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004902:	461a      	mov	r2, r3
 8004904:	2320      	movs	r3, #32
 8004906:	6093      	str	r3, [r2, #8]
 8004908:	e072      	b.n	80049f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	4413      	add	r3, r2
 8004912:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f003 0308 	and.w	r3, r3, #8
 800491c:	2b08      	cmp	r3, #8
 800491e:	d11a      	bne.n	8004956 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	4413      	add	r3, r2
 8004928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800492c:	461a      	mov	r2, r3
 800492e:	2308      	movs	r3, #8
 8004930:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004932:	687a      	ldr	r2, [r7, #4]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	212c      	movs	r1, #44	; 0x2c
 8004938:	fb01 f303 	mul.w	r3, r1, r3
 800493c:	4413      	add	r3, r2
 800493e:	3361      	adds	r3, #97	; 0x61
 8004940:	2205      	movs	r2, #5
 8004942:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	b2d2      	uxtb	r2, r2
 800494c:	4611      	mov	r1, r2
 800494e:	4618      	mov	r0, r3
 8004950:	f004 f8a5 	bl	8008a9e <USB_HC_Halt>
 8004954:	e04c      	b.n	80049f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	015a      	lsls	r2, r3, #5
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	4413      	add	r3, r2
 800495e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004968:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800496c:	d11b      	bne.n	80049a6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	693b      	ldr	r3, [r7, #16]
 8004974:	4413      	add	r3, r2
 8004976:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800497a:	461a      	mov	r2, r3
 800497c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004980:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	212c      	movs	r1, #44	; 0x2c
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	4413      	add	r3, r2
 800498e:	3361      	adds	r3, #97	; 0x61
 8004990:	2208      	movs	r2, #8
 8004992:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	68fa      	ldr	r2, [r7, #12]
 800499a:	b2d2      	uxtb	r2, r2
 800499c:	4611      	mov	r1, r2
 800499e:	4618      	mov	r0, r3
 80049a0:	f004 f87d 	bl	8008a9e <USB_HC_Halt>
 80049a4:	e024      	b.n	80049f0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b8:	2b80      	cmp	r3, #128	; 0x80
 80049ba:	d119      	bne.n	80049f0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c8:	461a      	mov	r2, r3
 80049ca:	2380      	movs	r3, #128	; 0x80
 80049cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	212c      	movs	r1, #44	; 0x2c
 80049d4:	fb01 f303 	mul.w	r3, r1, r3
 80049d8:	4413      	add	r3, r2
 80049da:	3361      	adds	r3, #97	; 0x61
 80049dc:	2206      	movs	r2, #6
 80049de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	4611      	mov	r1, r2
 80049ea:	4618      	mov	r0, r3
 80049ec:	f004 f857 	bl	8008a9e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	015a      	lsls	r2, r3, #5
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	4413      	add	r3, r2
 80049f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a06:	d112      	bne.n	8004a2e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	b2d2      	uxtb	r2, r2
 8004a10:	4611      	mov	r1, r2
 8004a12:	4618      	mov	r0, r3
 8004a14:	f004 f843 	bl	8008a9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a24:	461a      	mov	r2, r3
 8004a26:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004a2a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8004a2c:	e24e      	b.n	8004ecc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	f040 80df 	bne.w	8004c04 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d019      	beq.n	8004a82 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	212c      	movs	r1, #44	; 0x2c
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	4413      	add	r3, r2
 8004a5a:	3348      	adds	r3, #72	; 0x48
 8004a5c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	0159      	lsls	r1, r3, #5
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	440b      	add	r3, r1
 8004a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a6a:	691b      	ldr	r3, [r3, #16]
 8004a6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004a70:	1ad2      	subs	r2, r2, r3
 8004a72:	6879      	ldr	r1, [r7, #4]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	202c      	movs	r0, #44	; 0x2c
 8004a78:	fb00 f303 	mul.w	r3, r0, r3
 8004a7c:	440b      	add	r3, r1
 8004a7e:	3350      	adds	r3, #80	; 0x50
 8004a80:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004a82:	687a      	ldr	r2, [r7, #4]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	212c      	movs	r1, #44	; 0x2c
 8004a88:	fb01 f303 	mul.w	r3, r1, r3
 8004a8c:	4413      	add	r3, r2
 8004a8e:	3361      	adds	r3, #97	; 0x61
 8004a90:	2201      	movs	r2, #1
 8004a92:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004a94:	687a      	ldr	r2, [r7, #4]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	212c      	movs	r1, #44	; 0x2c
 8004a9a:	fb01 f303 	mul.w	r3, r1, r3
 8004a9e:	4413      	add	r3, r2
 8004aa0:	335c      	adds	r3, #92	; 0x5c
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	015a      	lsls	r2, r3, #5
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	4413      	add	r3, r2
 8004aae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ab2:	461a      	mov	r2, r3
 8004ab4:	2301      	movs	r3, #1
 8004ab6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	212c      	movs	r1, #44	; 0x2c
 8004abe:	fb01 f303 	mul.w	r3, r1, r3
 8004ac2:	4413      	add	r3, r2
 8004ac4:	333f      	adds	r3, #63	; 0x3f
 8004ac6:	781b      	ldrb	r3, [r3, #0]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d009      	beq.n	8004ae0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004acc:	687a      	ldr	r2, [r7, #4]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	212c      	movs	r1, #44	; 0x2c
 8004ad2:	fb01 f303 	mul.w	r3, r1, r3
 8004ad6:	4413      	add	r3, r2
 8004ad8:	333f      	adds	r3, #63	; 0x3f
 8004ada:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d111      	bne.n	8004b04 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	68fa      	ldr	r2, [r7, #12]
 8004ae6:	b2d2      	uxtb	r2, r2
 8004ae8:	4611      	mov	r1, r2
 8004aea:	4618      	mov	r0, r3
 8004aec:	f003 ffd7 	bl	8008a9e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004afc:	461a      	mov	r2, r3
 8004afe:	2310      	movs	r3, #16
 8004b00:	6093      	str	r3, [r2, #8]
 8004b02:	e03a      	b.n	8004b7a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004b04:	687a      	ldr	r2, [r7, #4]
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	212c      	movs	r1, #44	; 0x2c
 8004b0a:	fb01 f303 	mul.w	r3, r1, r3
 8004b0e:	4413      	add	r3, r2
 8004b10:	333f      	adds	r3, #63	; 0x3f
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b03      	cmp	r3, #3
 8004b16:	d009      	beq.n	8004b2c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	212c      	movs	r1, #44	; 0x2c
 8004b1e:	fb01 f303 	mul.w	r3, r1, r3
 8004b22:	4413      	add	r3, r2
 8004b24:	333f      	adds	r3, #63	; 0x3f
 8004b26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d126      	bne.n	8004b7a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	0151      	lsls	r1, r2, #5
 8004b3e:	693a      	ldr	r2, [r7, #16]
 8004b40:	440a      	add	r2, r1
 8004b42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004b46:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b4a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	212c      	movs	r1, #44	; 0x2c
 8004b52:	fb01 f303 	mul.w	r3, r1, r3
 8004b56:	4413      	add	r3, r2
 8004b58:	3360      	adds	r3, #96	; 0x60
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	b2d9      	uxtb	r1, r3
 8004b62:	687a      	ldr	r2, [r7, #4]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	202c      	movs	r0, #44	; 0x2c
 8004b68:	fb00 f303 	mul.w	r3, r0, r3
 8004b6c:	4413      	add	r3, r2
 8004b6e:	3360      	adds	r3, #96	; 0x60
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f006 fa37 	bl	800afe8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d12b      	bne.n	8004bda <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	212c      	movs	r1, #44	; 0x2c
 8004b88:	fb01 f303 	mul.w	r3, r1, r3
 8004b8c:	4413      	add	r3, r2
 8004b8e:	3348      	adds	r3, #72	; 0x48
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6879      	ldr	r1, [r7, #4]
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	202c      	movs	r0, #44	; 0x2c
 8004b98:	fb00 f202 	mul.w	r2, r0, r2
 8004b9c:	440a      	add	r2, r1
 8004b9e:	3240      	adds	r2, #64	; 0x40
 8004ba0:	8812      	ldrh	r2, [r2, #0]
 8004ba2:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ba6:	f003 0301 	and.w	r3, r3, #1
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	f000 818e 	beq.w	8004ecc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	212c      	movs	r1, #44	; 0x2c
 8004bb6:	fb01 f303 	mul.w	r3, r1, r3
 8004bba:	4413      	add	r3, r2
 8004bbc:	3354      	adds	r3, #84	; 0x54
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	f083 0301 	eor.w	r3, r3, #1
 8004bc4:	b2d8      	uxtb	r0, r3
 8004bc6:	687a      	ldr	r2, [r7, #4]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	212c      	movs	r1, #44	; 0x2c
 8004bcc:	fb01 f303 	mul.w	r3, r1, r3
 8004bd0:	4413      	add	r3, r2
 8004bd2:	3354      	adds	r3, #84	; 0x54
 8004bd4:	4602      	mov	r2, r0
 8004bd6:	701a      	strb	r2, [r3, #0]
}
 8004bd8:	e178      	b.n	8004ecc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004bda:	687a      	ldr	r2, [r7, #4]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	212c      	movs	r1, #44	; 0x2c
 8004be0:	fb01 f303 	mul.w	r3, r1, r3
 8004be4:	4413      	add	r3, r2
 8004be6:	3354      	adds	r3, #84	; 0x54
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	f083 0301 	eor.w	r3, r3, #1
 8004bee:	b2d8      	uxtb	r0, r3
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	212c      	movs	r1, #44	; 0x2c
 8004bf6:	fb01 f303 	mul.w	r3, r1, r3
 8004bfa:	4413      	add	r3, r2
 8004bfc:	3354      	adds	r3, #84	; 0x54
 8004bfe:	4602      	mov	r2, r0
 8004c00:	701a      	strb	r2, [r3, #0]
}
 8004c02:	e163      	b.n	8004ecc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	f040 80f6 	bne.w	8004e08 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	212c      	movs	r1, #44	; 0x2c
 8004c22:	fb01 f303 	mul.w	r3, r1, r3
 8004c26:	4413      	add	r3, r2
 8004c28:	3361      	adds	r3, #97	; 0x61
 8004c2a:	781b      	ldrb	r3, [r3, #0]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d109      	bne.n	8004c44 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	212c      	movs	r1, #44	; 0x2c
 8004c36:	fb01 f303 	mul.w	r3, r1, r3
 8004c3a:	4413      	add	r3, r2
 8004c3c:	3360      	adds	r3, #96	; 0x60
 8004c3e:	2201      	movs	r2, #1
 8004c40:	701a      	strb	r2, [r3, #0]
 8004c42:	e0c9      	b.n	8004dd8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004c44:	687a      	ldr	r2, [r7, #4]
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	212c      	movs	r1, #44	; 0x2c
 8004c4a:	fb01 f303 	mul.w	r3, r1, r3
 8004c4e:	4413      	add	r3, r2
 8004c50:	3361      	adds	r3, #97	; 0x61
 8004c52:	781b      	ldrb	r3, [r3, #0]
 8004c54:	2b05      	cmp	r3, #5
 8004c56:	d109      	bne.n	8004c6c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004c58:	687a      	ldr	r2, [r7, #4]
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	212c      	movs	r1, #44	; 0x2c
 8004c5e:	fb01 f303 	mul.w	r3, r1, r3
 8004c62:	4413      	add	r3, r2
 8004c64:	3360      	adds	r3, #96	; 0x60
 8004c66:	2205      	movs	r2, #5
 8004c68:	701a      	strb	r2, [r3, #0]
 8004c6a:	e0b5      	b.n	8004dd8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	212c      	movs	r1, #44	; 0x2c
 8004c72:	fb01 f303 	mul.w	r3, r1, r3
 8004c76:	4413      	add	r3, r2
 8004c78:	3361      	adds	r3, #97	; 0x61
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	2b06      	cmp	r3, #6
 8004c7e:	d009      	beq.n	8004c94 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	212c      	movs	r1, #44	; 0x2c
 8004c86:	fb01 f303 	mul.w	r3, r1, r3
 8004c8a:	4413      	add	r3, r2
 8004c8c:	3361      	adds	r3, #97	; 0x61
 8004c8e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004c90:	2b08      	cmp	r3, #8
 8004c92:	d150      	bne.n	8004d36 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	212c      	movs	r1, #44	; 0x2c
 8004c9a:	fb01 f303 	mul.w	r3, r1, r3
 8004c9e:	4413      	add	r3, r2
 8004ca0:	335c      	adds	r3, #92	; 0x5c
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	1c5a      	adds	r2, r3, #1
 8004ca6:	6879      	ldr	r1, [r7, #4]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	202c      	movs	r0, #44	; 0x2c
 8004cac:	fb00 f303 	mul.w	r3, r0, r3
 8004cb0:	440b      	add	r3, r1
 8004cb2:	335c      	adds	r3, #92	; 0x5c
 8004cb4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	212c      	movs	r1, #44	; 0x2c
 8004cbc:	fb01 f303 	mul.w	r3, r1, r3
 8004cc0:	4413      	add	r3, r2
 8004cc2:	335c      	adds	r3, #92	; 0x5c
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d912      	bls.n	8004cf0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	212c      	movs	r1, #44	; 0x2c
 8004cd0:	fb01 f303 	mul.w	r3, r1, r3
 8004cd4:	4413      	add	r3, r2
 8004cd6:	335c      	adds	r3, #92	; 0x5c
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	212c      	movs	r1, #44	; 0x2c
 8004ce2:	fb01 f303 	mul.w	r3, r1, r3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	3360      	adds	r3, #96	; 0x60
 8004cea:	2204      	movs	r2, #4
 8004cec:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004cee:	e073      	b.n	8004dd8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	212c      	movs	r1, #44	; 0x2c
 8004cf6:	fb01 f303 	mul.w	r3, r1, r3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	3360      	adds	r3, #96	; 0x60
 8004cfe:	2202      	movs	r2, #2
 8004d00:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	015a      	lsls	r2, r3, #5
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	4413      	add	r3, r2
 8004d0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d18:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d20:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	015a      	lsls	r2, r3, #5
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	4413      	add	r3, r2
 8004d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d2e:	461a      	mov	r2, r3
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d34:	e050      	b.n	8004dd8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004d36:	687a      	ldr	r2, [r7, #4]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	212c      	movs	r1, #44	; 0x2c
 8004d3c:	fb01 f303 	mul.w	r3, r1, r3
 8004d40:	4413      	add	r3, r2
 8004d42:	3361      	adds	r3, #97	; 0x61
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b03      	cmp	r3, #3
 8004d48:	d122      	bne.n	8004d90 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004d4a:	687a      	ldr	r2, [r7, #4]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	212c      	movs	r1, #44	; 0x2c
 8004d50:	fb01 f303 	mul.w	r3, r1, r3
 8004d54:	4413      	add	r3, r2
 8004d56:	3360      	adds	r3, #96	; 0x60
 8004d58:	2202      	movs	r2, #2
 8004d5a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	015a      	lsls	r2, r3, #5
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	4413      	add	r3, r2
 8004d64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d72:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d7a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	015a      	lsls	r2, r3, #5
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	4413      	add	r3, r2
 8004d84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d88:	461a      	mov	r2, r3
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	e023      	b.n	8004dd8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004d90:	687a      	ldr	r2, [r7, #4]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	212c      	movs	r1, #44	; 0x2c
 8004d96:	fb01 f303 	mul.w	r3, r1, r3
 8004d9a:	4413      	add	r3, r2
 8004d9c:	3361      	adds	r3, #97	; 0x61
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	2b07      	cmp	r3, #7
 8004da2:	d119      	bne.n	8004dd8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	212c      	movs	r1, #44	; 0x2c
 8004daa:	fb01 f303 	mul.w	r3, r1, r3
 8004dae:	4413      	add	r3, r2
 8004db0:	335c      	adds	r3, #92	; 0x5c
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	1c5a      	adds	r2, r3, #1
 8004db6:	6879      	ldr	r1, [r7, #4]
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	202c      	movs	r0, #44	; 0x2c
 8004dbc:	fb00 f303 	mul.w	r3, r0, r3
 8004dc0:	440b      	add	r3, r1
 8004dc2:	335c      	adds	r3, #92	; 0x5c
 8004dc4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	212c      	movs	r1, #44	; 0x2c
 8004dcc:	fb01 f303 	mul.w	r3, r1, r3
 8004dd0:	4413      	add	r3, r2
 8004dd2:	3360      	adds	r3, #96	; 0x60
 8004dd4:	2204      	movs	r2, #4
 8004dd6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	015a      	lsls	r2, r3, #5
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	4413      	add	r3, r2
 8004de0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004de4:	461a      	mov	r2, r3
 8004de6:	2302      	movs	r3, #2
 8004de8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	b2d9      	uxtb	r1, r3
 8004dee:	687a      	ldr	r2, [r7, #4]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	202c      	movs	r0, #44	; 0x2c
 8004df4:	fb00 f303 	mul.w	r3, r0, r3
 8004df8:	4413      	add	r3, r2
 8004dfa:	3360      	adds	r3, #96	; 0x60
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	461a      	mov	r2, r3
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f006 f8f1 	bl	800afe8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004e06:	e061      	b.n	8004ecc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	015a      	lsls	r2, r3, #5
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	4413      	add	r3, r2
 8004e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	2b10      	cmp	r3, #16
 8004e1c:	d156      	bne.n	8004ecc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	212c      	movs	r1, #44	; 0x2c
 8004e24:	fb01 f303 	mul.w	r3, r1, r3
 8004e28:	4413      	add	r3, r2
 8004e2a:	333f      	adds	r3, #63	; 0x3f
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	2b03      	cmp	r3, #3
 8004e30:	d111      	bne.n	8004e56 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	212c      	movs	r1, #44	; 0x2c
 8004e38:	fb01 f303 	mul.w	r3, r1, r3
 8004e3c:	4413      	add	r3, r2
 8004e3e:	335c      	adds	r3, #92	; 0x5c
 8004e40:	2200      	movs	r2, #0
 8004e42:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	b2d2      	uxtb	r2, r2
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f003 fe25 	bl	8008a9e <USB_HC_Halt>
 8004e54:	e031      	b.n	8004eba <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	212c      	movs	r1, #44	; 0x2c
 8004e5c:	fb01 f303 	mul.w	r3, r1, r3
 8004e60:	4413      	add	r3, r2
 8004e62:	333f      	adds	r3, #63	; 0x3f
 8004e64:	781b      	ldrb	r3, [r3, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d009      	beq.n	8004e7e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	212c      	movs	r1, #44	; 0x2c
 8004e70:	fb01 f303 	mul.w	r3, r1, r3
 8004e74:	4413      	add	r3, r2
 8004e76:	333f      	adds	r3, #63	; 0x3f
 8004e78:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d11d      	bne.n	8004eba <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004e7e:	687a      	ldr	r2, [r7, #4]
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	212c      	movs	r1, #44	; 0x2c
 8004e84:	fb01 f303 	mul.w	r3, r1, r3
 8004e88:	4413      	add	r3, r2
 8004e8a:	335c      	adds	r3, #92	; 0x5c
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d110      	bne.n	8004eba <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	212c      	movs	r1, #44	; 0x2c
 8004e9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ea2:	4413      	add	r3, r2
 8004ea4:	3361      	adds	r3, #97	; 0x61
 8004ea6:	2203      	movs	r2, #3
 8004ea8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	4611      	mov	r1, r2
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	f003 fdf2 	bl	8008a9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	2310      	movs	r3, #16
 8004eca:	6093      	str	r3, [r2, #8]
}
 8004ecc:	bf00      	nop
 8004ece:	3718      	adds	r7, #24
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b088      	sub	sp, #32
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
 8004edc:	460b      	mov	r3, r1
 8004ede:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004eea:	78fb      	ldrb	r3, [r7, #3]
 8004eec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b04      	cmp	r3, #4
 8004f02:	d11a      	bne.n	8004f3a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004f04:	697b      	ldr	r3, [r7, #20]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f10:	461a      	mov	r2, r3
 8004f12:	2304      	movs	r3, #4
 8004f14:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	212c      	movs	r1, #44	; 0x2c
 8004f1c:	fb01 f303 	mul.w	r3, r1, r3
 8004f20:	4413      	add	r3, r2
 8004f22:	3361      	adds	r3, #97	; 0x61
 8004f24:	2206      	movs	r2, #6
 8004f26:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	697a      	ldr	r2, [r7, #20]
 8004f2e:	b2d2      	uxtb	r2, r2
 8004f30:	4611      	mov	r1, r2
 8004f32:	4618      	mov	r0, r3
 8004f34:	f003 fdb3 	bl	8008a9e <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8004f38:	e331      	b.n	800559e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	015a      	lsls	r2, r3, #5
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	4413      	add	r3, r2
 8004f42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f003 0320 	and.w	r3, r3, #32
 8004f4c:	2b20      	cmp	r3, #32
 8004f4e:	d12e      	bne.n	8004fae <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	69bb      	ldr	r3, [r7, #24]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	2320      	movs	r3, #32
 8004f60:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8004f62:	687a      	ldr	r2, [r7, #4]
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	212c      	movs	r1, #44	; 0x2c
 8004f68:	fb01 f303 	mul.w	r3, r1, r3
 8004f6c:	4413      	add	r3, r2
 8004f6e:	333d      	adds	r3, #61	; 0x3d
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	f040 8313 	bne.w	800559e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	212c      	movs	r1, #44	; 0x2c
 8004f7e:	fb01 f303 	mul.w	r3, r1, r3
 8004f82:	4413      	add	r3, r2
 8004f84:	333d      	adds	r3, #61	; 0x3d
 8004f86:	2200      	movs	r2, #0
 8004f88:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	212c      	movs	r1, #44	; 0x2c
 8004f90:	fb01 f303 	mul.w	r3, r1, r3
 8004f94:	4413      	add	r3, r2
 8004f96:	3360      	adds	r3, #96	; 0x60
 8004f98:	2202      	movs	r2, #2
 8004f9a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	697a      	ldr	r2, [r7, #20]
 8004fa2:	b2d2      	uxtb	r2, r2
 8004fa4:	4611      	mov	r1, r2
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	f003 fd79 	bl	8008a9e <USB_HC_Halt>
}
 8004fac:	e2f7      	b.n	800559e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	69bb      	ldr	r3, [r7, #24]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fc4:	d112      	bne.n	8004fec <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004fd8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	697a      	ldr	r2, [r7, #20]
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	4611      	mov	r1, r2
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f003 fd5a 	bl	8008a9e <USB_HC_Halt>
}
 8004fea:	e2d8      	b.n	800559e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	69bb      	ldr	r3, [r7, #24]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d140      	bne.n	8005084 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	212c      	movs	r1, #44	; 0x2c
 8005008:	fb01 f303 	mul.w	r3, r1, r3
 800500c:	4413      	add	r3, r2
 800500e:	335c      	adds	r3, #92	; 0x5c
 8005010:	2200      	movs	r2, #0
 8005012:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	015a      	lsls	r2, r3, #5
 8005018:	69bb      	ldr	r3, [r7, #24]
 800501a:	4413      	add	r3, r2
 800501c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005026:	2b40      	cmp	r3, #64	; 0x40
 8005028:	d111      	bne.n	800504e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	212c      	movs	r1, #44	; 0x2c
 8005030:	fb01 f303 	mul.w	r3, r1, r3
 8005034:	4413      	add	r3, r2
 8005036:	333d      	adds	r3, #61	; 0x3d
 8005038:	2201      	movs	r2, #1
 800503a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	4413      	add	r3, r2
 8005044:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005048:	461a      	mov	r2, r3
 800504a:	2340      	movs	r3, #64	; 0x40
 800504c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	015a      	lsls	r2, r3, #5
 8005052:	69bb      	ldr	r3, [r7, #24]
 8005054:	4413      	add	r3, r2
 8005056:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800505a:	461a      	mov	r2, r3
 800505c:	2301      	movs	r3, #1
 800505e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	212c      	movs	r1, #44	; 0x2c
 8005066:	fb01 f303 	mul.w	r3, r1, r3
 800506a:	4413      	add	r3, r2
 800506c:	3361      	adds	r3, #97	; 0x61
 800506e:	2201      	movs	r2, #1
 8005070:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	697a      	ldr	r2, [r7, #20]
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	4611      	mov	r1, r2
 800507c:	4618      	mov	r0, r3
 800507e:	f003 fd0e 	bl	8008a9e <USB_HC_Halt>
}
 8005082:	e28c      	b.n	800559e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	4413      	add	r3, r2
 800508c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005096:	2b40      	cmp	r3, #64	; 0x40
 8005098:	d12c      	bne.n	80050f4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	212c      	movs	r1, #44	; 0x2c
 80050a0:	fb01 f303 	mul.w	r3, r1, r3
 80050a4:	4413      	add	r3, r2
 80050a6:	3361      	adds	r3, #97	; 0x61
 80050a8:	2204      	movs	r2, #4
 80050aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80050ac:	687a      	ldr	r2, [r7, #4]
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	212c      	movs	r1, #44	; 0x2c
 80050b2:	fb01 f303 	mul.w	r3, r1, r3
 80050b6:	4413      	add	r3, r2
 80050b8:	333d      	adds	r3, #61	; 0x3d
 80050ba:	2201      	movs	r2, #1
 80050bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	212c      	movs	r1, #44	; 0x2c
 80050c4:	fb01 f303 	mul.w	r3, r1, r3
 80050c8:	4413      	add	r3, r2
 80050ca:	335c      	adds	r3, #92	; 0x5c
 80050cc:	2200      	movs	r2, #0
 80050ce:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	b2d2      	uxtb	r2, r2
 80050d8:	4611      	mov	r1, r2
 80050da:	4618      	mov	r0, r3
 80050dc:	f003 fcdf 	bl	8008a9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80050e0:	697b      	ldr	r3, [r7, #20]
 80050e2:	015a      	lsls	r2, r3, #5
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	4413      	add	r3, r2
 80050e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80050ec:	461a      	mov	r2, r3
 80050ee:	2340      	movs	r3, #64	; 0x40
 80050f0:	6093      	str	r3, [r2, #8]
}
 80050f2:	e254      	b.n	800559e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f003 0308 	and.w	r3, r3, #8
 8005106:	2b08      	cmp	r3, #8
 8005108:	d11a      	bne.n	8005140 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	4413      	add	r3, r2
 8005112:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005116:	461a      	mov	r2, r3
 8005118:	2308      	movs	r3, #8
 800511a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800511c:	687a      	ldr	r2, [r7, #4]
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	212c      	movs	r1, #44	; 0x2c
 8005122:	fb01 f303 	mul.w	r3, r1, r3
 8005126:	4413      	add	r3, r2
 8005128:	3361      	adds	r3, #97	; 0x61
 800512a:	2205      	movs	r2, #5
 800512c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	b2d2      	uxtb	r2, r2
 8005136:	4611      	mov	r1, r2
 8005138:	4618      	mov	r0, r3
 800513a:	f003 fcb0 	bl	8008a9e <USB_HC_Halt>
}
 800513e:	e22e      	b.n	800559e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	015a      	lsls	r2, r3, #5
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	4413      	add	r3, r2
 8005148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	f003 0310 	and.w	r3, r3, #16
 8005152:	2b10      	cmp	r3, #16
 8005154:	d140      	bne.n	80051d8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	212c      	movs	r1, #44	; 0x2c
 800515c:	fb01 f303 	mul.w	r3, r1, r3
 8005160:	4413      	add	r3, r2
 8005162:	335c      	adds	r3, #92	; 0x5c
 8005164:	2200      	movs	r2, #0
 8005166:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005168:	687a      	ldr	r2, [r7, #4]
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	212c      	movs	r1, #44	; 0x2c
 800516e:	fb01 f303 	mul.w	r3, r1, r3
 8005172:	4413      	add	r3, r2
 8005174:	3361      	adds	r3, #97	; 0x61
 8005176:	2203      	movs	r2, #3
 8005178:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800517a:	687a      	ldr	r2, [r7, #4]
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	212c      	movs	r1, #44	; 0x2c
 8005180:	fb01 f303 	mul.w	r3, r1, r3
 8005184:	4413      	add	r3, r2
 8005186:	333d      	adds	r3, #61	; 0x3d
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d112      	bne.n	80051b4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800518e:	687a      	ldr	r2, [r7, #4]
 8005190:	697b      	ldr	r3, [r7, #20]
 8005192:	212c      	movs	r1, #44	; 0x2c
 8005194:	fb01 f303 	mul.w	r3, r1, r3
 8005198:	4413      	add	r3, r2
 800519a:	333c      	adds	r3, #60	; 0x3c
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d108      	bne.n	80051b4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	212c      	movs	r1, #44	; 0x2c
 80051a8:	fb01 f303 	mul.w	r3, r1, r3
 80051ac:	4413      	add	r3, r2
 80051ae:	333d      	adds	r3, #61	; 0x3d
 80051b0:	2201      	movs	r2, #1
 80051b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	697a      	ldr	r2, [r7, #20]
 80051ba:	b2d2      	uxtb	r2, r2
 80051bc:	4611      	mov	r1, r2
 80051be:	4618      	mov	r0, r3
 80051c0:	f003 fc6d 	bl	8008a9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	69bb      	ldr	r3, [r7, #24]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051d0:	461a      	mov	r2, r3
 80051d2:	2310      	movs	r3, #16
 80051d4:	6093      	str	r3, [r2, #8]
}
 80051d6:	e1e2      	b.n	800559e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051e4:	689b      	ldr	r3, [r3, #8]
 80051e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051ea:	2b80      	cmp	r3, #128	; 0x80
 80051ec:	d164      	bne.n	80052b8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	691b      	ldr	r3, [r3, #16]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d111      	bne.n	800521a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	697b      	ldr	r3, [r7, #20]
 80051fa:	212c      	movs	r1, #44	; 0x2c
 80051fc:	fb01 f303 	mul.w	r3, r1, r3
 8005200:	4413      	add	r3, r2
 8005202:	3361      	adds	r3, #97	; 0x61
 8005204:	2206      	movs	r2, #6
 8005206:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	b2d2      	uxtb	r2, r2
 8005210:	4611      	mov	r1, r2
 8005212:	4618      	mov	r0, r3
 8005214:	f003 fc43 	bl	8008a9e <USB_HC_Halt>
 8005218:	e044      	b.n	80052a4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	212c      	movs	r1, #44	; 0x2c
 8005220:	fb01 f303 	mul.w	r3, r1, r3
 8005224:	4413      	add	r3, r2
 8005226:	335c      	adds	r3, #92	; 0x5c
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	6879      	ldr	r1, [r7, #4]
 800522e:	697b      	ldr	r3, [r7, #20]
 8005230:	202c      	movs	r0, #44	; 0x2c
 8005232:	fb00 f303 	mul.w	r3, r0, r3
 8005236:	440b      	add	r3, r1
 8005238:	335c      	adds	r3, #92	; 0x5c
 800523a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800523c:	687a      	ldr	r2, [r7, #4]
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	212c      	movs	r1, #44	; 0x2c
 8005242:	fb01 f303 	mul.w	r3, r1, r3
 8005246:	4413      	add	r3, r2
 8005248:	335c      	adds	r3, #92	; 0x5c
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b02      	cmp	r3, #2
 800524e:	d920      	bls.n	8005292 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	212c      	movs	r1, #44	; 0x2c
 8005256:	fb01 f303 	mul.w	r3, r1, r3
 800525a:	4413      	add	r3, r2
 800525c:	335c      	adds	r3, #92	; 0x5c
 800525e:	2200      	movs	r2, #0
 8005260:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005262:	687a      	ldr	r2, [r7, #4]
 8005264:	697b      	ldr	r3, [r7, #20]
 8005266:	212c      	movs	r1, #44	; 0x2c
 8005268:	fb01 f303 	mul.w	r3, r1, r3
 800526c:	4413      	add	r3, r2
 800526e:	3360      	adds	r3, #96	; 0x60
 8005270:	2204      	movs	r2, #4
 8005272:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005274:	697b      	ldr	r3, [r7, #20]
 8005276:	b2d9      	uxtb	r1, r3
 8005278:	687a      	ldr	r2, [r7, #4]
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	202c      	movs	r0, #44	; 0x2c
 800527e:	fb00 f303 	mul.w	r3, r0, r3
 8005282:	4413      	add	r3, r2
 8005284:	3360      	adds	r3, #96	; 0x60
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	461a      	mov	r2, r3
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f005 feac 	bl	800afe8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005290:	e008      	b.n	80052a4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005292:	687a      	ldr	r2, [r7, #4]
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	212c      	movs	r1, #44	; 0x2c
 8005298:	fb01 f303 	mul.w	r3, r1, r3
 800529c:	4413      	add	r3, r2
 800529e:	3360      	adds	r3, #96	; 0x60
 80052a0:	2202      	movs	r2, #2
 80052a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	015a      	lsls	r2, r3, #5
 80052a8:	69bb      	ldr	r3, [r7, #24]
 80052aa:	4413      	add	r3, r2
 80052ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052b0:	461a      	mov	r2, r3
 80052b2:	2380      	movs	r3, #128	; 0x80
 80052b4:	6093      	str	r3, [r2, #8]
}
 80052b6:	e172      	b.n	800559e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ce:	d11b      	bne.n	8005308 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80052d0:	687a      	ldr	r2, [r7, #4]
 80052d2:	697b      	ldr	r3, [r7, #20]
 80052d4:	212c      	movs	r1, #44	; 0x2c
 80052d6:	fb01 f303 	mul.w	r3, r1, r3
 80052da:	4413      	add	r3, r2
 80052dc:	3361      	adds	r3, #97	; 0x61
 80052de:	2208      	movs	r2, #8
 80052e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	697a      	ldr	r2, [r7, #20]
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	4611      	mov	r1, r2
 80052ec:	4618      	mov	r0, r3
 80052ee:	f003 fbd6 	bl	8008a9e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fe:	461a      	mov	r2, r3
 8005300:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005304:	6093      	str	r3, [r2, #8]
}
 8005306:	e14a      	b.n	800559e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	015a      	lsls	r2, r3, #5
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	4413      	add	r3, r2
 8005310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005314:	689b      	ldr	r3, [r3, #8]
 8005316:	f003 0302 	and.w	r3, r3, #2
 800531a:	2b02      	cmp	r3, #2
 800531c:	f040 813f 	bne.w	800559e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8005320:	687a      	ldr	r2, [r7, #4]
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	212c      	movs	r1, #44	; 0x2c
 8005326:	fb01 f303 	mul.w	r3, r1, r3
 800532a:	4413      	add	r3, r2
 800532c:	3361      	adds	r3, #97	; 0x61
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d17d      	bne.n	8005430 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005334:	687a      	ldr	r2, [r7, #4]
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	212c      	movs	r1, #44	; 0x2c
 800533a:	fb01 f303 	mul.w	r3, r1, r3
 800533e:	4413      	add	r3, r2
 8005340:	3360      	adds	r3, #96	; 0x60
 8005342:	2201      	movs	r2, #1
 8005344:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005346:	687a      	ldr	r2, [r7, #4]
 8005348:	697b      	ldr	r3, [r7, #20]
 800534a:	212c      	movs	r1, #44	; 0x2c
 800534c:	fb01 f303 	mul.w	r3, r1, r3
 8005350:	4413      	add	r3, r2
 8005352:	333f      	adds	r3, #63	; 0x3f
 8005354:	781b      	ldrb	r3, [r3, #0]
 8005356:	2b02      	cmp	r3, #2
 8005358:	d00a      	beq.n	8005370 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	212c      	movs	r1, #44	; 0x2c
 8005360:	fb01 f303 	mul.w	r3, r1, r3
 8005364:	4413      	add	r3, r2
 8005366:	333f      	adds	r3, #63	; 0x3f
 8005368:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800536a:	2b03      	cmp	r3, #3
 800536c:	f040 8100 	bne.w	8005570 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	691b      	ldr	r3, [r3, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d113      	bne.n	80053a0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	697b      	ldr	r3, [r7, #20]
 800537c:	212c      	movs	r1, #44	; 0x2c
 800537e:	fb01 f303 	mul.w	r3, r1, r3
 8005382:	4413      	add	r3, r2
 8005384:	3355      	adds	r3, #85	; 0x55
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	f083 0301 	eor.w	r3, r3, #1
 800538c:	b2d8      	uxtb	r0, r3
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	697b      	ldr	r3, [r7, #20]
 8005392:	212c      	movs	r1, #44	; 0x2c
 8005394:	fb01 f303 	mul.w	r3, r1, r3
 8005398:	4413      	add	r3, r2
 800539a:	3355      	adds	r3, #85	; 0x55
 800539c:	4602      	mov	r2, r0
 800539e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	f040 80e3 	bne.w	8005570 <HCD_HC_OUT_IRQHandler+0x69c>
 80053aa:	687a      	ldr	r2, [r7, #4]
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	212c      	movs	r1, #44	; 0x2c
 80053b0:	fb01 f303 	mul.w	r3, r1, r3
 80053b4:	4413      	add	r3, r2
 80053b6:	334c      	adds	r3, #76	; 0x4c
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	f000 80d8 	beq.w	8005570 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	212c      	movs	r1, #44	; 0x2c
 80053c6:	fb01 f303 	mul.w	r3, r1, r3
 80053ca:	4413      	add	r3, r2
 80053cc:	334c      	adds	r3, #76	; 0x4c
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	6879      	ldr	r1, [r7, #4]
 80053d2:	697a      	ldr	r2, [r7, #20]
 80053d4:	202c      	movs	r0, #44	; 0x2c
 80053d6:	fb00 f202 	mul.w	r2, r0, r2
 80053da:	440a      	add	r2, r1
 80053dc:	3240      	adds	r2, #64	; 0x40
 80053de:	8812      	ldrh	r2, [r2, #0]
 80053e0:	4413      	add	r3, r2
 80053e2:	3b01      	subs	r3, #1
 80053e4:	6879      	ldr	r1, [r7, #4]
 80053e6:	697a      	ldr	r2, [r7, #20]
 80053e8:	202c      	movs	r0, #44	; 0x2c
 80053ea:	fb00 f202 	mul.w	r2, r0, r2
 80053ee:	440a      	add	r2, r1
 80053f0:	3240      	adds	r2, #64	; 0x40
 80053f2:	8812      	ldrh	r2, [r2, #0]
 80053f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80053f8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	f003 0301 	and.w	r3, r3, #1
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 80b5 	beq.w	8005570 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8005406:	687a      	ldr	r2, [r7, #4]
 8005408:	697b      	ldr	r3, [r7, #20]
 800540a:	212c      	movs	r1, #44	; 0x2c
 800540c:	fb01 f303 	mul.w	r3, r1, r3
 8005410:	4413      	add	r3, r2
 8005412:	3355      	adds	r3, #85	; 0x55
 8005414:	781b      	ldrb	r3, [r3, #0]
 8005416:	f083 0301 	eor.w	r3, r3, #1
 800541a:	b2d8      	uxtb	r0, r3
 800541c:	687a      	ldr	r2, [r7, #4]
 800541e:	697b      	ldr	r3, [r7, #20]
 8005420:	212c      	movs	r1, #44	; 0x2c
 8005422:	fb01 f303 	mul.w	r3, r1, r3
 8005426:	4413      	add	r3, r2
 8005428:	3355      	adds	r3, #85	; 0x55
 800542a:	4602      	mov	r2, r0
 800542c:	701a      	strb	r2, [r3, #0]
 800542e:	e09f      	b.n	8005570 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8005430:	687a      	ldr	r2, [r7, #4]
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	212c      	movs	r1, #44	; 0x2c
 8005436:	fb01 f303 	mul.w	r3, r1, r3
 800543a:	4413      	add	r3, r2
 800543c:	3361      	adds	r3, #97	; 0x61
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	2b03      	cmp	r3, #3
 8005442:	d109      	bne.n	8005458 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	212c      	movs	r1, #44	; 0x2c
 800544a:	fb01 f303 	mul.w	r3, r1, r3
 800544e:	4413      	add	r3, r2
 8005450:	3360      	adds	r3, #96	; 0x60
 8005452:	2202      	movs	r2, #2
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	e08b      	b.n	8005570 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005458:	687a      	ldr	r2, [r7, #4]
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	212c      	movs	r1, #44	; 0x2c
 800545e:	fb01 f303 	mul.w	r3, r1, r3
 8005462:	4413      	add	r3, r2
 8005464:	3361      	adds	r3, #97	; 0x61
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	2b04      	cmp	r3, #4
 800546a:	d109      	bne.n	8005480 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	212c      	movs	r1, #44	; 0x2c
 8005472:	fb01 f303 	mul.w	r3, r1, r3
 8005476:	4413      	add	r3, r2
 8005478:	3360      	adds	r3, #96	; 0x60
 800547a:	2202      	movs	r2, #2
 800547c:	701a      	strb	r2, [r3, #0]
 800547e:	e077      	b.n	8005570 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8005480:	687a      	ldr	r2, [r7, #4]
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	212c      	movs	r1, #44	; 0x2c
 8005486:	fb01 f303 	mul.w	r3, r1, r3
 800548a:	4413      	add	r3, r2
 800548c:	3361      	adds	r3, #97	; 0x61
 800548e:	781b      	ldrb	r3, [r3, #0]
 8005490:	2b05      	cmp	r3, #5
 8005492:	d109      	bne.n	80054a8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8005494:	687a      	ldr	r2, [r7, #4]
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	212c      	movs	r1, #44	; 0x2c
 800549a:	fb01 f303 	mul.w	r3, r1, r3
 800549e:	4413      	add	r3, r2
 80054a0:	3360      	adds	r3, #96	; 0x60
 80054a2:	2205      	movs	r2, #5
 80054a4:	701a      	strb	r2, [r3, #0]
 80054a6:	e063      	b.n	8005570 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	212c      	movs	r1, #44	; 0x2c
 80054ae:	fb01 f303 	mul.w	r3, r1, r3
 80054b2:	4413      	add	r3, r2
 80054b4:	3361      	adds	r3, #97	; 0x61
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b06      	cmp	r3, #6
 80054ba:	d009      	beq.n	80054d0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80054bc:	687a      	ldr	r2, [r7, #4]
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	212c      	movs	r1, #44	; 0x2c
 80054c2:	fb01 f303 	mul.w	r3, r1, r3
 80054c6:	4413      	add	r3, r2
 80054c8:	3361      	adds	r3, #97	; 0x61
 80054ca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80054cc:	2b08      	cmp	r3, #8
 80054ce:	d14f      	bne.n	8005570 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	212c      	movs	r1, #44	; 0x2c
 80054d6:	fb01 f303 	mul.w	r3, r1, r3
 80054da:	4413      	add	r3, r2
 80054dc:	335c      	adds	r3, #92	; 0x5c
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	1c5a      	adds	r2, r3, #1
 80054e2:	6879      	ldr	r1, [r7, #4]
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	202c      	movs	r0, #44	; 0x2c
 80054e8:	fb00 f303 	mul.w	r3, r0, r3
 80054ec:	440b      	add	r3, r1
 80054ee:	335c      	adds	r3, #92	; 0x5c
 80054f0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	212c      	movs	r1, #44	; 0x2c
 80054f8:	fb01 f303 	mul.w	r3, r1, r3
 80054fc:	4413      	add	r3, r2
 80054fe:	335c      	adds	r3, #92	; 0x5c
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b02      	cmp	r3, #2
 8005504:	d912      	bls.n	800552c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	212c      	movs	r1, #44	; 0x2c
 800550c:	fb01 f303 	mul.w	r3, r1, r3
 8005510:	4413      	add	r3, r2
 8005512:	335c      	adds	r3, #92	; 0x5c
 8005514:	2200      	movs	r2, #0
 8005516:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005518:	687a      	ldr	r2, [r7, #4]
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	212c      	movs	r1, #44	; 0x2c
 800551e:	fb01 f303 	mul.w	r3, r1, r3
 8005522:	4413      	add	r3, r2
 8005524:	3360      	adds	r3, #96	; 0x60
 8005526:	2204      	movs	r2, #4
 8005528:	701a      	strb	r2, [r3, #0]
 800552a:	e021      	b.n	8005570 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800552c:	687a      	ldr	r2, [r7, #4]
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	212c      	movs	r1, #44	; 0x2c
 8005532:	fb01 f303 	mul.w	r3, r1, r3
 8005536:	4413      	add	r3, r2
 8005538:	3360      	adds	r3, #96	; 0x60
 800553a:	2202      	movs	r2, #2
 800553c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	69bb      	ldr	r3, [r7, #24]
 8005544:	4413      	add	r3, r2
 8005546:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005554:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800555c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	015a      	lsls	r2, r3, #5
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	4413      	add	r3, r2
 8005566:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800556a:	461a      	mov	r2, r3
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8005570:	697b      	ldr	r3, [r7, #20]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	4413      	add	r3, r2
 8005578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800557c:	461a      	mov	r2, r3
 800557e:	2302      	movs	r3, #2
 8005580:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	b2d9      	uxtb	r1, r3
 8005586:	687a      	ldr	r2, [r7, #4]
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	202c      	movs	r0, #44	; 0x2c
 800558c:	fb00 f303 	mul.w	r3, r0, r3
 8005590:	4413      	add	r3, r2
 8005592:	3360      	adds	r3, #96	; 0x60
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	461a      	mov	r2, r3
 8005598:	6878      	ldr	r0, [r7, #4]
 800559a:	f005 fd25 	bl	800afe8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800559e:	bf00      	nop
 80055a0:	3720      	adds	r7, #32
 80055a2:	46bd      	mov	sp, r7
 80055a4:	bd80      	pop	{r7, pc}

080055a6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80055a6:	b580      	push	{r7, lr}
 80055a8:	b08a      	sub	sp, #40	; 0x28
 80055aa:	af00      	add	r7, sp, #0
 80055ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	6a1b      	ldr	r3, [r3, #32]
 80055be:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f003 030f 	and.w	r3, r3, #15
 80055c6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80055c8:	69fb      	ldr	r3, [r7, #28]
 80055ca:	0c5b      	lsrs	r3, r3, #17
 80055cc:	f003 030f 	and.w	r3, r3, #15
 80055d0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	091b      	lsrs	r3, r3, #4
 80055d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055da:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d004      	beq.n	80055ec <HCD_RXQLVL_IRQHandler+0x46>
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	2b05      	cmp	r3, #5
 80055e6:	f000 80a9 	beq.w	800573c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80055ea:	e0aa      	b.n	8005742 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	f000 80a6 	beq.w	8005740 <HCD_RXQLVL_IRQHandler+0x19a>
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	212c      	movs	r1, #44	; 0x2c
 80055fa:	fb01 f303 	mul.w	r3, r1, r3
 80055fe:	4413      	add	r3, r2
 8005600:	3344      	adds	r3, #68	; 0x44
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 809b 	beq.w	8005740 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800560a:	687a      	ldr	r2, [r7, #4]
 800560c:	69bb      	ldr	r3, [r7, #24]
 800560e:	212c      	movs	r1, #44	; 0x2c
 8005610:	fb01 f303 	mul.w	r3, r1, r3
 8005614:	4413      	add	r3, r2
 8005616:	3350      	adds	r3, #80	; 0x50
 8005618:	681a      	ldr	r2, [r3, #0]
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	441a      	add	r2, r3
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	69bb      	ldr	r3, [r7, #24]
 8005622:	202c      	movs	r0, #44	; 0x2c
 8005624:	fb00 f303 	mul.w	r3, r0, r3
 8005628:	440b      	add	r3, r1
 800562a:	334c      	adds	r3, #76	; 0x4c
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	429a      	cmp	r2, r3
 8005630:	d87a      	bhi.n	8005728 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6818      	ldr	r0, [r3, #0]
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	212c      	movs	r1, #44	; 0x2c
 800563c:	fb01 f303 	mul.w	r3, r1, r3
 8005640:	4413      	add	r3, r2
 8005642:	3344      	adds	r3, #68	; 0x44
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	693a      	ldr	r2, [r7, #16]
 8005648:	b292      	uxth	r2, r2
 800564a:	4619      	mov	r1, r3
 800564c:	f002 fd7e 	bl	800814c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	212c      	movs	r1, #44	; 0x2c
 8005656:	fb01 f303 	mul.w	r3, r1, r3
 800565a:	4413      	add	r3, r2
 800565c:	3344      	adds	r3, #68	; 0x44
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	693b      	ldr	r3, [r7, #16]
 8005662:	441a      	add	r2, r3
 8005664:	6879      	ldr	r1, [r7, #4]
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	202c      	movs	r0, #44	; 0x2c
 800566a:	fb00 f303 	mul.w	r3, r0, r3
 800566e:	440b      	add	r3, r1
 8005670:	3344      	adds	r3, #68	; 0x44
 8005672:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005674:	687a      	ldr	r2, [r7, #4]
 8005676:	69bb      	ldr	r3, [r7, #24]
 8005678:	212c      	movs	r1, #44	; 0x2c
 800567a:	fb01 f303 	mul.w	r3, r1, r3
 800567e:	4413      	add	r3, r2
 8005680:	3350      	adds	r3, #80	; 0x50
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	441a      	add	r2, r3
 8005688:	6879      	ldr	r1, [r7, #4]
 800568a:	69bb      	ldr	r3, [r7, #24]
 800568c:	202c      	movs	r0, #44	; 0x2c
 800568e:	fb00 f303 	mul.w	r3, r0, r3
 8005692:	440b      	add	r3, r1
 8005694:	3350      	adds	r3, #80	; 0x50
 8005696:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005698:	69bb      	ldr	r3, [r7, #24]
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	0cdb      	lsrs	r3, r3, #19
 80056a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80056ac:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	212c      	movs	r1, #44	; 0x2c
 80056b4:	fb01 f303 	mul.w	r3, r1, r3
 80056b8:	4413      	add	r3, r2
 80056ba:	3340      	adds	r3, #64	; 0x40
 80056bc:	881b      	ldrh	r3, [r3, #0]
 80056be:	461a      	mov	r2, r3
 80056c0:	693b      	ldr	r3, [r7, #16]
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d13c      	bne.n	8005740 <HCD_RXQLVL_IRQHandler+0x19a>
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d039      	beq.n	8005740 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	6a3b      	ldr	r3, [r7, #32]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80056e2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80056ea:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	6a3b      	ldr	r3, [r7, #32]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056f8:	461a      	mov	r2, r3
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80056fe:	687a      	ldr	r2, [r7, #4]
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	212c      	movs	r1, #44	; 0x2c
 8005704:	fb01 f303 	mul.w	r3, r1, r3
 8005708:	4413      	add	r3, r2
 800570a:	3354      	adds	r3, #84	; 0x54
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	f083 0301 	eor.w	r3, r3, #1
 8005712:	b2d8      	uxtb	r0, r3
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	212c      	movs	r1, #44	; 0x2c
 800571a:	fb01 f303 	mul.w	r3, r1, r3
 800571e:	4413      	add	r3, r2
 8005720:	3354      	adds	r3, #84	; 0x54
 8005722:	4602      	mov	r2, r0
 8005724:	701a      	strb	r2, [r3, #0]
      break;
 8005726:	e00b      	b.n	8005740 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	212c      	movs	r1, #44	; 0x2c
 800572e:	fb01 f303 	mul.w	r3, r1, r3
 8005732:	4413      	add	r3, r2
 8005734:	3360      	adds	r3, #96	; 0x60
 8005736:	2204      	movs	r2, #4
 8005738:	701a      	strb	r2, [r3, #0]
      break;
 800573a:	e001      	b.n	8005740 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 800573c:	bf00      	nop
 800573e:	e000      	b.n	8005742 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005740:	bf00      	nop
  }
}
 8005742:	bf00      	nop
 8005744:	3728      	adds	r7, #40	; 0x28
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b086      	sub	sp, #24
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800575c:	693b      	ldr	r3, [r7, #16]
 800575e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005776:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f003 0302 	and.w	r3, r3, #2
 800577e:	2b02      	cmp	r3, #2
 8005780:	d10b      	bne.n	800579a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	f003 0301 	and.w	r3, r3, #1
 8005788:	2b01      	cmp	r3, #1
 800578a:	d102      	bne.n	8005792 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f005 fc0f 	bl	800afb0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f043 0302 	orr.w	r3, r3, #2
 8005798:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f003 0308 	and.w	r3, r3, #8
 80057a0:	2b08      	cmp	r3, #8
 80057a2:	d132      	bne.n	800580a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f043 0308 	orr.w	r3, r3, #8
 80057aa:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f003 0304 	and.w	r3, r3, #4
 80057b2:	2b04      	cmp	r3, #4
 80057b4:	d126      	bne.n	8005804 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	699b      	ldr	r3, [r3, #24]
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d113      	bne.n	80057e6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80057c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80057c8:	d106      	bne.n	80057d8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2102      	movs	r1, #2
 80057d0:	4618      	mov	r0, r3
 80057d2:	f002 fe29 	bl	8008428 <USB_InitFSLSPClkSel>
 80057d6:	e011      	b.n	80057fc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2101      	movs	r1, #1
 80057de:	4618      	mov	r0, r3
 80057e0:	f002 fe22 	bl	8008428 <USB_InitFSLSPClkSel>
 80057e4:	e00a      	b.n	80057fc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d106      	bne.n	80057fc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057f4:	461a      	mov	r2, r3
 80057f6:	f64e 2360 	movw	r3, #60000	; 0xea60
 80057fa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80057fc:	6878      	ldr	r0, [r7, #4]
 80057fe:	f005 fc01 	bl	800b004 <HAL_HCD_PortEnabled_Callback>
 8005802:	e002      	b.n	800580a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005804:	6878      	ldr	r0, [r7, #4]
 8005806:	f005 fc0b 	bl	800b020 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f003 0320 	and.w	r3, r3, #32
 8005810:	2b20      	cmp	r3, #32
 8005812:	d103      	bne.n	800581c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	f043 0320 	orr.w	r3, r3, #32
 800581a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800581c:	693b      	ldr	r3, [r7, #16]
 800581e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005822:	461a      	mov	r2, r3
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	6013      	str	r3, [r2, #0]
}
 8005828:	bf00      	nop
 800582a:	3718      	adds	r7, #24
 800582c:	46bd      	mov	sp, r7
 800582e:	bd80      	pop	{r7, pc}

08005830 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005830:	b580      	push	{r7, lr}
 8005832:	b086      	sub	sp, #24
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d101      	bne.n	8005842 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	e267      	b.n	8005d12 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0301 	and.w	r3, r3, #1
 800584a:	2b00      	cmp	r3, #0
 800584c:	d075      	beq.n	800593a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800584e:	4b88      	ldr	r3, [pc, #544]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 030c 	and.w	r3, r3, #12
 8005856:	2b04      	cmp	r3, #4
 8005858:	d00c      	beq.n	8005874 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800585a:	4b85      	ldr	r3, [pc, #532]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005862:	2b08      	cmp	r3, #8
 8005864:	d112      	bne.n	800588c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005866:	4b82      	ldr	r3, [pc, #520]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800586e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005872:	d10b      	bne.n	800588c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005874:	4b7e      	ldr	r3, [pc, #504]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800587c:	2b00      	cmp	r3, #0
 800587e:	d05b      	beq.n	8005938 <HAL_RCC_OscConfig+0x108>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d157      	bne.n	8005938 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e242      	b.n	8005d12 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005894:	d106      	bne.n	80058a4 <HAL_RCC_OscConfig+0x74>
 8005896:	4b76      	ldr	r3, [pc, #472]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	4a75      	ldr	r2, [pc, #468]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 800589c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058a0:	6013      	str	r3, [r2, #0]
 80058a2:	e01d      	b.n	80058e0 <HAL_RCC_OscConfig+0xb0>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80058ac:	d10c      	bne.n	80058c8 <HAL_RCC_OscConfig+0x98>
 80058ae:	4b70      	ldr	r3, [pc, #448]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4a6f      	ldr	r2, [pc, #444]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 80058b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80058b8:	6013      	str	r3, [r2, #0]
 80058ba:	4b6d      	ldr	r3, [pc, #436]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4a6c      	ldr	r2, [pc, #432]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 80058c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80058c4:	6013      	str	r3, [r2, #0]
 80058c6:	e00b      	b.n	80058e0 <HAL_RCC_OscConfig+0xb0>
 80058c8:	4b69      	ldr	r3, [pc, #420]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4a68      	ldr	r2, [pc, #416]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 80058ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80058d2:	6013      	str	r3, [r2, #0]
 80058d4:	4b66      	ldr	r3, [pc, #408]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4a65      	ldr	r2, [pc, #404]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 80058da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80058de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d013      	beq.n	8005910 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058e8:	f7fc fffa 	bl	80028e0 <HAL_GetTick>
 80058ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80058ee:	e008      	b.n	8005902 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80058f0:	f7fc fff6 	bl	80028e0 <HAL_GetTick>
 80058f4:	4602      	mov	r2, r0
 80058f6:	693b      	ldr	r3, [r7, #16]
 80058f8:	1ad3      	subs	r3, r2, r3
 80058fa:	2b64      	cmp	r3, #100	; 0x64
 80058fc:	d901      	bls.n	8005902 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80058fe:	2303      	movs	r3, #3
 8005900:	e207      	b.n	8005d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005902:	4b5b      	ldr	r3, [pc, #364]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800590a:	2b00      	cmp	r3, #0
 800590c:	d0f0      	beq.n	80058f0 <HAL_RCC_OscConfig+0xc0>
 800590e:	e014      	b.n	800593a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005910:	f7fc ffe6 	bl	80028e0 <HAL_GetTick>
 8005914:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005916:	e008      	b.n	800592a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005918:	f7fc ffe2 	bl	80028e0 <HAL_GetTick>
 800591c:	4602      	mov	r2, r0
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	2b64      	cmp	r3, #100	; 0x64
 8005924:	d901      	bls.n	800592a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005926:	2303      	movs	r3, #3
 8005928:	e1f3      	b.n	8005d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800592a:	4b51      	ldr	r3, [pc, #324]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d1f0      	bne.n	8005918 <HAL_RCC_OscConfig+0xe8>
 8005936:	e000      	b.n	800593a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005938:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0302 	and.w	r3, r3, #2
 8005942:	2b00      	cmp	r3, #0
 8005944:	d063      	beq.n	8005a0e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005946:	4b4a      	ldr	r3, [pc, #296]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	f003 030c 	and.w	r3, r3, #12
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00b      	beq.n	800596a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005952:	4b47      	ldr	r3, [pc, #284]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800595a:	2b08      	cmp	r3, #8
 800595c:	d11c      	bne.n	8005998 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800595e:	4b44      	ldr	r3, [pc, #272]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 8005960:	685b      	ldr	r3, [r3, #4]
 8005962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005966:	2b00      	cmp	r3, #0
 8005968:	d116      	bne.n	8005998 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800596a:	4b41      	ldr	r3, [pc, #260]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0302 	and.w	r3, r3, #2
 8005972:	2b00      	cmp	r3, #0
 8005974:	d005      	beq.n	8005982 <HAL_RCC_OscConfig+0x152>
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68db      	ldr	r3, [r3, #12]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d001      	beq.n	8005982 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e1c7      	b.n	8005d12 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005982:	4b3b      	ldr	r3, [pc, #236]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	691b      	ldr	r3, [r3, #16]
 800598e:	00db      	lsls	r3, r3, #3
 8005990:	4937      	ldr	r1, [pc, #220]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 8005992:	4313      	orrs	r3, r2
 8005994:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005996:	e03a      	b.n	8005a0e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68db      	ldr	r3, [r3, #12]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d020      	beq.n	80059e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80059a0:	4b34      	ldr	r3, [pc, #208]	; (8005a74 <HAL_RCC_OscConfig+0x244>)
 80059a2:	2201      	movs	r2, #1
 80059a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059a6:	f7fc ff9b 	bl	80028e0 <HAL_GetTick>
 80059aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ac:	e008      	b.n	80059c0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059ae:	f7fc ff97 	bl	80028e0 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	2b02      	cmp	r3, #2
 80059ba:	d901      	bls.n	80059c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80059bc:	2303      	movs	r3, #3
 80059be:	e1a8      	b.n	8005d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059c0:	4b2b      	ldr	r3, [pc, #172]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	f003 0302 	and.w	r3, r3, #2
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d0f0      	beq.n	80059ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80059cc:	4b28      	ldr	r3, [pc, #160]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	691b      	ldr	r3, [r3, #16]
 80059d8:	00db      	lsls	r3, r3, #3
 80059da:	4925      	ldr	r1, [pc, #148]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 80059dc:	4313      	orrs	r3, r2
 80059de:	600b      	str	r3, [r1, #0]
 80059e0:	e015      	b.n	8005a0e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80059e2:	4b24      	ldr	r3, [pc, #144]	; (8005a74 <HAL_RCC_OscConfig+0x244>)
 80059e4:	2200      	movs	r2, #0
 80059e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80059e8:	f7fc ff7a 	bl	80028e0 <HAL_GetTick>
 80059ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80059ee:	e008      	b.n	8005a02 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80059f0:	f7fc ff76 	bl	80028e0 <HAL_GetTick>
 80059f4:	4602      	mov	r2, r0
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	1ad3      	subs	r3, r2, r3
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d901      	bls.n	8005a02 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80059fe:	2303      	movs	r3, #3
 8005a00:	e187      	b.n	8005d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005a02:	4b1b      	ldr	r3, [pc, #108]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f003 0302 	and.w	r3, r3, #2
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d1f0      	bne.n	80059f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d036      	beq.n	8005a88 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d016      	beq.n	8005a50 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005a22:	4b15      	ldr	r3, [pc, #84]	; (8005a78 <HAL_RCC_OscConfig+0x248>)
 8005a24:	2201      	movs	r2, #1
 8005a26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a28:	f7fc ff5a 	bl	80028e0 <HAL_GetTick>
 8005a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a2e:	e008      	b.n	8005a42 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a30:	f7fc ff56 	bl	80028e0 <HAL_GetTick>
 8005a34:	4602      	mov	r2, r0
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	1ad3      	subs	r3, r2, r3
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	d901      	bls.n	8005a42 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005a3e:	2303      	movs	r3, #3
 8005a40:	e167      	b.n	8005d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005a42:	4b0b      	ldr	r3, [pc, #44]	; (8005a70 <HAL_RCC_OscConfig+0x240>)
 8005a44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a46:	f003 0302 	and.w	r3, r3, #2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d0f0      	beq.n	8005a30 <HAL_RCC_OscConfig+0x200>
 8005a4e:	e01b      	b.n	8005a88 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005a50:	4b09      	ldr	r3, [pc, #36]	; (8005a78 <HAL_RCC_OscConfig+0x248>)
 8005a52:	2200      	movs	r2, #0
 8005a54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005a56:	f7fc ff43 	bl	80028e0 <HAL_GetTick>
 8005a5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a5c:	e00e      	b.n	8005a7c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005a5e:	f7fc ff3f 	bl	80028e0 <HAL_GetTick>
 8005a62:	4602      	mov	r2, r0
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	1ad3      	subs	r3, r2, r3
 8005a68:	2b02      	cmp	r3, #2
 8005a6a:	d907      	bls.n	8005a7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005a6c:	2303      	movs	r3, #3
 8005a6e:	e150      	b.n	8005d12 <HAL_RCC_OscConfig+0x4e2>
 8005a70:	40023800 	.word	0x40023800
 8005a74:	42470000 	.word	0x42470000
 8005a78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005a7c:	4b88      	ldr	r3, [pc, #544]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a80:	f003 0302 	and.w	r3, r3, #2
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1ea      	bne.n	8005a5e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	f003 0304 	and.w	r3, r3, #4
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f000 8097 	beq.w	8005bc4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005a96:	2300      	movs	r3, #0
 8005a98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005a9a:	4b81      	ldr	r3, [pc, #516]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d10f      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	60bb      	str	r3, [r7, #8]
 8005aaa:	4b7d      	ldr	r3, [pc, #500]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aae:	4a7c      	ldr	r2, [pc, #496]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ab4:	6413      	str	r3, [r2, #64]	; 0x40
 8005ab6:	4b7a      	ldr	r3, [pc, #488]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005abe:	60bb      	str	r3, [r7, #8]
 8005ac0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ac6:	4b77      	ldr	r3, [pc, #476]	; (8005ca4 <HAL_RCC_OscConfig+0x474>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d118      	bne.n	8005b04 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005ad2:	4b74      	ldr	r3, [pc, #464]	; (8005ca4 <HAL_RCC_OscConfig+0x474>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	4a73      	ldr	r2, [pc, #460]	; (8005ca4 <HAL_RCC_OscConfig+0x474>)
 8005ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005adc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ade:	f7fc feff 	bl	80028e0 <HAL_GetTick>
 8005ae2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005ae4:	e008      	b.n	8005af8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ae6:	f7fc fefb 	bl	80028e0 <HAL_GetTick>
 8005aea:	4602      	mov	r2, r0
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	1ad3      	subs	r3, r2, r3
 8005af0:	2b02      	cmp	r3, #2
 8005af2:	d901      	bls.n	8005af8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005af4:	2303      	movs	r3, #3
 8005af6:	e10c      	b.n	8005d12 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005af8:	4b6a      	ldr	r3, [pc, #424]	; (8005ca4 <HAL_RCC_OscConfig+0x474>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d0f0      	beq.n	8005ae6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	2b01      	cmp	r3, #1
 8005b0a:	d106      	bne.n	8005b1a <HAL_RCC_OscConfig+0x2ea>
 8005b0c:	4b64      	ldr	r3, [pc, #400]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b10:	4a63      	ldr	r2, [pc, #396]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005b12:	f043 0301 	orr.w	r3, r3, #1
 8005b16:	6713      	str	r3, [r2, #112]	; 0x70
 8005b18:	e01c      	b.n	8005b54 <HAL_RCC_OscConfig+0x324>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	689b      	ldr	r3, [r3, #8]
 8005b1e:	2b05      	cmp	r3, #5
 8005b20:	d10c      	bne.n	8005b3c <HAL_RCC_OscConfig+0x30c>
 8005b22:	4b5f      	ldr	r3, [pc, #380]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b26:	4a5e      	ldr	r2, [pc, #376]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005b28:	f043 0304 	orr.w	r3, r3, #4
 8005b2c:	6713      	str	r3, [r2, #112]	; 0x70
 8005b2e:	4b5c      	ldr	r3, [pc, #368]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005b30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b32:	4a5b      	ldr	r2, [pc, #364]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005b34:	f043 0301 	orr.w	r3, r3, #1
 8005b38:	6713      	str	r3, [r2, #112]	; 0x70
 8005b3a:	e00b      	b.n	8005b54 <HAL_RCC_OscConfig+0x324>
 8005b3c:	4b58      	ldr	r3, [pc, #352]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005b3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b40:	4a57      	ldr	r2, [pc, #348]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005b42:	f023 0301 	bic.w	r3, r3, #1
 8005b46:	6713      	str	r3, [r2, #112]	; 0x70
 8005b48:	4b55      	ldr	r3, [pc, #340]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005b4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b4c:	4a54      	ldr	r2, [pc, #336]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005b4e:	f023 0304 	bic.w	r3, r3, #4
 8005b52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	689b      	ldr	r3, [r3, #8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d015      	beq.n	8005b88 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005b5c:	f7fc fec0 	bl	80028e0 <HAL_GetTick>
 8005b60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b62:	e00a      	b.n	8005b7a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b64:	f7fc febc 	bl	80028e0 <HAL_GetTick>
 8005b68:	4602      	mov	r2, r0
 8005b6a:	693b      	ldr	r3, [r7, #16]
 8005b6c:	1ad3      	subs	r3, r2, r3
 8005b6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d901      	bls.n	8005b7a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005b76:	2303      	movs	r3, #3
 8005b78:	e0cb      	b.n	8005d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b7a:	4b49      	ldr	r3, [pc, #292]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005b7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b7e:	f003 0302 	and.w	r3, r3, #2
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d0ee      	beq.n	8005b64 <HAL_RCC_OscConfig+0x334>
 8005b86:	e014      	b.n	8005bb2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005b88:	f7fc feaa 	bl	80028e0 <HAL_GetTick>
 8005b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005b8e:	e00a      	b.n	8005ba6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005b90:	f7fc fea6 	bl	80028e0 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d901      	bls.n	8005ba6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ba2:	2303      	movs	r3, #3
 8005ba4:	e0b5      	b.n	8005d12 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ba6:	4b3e      	ldr	r3, [pc, #248]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005ba8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005baa:	f003 0302 	and.w	r3, r3, #2
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d1ee      	bne.n	8005b90 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005bb2:	7dfb      	ldrb	r3, [r7, #23]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d105      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005bb8:	4b39      	ldr	r3, [pc, #228]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bbc:	4a38      	ldr	r2, [pc, #224]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005bbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bc2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	699b      	ldr	r3, [r3, #24]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	f000 80a1 	beq.w	8005d10 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005bce:	4b34      	ldr	r3, [pc, #208]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 030c 	and.w	r3, r3, #12
 8005bd6:	2b08      	cmp	r3, #8
 8005bd8:	d05c      	beq.n	8005c94 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	699b      	ldr	r3, [r3, #24]
 8005bde:	2b02      	cmp	r3, #2
 8005be0:	d141      	bne.n	8005c66 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005be2:	4b31      	ldr	r3, [pc, #196]	; (8005ca8 <HAL_RCC_OscConfig+0x478>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005be8:	f7fc fe7a 	bl	80028e0 <HAL_GetTick>
 8005bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bee:	e008      	b.n	8005c02 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005bf0:	f7fc fe76 	bl	80028e0 <HAL_GetTick>
 8005bf4:	4602      	mov	r2, r0
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	1ad3      	subs	r3, r2, r3
 8005bfa:	2b02      	cmp	r3, #2
 8005bfc:	d901      	bls.n	8005c02 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005bfe:	2303      	movs	r3, #3
 8005c00:	e087      	b.n	8005d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c02:	4b27      	ldr	r3, [pc, #156]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1f0      	bne.n	8005bf0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	69da      	ldr	r2, [r3, #28]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	6a1b      	ldr	r3, [r3, #32]
 8005c16:	431a      	orrs	r2, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c1c:	019b      	lsls	r3, r3, #6
 8005c1e:	431a      	orrs	r2, r3
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c24:	085b      	lsrs	r3, r3, #1
 8005c26:	3b01      	subs	r3, #1
 8005c28:	041b      	lsls	r3, r3, #16
 8005c2a:	431a      	orrs	r2, r3
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c30:	061b      	lsls	r3, r3, #24
 8005c32:	491b      	ldr	r1, [pc, #108]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005c34:	4313      	orrs	r3, r2
 8005c36:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005c38:	4b1b      	ldr	r3, [pc, #108]	; (8005ca8 <HAL_RCC_OscConfig+0x478>)
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c3e:	f7fc fe4f 	bl	80028e0 <HAL_GetTick>
 8005c42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c44:	e008      	b.n	8005c58 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c46:	f7fc fe4b 	bl	80028e0 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	2b02      	cmp	r3, #2
 8005c52:	d901      	bls.n	8005c58 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e05c      	b.n	8005d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005c58:	4b11      	ldr	r3, [pc, #68]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d0f0      	beq.n	8005c46 <HAL_RCC_OscConfig+0x416>
 8005c64:	e054      	b.n	8005d10 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c66:	4b10      	ldr	r3, [pc, #64]	; (8005ca8 <HAL_RCC_OscConfig+0x478>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c6c:	f7fc fe38 	bl	80028e0 <HAL_GetTick>
 8005c70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c72:	e008      	b.n	8005c86 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005c74:	f7fc fe34 	bl	80028e0 <HAL_GetTick>
 8005c78:	4602      	mov	r2, r0
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	1ad3      	subs	r3, r2, r3
 8005c7e:	2b02      	cmp	r3, #2
 8005c80:	d901      	bls.n	8005c86 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005c82:	2303      	movs	r3, #3
 8005c84:	e045      	b.n	8005d12 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005c86:	4b06      	ldr	r3, [pc, #24]	; (8005ca0 <HAL_RCC_OscConfig+0x470>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d1f0      	bne.n	8005c74 <HAL_RCC_OscConfig+0x444>
 8005c92:	e03d      	b.n	8005d10 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	d107      	bne.n	8005cac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e038      	b.n	8005d12 <HAL_RCC_OscConfig+0x4e2>
 8005ca0:	40023800 	.word	0x40023800
 8005ca4:	40007000 	.word	0x40007000
 8005ca8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005cac:	4b1b      	ldr	r3, [pc, #108]	; (8005d1c <HAL_RCC_OscConfig+0x4ec>)
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d028      	beq.n	8005d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d121      	bne.n	8005d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d11a      	bne.n	8005d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005cdc:	4013      	ands	r3, r2
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005ce2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d111      	bne.n	8005d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf2:	085b      	lsrs	r3, r3, #1
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005cf8:	429a      	cmp	r2, r3
 8005cfa:	d107      	bne.n	8005d0c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d001      	beq.n	8005d10 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005d10:	2300      	movs	r3, #0
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	bf00      	nop
 8005d1c:	40023800 	.word	0x40023800

08005d20 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b084      	sub	sp, #16
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	e0cc      	b.n	8005ece <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005d34:	4b68      	ldr	r3, [pc, #416]	; (8005ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f003 0307 	and.w	r3, r3, #7
 8005d3c:	683a      	ldr	r2, [r7, #0]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d90c      	bls.n	8005d5c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d42:	4b65      	ldr	r3, [pc, #404]	; (8005ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	b2d2      	uxtb	r2, r2
 8005d48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d4a:	4b63      	ldr	r3, [pc, #396]	; (8005ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	429a      	cmp	r2, r3
 8005d56:	d001      	beq.n	8005d5c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e0b8      	b.n	8005ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d020      	beq.n	8005daa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 0304 	and.w	r3, r3, #4
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d005      	beq.n	8005d80 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005d74:	4b59      	ldr	r3, [pc, #356]	; (8005edc <HAL_RCC_ClockConfig+0x1bc>)
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	4a58      	ldr	r2, [pc, #352]	; (8005edc <HAL_RCC_ClockConfig+0x1bc>)
 8005d7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005d7e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	f003 0308 	and.w	r3, r3, #8
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005d8c:	4b53      	ldr	r3, [pc, #332]	; (8005edc <HAL_RCC_ClockConfig+0x1bc>)
 8005d8e:	689b      	ldr	r3, [r3, #8]
 8005d90:	4a52      	ldr	r2, [pc, #328]	; (8005edc <HAL_RCC_ClockConfig+0x1bc>)
 8005d92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005d96:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d98:	4b50      	ldr	r3, [pc, #320]	; (8005edc <HAL_RCC_ClockConfig+0x1bc>)
 8005d9a:	689b      	ldr	r3, [r3, #8]
 8005d9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	494d      	ldr	r1, [pc, #308]	; (8005edc <HAL_RCC_ClockConfig+0x1bc>)
 8005da6:	4313      	orrs	r3, r2
 8005da8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f003 0301 	and.w	r3, r3, #1
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d044      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2b01      	cmp	r3, #1
 8005dbc:	d107      	bne.n	8005dce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005dbe:	4b47      	ldr	r3, [pc, #284]	; (8005edc <HAL_RCC_ClockConfig+0x1bc>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d119      	bne.n	8005dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e07f      	b.n	8005ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	2b02      	cmp	r3, #2
 8005dd4:	d003      	beq.n	8005dde <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	d107      	bne.n	8005dee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005dde:	4b3f      	ldr	r3, [pc, #252]	; (8005edc <HAL_RCC_ClockConfig+0x1bc>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d109      	bne.n	8005dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e06f      	b.n	8005ece <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005dee:	4b3b      	ldr	r3, [pc, #236]	; (8005edc <HAL_RCC_ClockConfig+0x1bc>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 0302 	and.w	r3, r3, #2
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d101      	bne.n	8005dfe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e067      	b.n	8005ece <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005dfe:	4b37      	ldr	r3, [pc, #220]	; (8005edc <HAL_RCC_ClockConfig+0x1bc>)
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f023 0203 	bic.w	r2, r3, #3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685b      	ldr	r3, [r3, #4]
 8005e0a:	4934      	ldr	r1, [pc, #208]	; (8005edc <HAL_RCC_ClockConfig+0x1bc>)
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005e10:	f7fc fd66 	bl	80028e0 <HAL_GetTick>
 8005e14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e16:	e00a      	b.n	8005e2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e18:	f7fc fd62 	bl	80028e0 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e04f      	b.n	8005ece <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e2e:	4b2b      	ldr	r3, [pc, #172]	; (8005edc <HAL_RCC_ClockConfig+0x1bc>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 020c 	and.w	r2, r3, #12
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d1eb      	bne.n	8005e18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005e40:	4b25      	ldr	r3, [pc, #148]	; (8005ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0307 	and.w	r3, r3, #7
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d20c      	bcs.n	8005e68 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e4e:	4b22      	ldr	r3, [pc, #136]	; (8005ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e50:	683a      	ldr	r2, [r7, #0]
 8005e52:	b2d2      	uxtb	r2, r2
 8005e54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005e56:	4b20      	ldr	r3, [pc, #128]	; (8005ed8 <HAL_RCC_ClockConfig+0x1b8>)
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	683a      	ldr	r2, [r7, #0]
 8005e60:	429a      	cmp	r2, r3
 8005e62:	d001      	beq.n	8005e68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005e64:	2301      	movs	r3, #1
 8005e66:	e032      	b.n	8005ece <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f003 0304 	and.w	r3, r3, #4
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d008      	beq.n	8005e86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005e74:	4b19      	ldr	r3, [pc, #100]	; (8005edc <HAL_RCC_ClockConfig+0x1bc>)
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	4916      	ldr	r1, [pc, #88]	; (8005edc <HAL_RCC_ClockConfig+0x1bc>)
 8005e82:	4313      	orrs	r3, r2
 8005e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0308 	and.w	r3, r3, #8
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d009      	beq.n	8005ea6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005e92:	4b12      	ldr	r3, [pc, #72]	; (8005edc <HAL_RCC_ClockConfig+0x1bc>)
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	490e      	ldr	r1, [pc, #56]	; (8005edc <HAL_RCC_ClockConfig+0x1bc>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005ea6:	f000 f821 	bl	8005eec <HAL_RCC_GetSysClockFreq>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	4b0b      	ldr	r3, [pc, #44]	; (8005edc <HAL_RCC_ClockConfig+0x1bc>)
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	091b      	lsrs	r3, r3, #4
 8005eb2:	f003 030f 	and.w	r3, r3, #15
 8005eb6:	490a      	ldr	r1, [pc, #40]	; (8005ee0 <HAL_RCC_ClockConfig+0x1c0>)
 8005eb8:	5ccb      	ldrb	r3, [r1, r3]
 8005eba:	fa22 f303 	lsr.w	r3, r2, r3
 8005ebe:	4a09      	ldr	r2, [pc, #36]	; (8005ee4 <HAL_RCC_ClockConfig+0x1c4>)
 8005ec0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005ec2:	4b09      	ldr	r3, [pc, #36]	; (8005ee8 <HAL_RCC_ClockConfig+0x1c8>)
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4618      	mov	r0, r3
 8005ec8:	f7fc fcc6 	bl	8002858 <HAL_InitTick>

  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}
 8005ed6:	bf00      	nop
 8005ed8:	40023c00 	.word	0x40023c00
 8005edc:	40023800 	.word	0x40023800
 8005ee0:	0800b6d8 	.word	0x0800b6d8
 8005ee4:	20000000 	.word	0x20000000
 8005ee8:	20000004 	.word	0x20000004

08005eec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005eec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ef0:	b094      	sub	sp, #80	; 0x50
 8005ef2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ef8:	2300      	movs	r3, #0
 8005efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005efc:	2300      	movs	r3, #0
 8005efe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005f00:	2300      	movs	r3, #0
 8005f02:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005f04:	4b79      	ldr	r3, [pc, #484]	; (80060ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f003 030c 	and.w	r3, r3, #12
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d00d      	beq.n	8005f2c <HAL_RCC_GetSysClockFreq+0x40>
 8005f10:	2b08      	cmp	r3, #8
 8005f12:	f200 80e1 	bhi.w	80060d8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d002      	beq.n	8005f20 <HAL_RCC_GetSysClockFreq+0x34>
 8005f1a:	2b04      	cmp	r3, #4
 8005f1c:	d003      	beq.n	8005f26 <HAL_RCC_GetSysClockFreq+0x3a>
 8005f1e:	e0db      	b.n	80060d8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005f20:	4b73      	ldr	r3, [pc, #460]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005f22:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005f24:	e0db      	b.n	80060de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005f26:	4b73      	ldr	r3, [pc, #460]	; (80060f4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005f28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005f2a:	e0d8      	b.n	80060de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005f2c:	4b6f      	ldr	r3, [pc, #444]	; (80060ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f34:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005f36:	4b6d      	ldr	r3, [pc, #436]	; (80060ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d063      	beq.n	800600a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f42:	4b6a      	ldr	r3, [pc, #424]	; (80060ec <HAL_RCC_GetSysClockFreq+0x200>)
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	099b      	lsrs	r3, r3, #6
 8005f48:	2200      	movs	r2, #0
 8005f4a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005f4c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f54:	633b      	str	r3, [r7, #48]	; 0x30
 8005f56:	2300      	movs	r3, #0
 8005f58:	637b      	str	r3, [r7, #52]	; 0x34
 8005f5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005f5e:	4622      	mov	r2, r4
 8005f60:	462b      	mov	r3, r5
 8005f62:	f04f 0000 	mov.w	r0, #0
 8005f66:	f04f 0100 	mov.w	r1, #0
 8005f6a:	0159      	lsls	r1, r3, #5
 8005f6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005f70:	0150      	lsls	r0, r2, #5
 8005f72:	4602      	mov	r2, r0
 8005f74:	460b      	mov	r3, r1
 8005f76:	4621      	mov	r1, r4
 8005f78:	1a51      	subs	r1, r2, r1
 8005f7a:	6139      	str	r1, [r7, #16]
 8005f7c:	4629      	mov	r1, r5
 8005f7e:	eb63 0301 	sbc.w	r3, r3, r1
 8005f82:	617b      	str	r3, [r7, #20]
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	f04f 0300 	mov.w	r3, #0
 8005f8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f90:	4659      	mov	r1, fp
 8005f92:	018b      	lsls	r3, r1, #6
 8005f94:	4651      	mov	r1, sl
 8005f96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005f9a:	4651      	mov	r1, sl
 8005f9c:	018a      	lsls	r2, r1, #6
 8005f9e:	4651      	mov	r1, sl
 8005fa0:	ebb2 0801 	subs.w	r8, r2, r1
 8005fa4:	4659      	mov	r1, fp
 8005fa6:	eb63 0901 	sbc.w	r9, r3, r1
 8005faa:	f04f 0200 	mov.w	r2, #0
 8005fae:	f04f 0300 	mov.w	r3, #0
 8005fb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fbe:	4690      	mov	r8, r2
 8005fc0:	4699      	mov	r9, r3
 8005fc2:	4623      	mov	r3, r4
 8005fc4:	eb18 0303 	adds.w	r3, r8, r3
 8005fc8:	60bb      	str	r3, [r7, #8]
 8005fca:	462b      	mov	r3, r5
 8005fcc:	eb49 0303 	adc.w	r3, r9, r3
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	f04f 0200 	mov.w	r2, #0
 8005fd6:	f04f 0300 	mov.w	r3, #0
 8005fda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005fde:	4629      	mov	r1, r5
 8005fe0:	024b      	lsls	r3, r1, #9
 8005fe2:	4621      	mov	r1, r4
 8005fe4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005fe8:	4621      	mov	r1, r4
 8005fea:	024a      	lsls	r2, r1, #9
 8005fec:	4610      	mov	r0, r2
 8005fee:	4619      	mov	r1, r3
 8005ff0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ff6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ff8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ffc:	f7fa fd3a 	bl	8000a74 <__aeabi_uldivmod>
 8006000:	4602      	mov	r2, r0
 8006002:	460b      	mov	r3, r1
 8006004:	4613      	mov	r3, r2
 8006006:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006008:	e058      	b.n	80060bc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800600a:	4b38      	ldr	r3, [pc, #224]	; (80060ec <HAL_RCC_GetSysClockFreq+0x200>)
 800600c:	685b      	ldr	r3, [r3, #4]
 800600e:	099b      	lsrs	r3, r3, #6
 8006010:	2200      	movs	r2, #0
 8006012:	4618      	mov	r0, r3
 8006014:	4611      	mov	r1, r2
 8006016:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800601a:	623b      	str	r3, [r7, #32]
 800601c:	2300      	movs	r3, #0
 800601e:	627b      	str	r3, [r7, #36]	; 0x24
 8006020:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006024:	4642      	mov	r2, r8
 8006026:	464b      	mov	r3, r9
 8006028:	f04f 0000 	mov.w	r0, #0
 800602c:	f04f 0100 	mov.w	r1, #0
 8006030:	0159      	lsls	r1, r3, #5
 8006032:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006036:	0150      	lsls	r0, r2, #5
 8006038:	4602      	mov	r2, r0
 800603a:	460b      	mov	r3, r1
 800603c:	4641      	mov	r1, r8
 800603e:	ebb2 0a01 	subs.w	sl, r2, r1
 8006042:	4649      	mov	r1, r9
 8006044:	eb63 0b01 	sbc.w	fp, r3, r1
 8006048:	f04f 0200 	mov.w	r2, #0
 800604c:	f04f 0300 	mov.w	r3, #0
 8006050:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006054:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006058:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800605c:	ebb2 040a 	subs.w	r4, r2, sl
 8006060:	eb63 050b 	sbc.w	r5, r3, fp
 8006064:	f04f 0200 	mov.w	r2, #0
 8006068:	f04f 0300 	mov.w	r3, #0
 800606c:	00eb      	lsls	r3, r5, #3
 800606e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006072:	00e2      	lsls	r2, r4, #3
 8006074:	4614      	mov	r4, r2
 8006076:	461d      	mov	r5, r3
 8006078:	4643      	mov	r3, r8
 800607a:	18e3      	adds	r3, r4, r3
 800607c:	603b      	str	r3, [r7, #0]
 800607e:	464b      	mov	r3, r9
 8006080:	eb45 0303 	adc.w	r3, r5, r3
 8006084:	607b      	str	r3, [r7, #4]
 8006086:	f04f 0200 	mov.w	r2, #0
 800608a:	f04f 0300 	mov.w	r3, #0
 800608e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006092:	4629      	mov	r1, r5
 8006094:	028b      	lsls	r3, r1, #10
 8006096:	4621      	mov	r1, r4
 8006098:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800609c:	4621      	mov	r1, r4
 800609e:	028a      	lsls	r2, r1, #10
 80060a0:	4610      	mov	r0, r2
 80060a2:	4619      	mov	r1, r3
 80060a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060a6:	2200      	movs	r2, #0
 80060a8:	61bb      	str	r3, [r7, #24]
 80060aa:	61fa      	str	r2, [r7, #28]
 80060ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80060b0:	f7fa fce0 	bl	8000a74 <__aeabi_uldivmod>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4613      	mov	r3, r2
 80060ba:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80060bc:	4b0b      	ldr	r3, [pc, #44]	; (80060ec <HAL_RCC_GetSysClockFreq+0x200>)
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	0c1b      	lsrs	r3, r3, #16
 80060c2:	f003 0303 	and.w	r3, r3, #3
 80060c6:	3301      	adds	r3, #1
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80060cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80060ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80060d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060d6:	e002      	b.n	80060de <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80060d8:	4b05      	ldr	r3, [pc, #20]	; (80060f0 <HAL_RCC_GetSysClockFreq+0x204>)
 80060da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80060dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80060de:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3750      	adds	r7, #80	; 0x50
 80060e4:	46bd      	mov	sp, r7
 80060e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80060ea:	bf00      	nop
 80060ec:	40023800 	.word	0x40023800
 80060f0:	00f42400 	.word	0x00f42400
 80060f4:	007a1200 	.word	0x007a1200

080060f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2b00      	cmp	r3, #0
 8006104:	d101      	bne.n	800610a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006106:	2301      	movs	r3, #1
 8006108:	e07b      	b.n	8006202 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800610e:	2b00      	cmp	r3, #0
 8006110:	d108      	bne.n	8006124 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800611a:	d009      	beq.n	8006130 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2200      	movs	r2, #0
 8006120:	61da      	str	r2, [r3, #28]
 8006122:	e005      	b.n	8006130 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2200      	movs	r2, #0
 8006128:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b00      	cmp	r3, #0
 8006140:	d106      	bne.n	8006150 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7fc f8c4 	bl	80022d8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2202      	movs	r2, #2
 8006154:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006166:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	689b      	ldr	r3, [r3, #8]
 8006174:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006178:	431a      	orrs	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006182:	431a      	orrs	r2, r3
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	691b      	ldr	r3, [r3, #16]
 8006188:	f003 0302 	and.w	r3, r3, #2
 800618c:	431a      	orrs	r2, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	695b      	ldr	r3, [r3, #20]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	431a      	orrs	r2, r3
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80061a0:	431a      	orrs	r2, r3
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	69db      	ldr	r3, [r3, #28]
 80061a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80061aa:	431a      	orrs	r2, r3
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6a1b      	ldr	r3, [r3, #32]
 80061b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b4:	ea42 0103 	orr.w	r1, r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061bc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	430a      	orrs	r2, r1
 80061c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	0c1b      	lsrs	r3, r3, #16
 80061ce:	f003 0104 	and.w	r1, r3, #4
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061d6:	f003 0210 	and.w	r2, r3, #16
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	69da      	ldr	r2, [r3, #28]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2201      	movs	r2, #1
 80061fc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006200:	2300      	movs	r3, #0
}
 8006202:	4618      	mov	r0, r3
 8006204:	3708      	adds	r7, #8
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}

0800620a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800620a:	b580      	push	{r7, lr}
 800620c:	b082      	sub	sp, #8
 800620e:	af00      	add	r7, sp, #0
 8006210:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006218:	2301      	movs	r3, #1
 800621a:	e041      	b.n	80062a0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b00      	cmp	r3, #0
 8006226:	d106      	bne.n	8006236 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2200      	movs	r2, #0
 800622c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7fc f899 	bl	8002368 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2202      	movs	r2, #2
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681a      	ldr	r2, [r3, #0]
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	3304      	adds	r3, #4
 8006246:	4619      	mov	r1, r3
 8006248:	4610      	mov	r0, r2
 800624a:	f001 f943 	bl	80074d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2201      	movs	r2, #1
 800625a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2201      	movs	r2, #1
 800626a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2201      	movs	r2, #1
 8006272:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2201      	movs	r2, #1
 8006282:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2201      	movs	r2, #1
 800628a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}

080062a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b01      	cmp	r3, #1
 80062ba:	d001      	beq.n	80062c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80062bc:	2301      	movs	r3, #1
 80062be:	e046      	b.n	800634e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a23      	ldr	r2, [pc, #140]	; (800635c <HAL_TIM_Base_Start+0xb4>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d022      	beq.n	8006318 <HAL_TIM_Base_Start+0x70>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062da:	d01d      	beq.n	8006318 <HAL_TIM_Base_Start+0x70>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a1f      	ldr	r2, [pc, #124]	; (8006360 <HAL_TIM_Base_Start+0xb8>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d018      	beq.n	8006318 <HAL_TIM_Base_Start+0x70>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a1e      	ldr	r2, [pc, #120]	; (8006364 <HAL_TIM_Base_Start+0xbc>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d013      	beq.n	8006318 <HAL_TIM_Base_Start+0x70>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a1c      	ldr	r2, [pc, #112]	; (8006368 <HAL_TIM_Base_Start+0xc0>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d00e      	beq.n	8006318 <HAL_TIM_Base_Start+0x70>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a1b      	ldr	r2, [pc, #108]	; (800636c <HAL_TIM_Base_Start+0xc4>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d009      	beq.n	8006318 <HAL_TIM_Base_Start+0x70>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a19      	ldr	r2, [pc, #100]	; (8006370 <HAL_TIM_Base_Start+0xc8>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d004      	beq.n	8006318 <HAL_TIM_Base_Start+0x70>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4a18      	ldr	r2, [pc, #96]	; (8006374 <HAL_TIM_Base_Start+0xcc>)
 8006314:	4293      	cmp	r3, r2
 8006316:	d111      	bne.n	800633c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	f003 0307 	and.w	r3, r3, #7
 8006322:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2b06      	cmp	r3, #6
 8006328:	d010      	beq.n	800634c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f042 0201 	orr.w	r2, r2, #1
 8006338:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800633a:	e007      	b.n	800634c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3714      	adds	r7, #20
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	40010000 	.word	0x40010000
 8006360:	40000400 	.word	0x40000400
 8006364:	40000800 	.word	0x40000800
 8006368:	40000c00 	.word	0x40000c00
 800636c:	40010400 	.word	0x40010400
 8006370:	40014000 	.word	0x40014000
 8006374:	40001800 	.word	0x40001800

08006378 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	6a1a      	ldr	r2, [r3, #32]
 8006386:	f241 1311 	movw	r3, #4369	; 0x1111
 800638a:	4013      	ands	r3, r2
 800638c:	2b00      	cmp	r3, #0
 800638e:	d10f      	bne.n	80063b0 <HAL_TIM_Base_Stop+0x38>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6a1a      	ldr	r2, [r3, #32]
 8006396:	f240 4344 	movw	r3, #1092	; 0x444
 800639a:	4013      	ands	r3, r2
 800639c:	2b00      	cmp	r3, #0
 800639e:	d107      	bne.n	80063b0 <HAL_TIM_Base_Stop+0x38>
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	f022 0201 	bic.w	r2, r2, #1
 80063ae:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80063b8:	2300      	movs	r3, #0
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr
	...

080063c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d6:	b2db      	uxtb	r3, r3
 80063d8:	2b01      	cmp	r3, #1
 80063da:	d001      	beq.n	80063e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063dc:	2301      	movs	r3, #1
 80063de:	e04e      	b.n	800647e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2202      	movs	r2, #2
 80063e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f042 0201 	orr.w	r2, r2, #1
 80063f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a23      	ldr	r2, [pc, #140]	; (800648c <HAL_TIM_Base_Start_IT+0xc4>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d022      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x80>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800640a:	d01d      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x80>
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	4a1f      	ldr	r2, [pc, #124]	; (8006490 <HAL_TIM_Base_Start_IT+0xc8>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d018      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x80>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	4a1e      	ldr	r2, [pc, #120]	; (8006494 <HAL_TIM_Base_Start_IT+0xcc>)
 800641c:	4293      	cmp	r3, r2
 800641e:	d013      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x80>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4a1c      	ldr	r2, [pc, #112]	; (8006498 <HAL_TIM_Base_Start_IT+0xd0>)
 8006426:	4293      	cmp	r3, r2
 8006428:	d00e      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x80>
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a1b      	ldr	r2, [pc, #108]	; (800649c <HAL_TIM_Base_Start_IT+0xd4>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d009      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x80>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	4a19      	ldr	r2, [pc, #100]	; (80064a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800643a:	4293      	cmp	r3, r2
 800643c:	d004      	beq.n	8006448 <HAL_TIM_Base_Start_IT+0x80>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a18      	ldr	r2, [pc, #96]	; (80064a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d111      	bne.n	800646c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 0307 	and.w	r3, r3, #7
 8006452:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	2b06      	cmp	r3, #6
 8006458:	d010      	beq.n	800647c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f042 0201 	orr.w	r2, r2, #1
 8006468:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800646a:	e007      	b.n	800647c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	681a      	ldr	r2, [r3, #0]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f042 0201 	orr.w	r2, r2, #1
 800647a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800647c:	2300      	movs	r3, #0
}
 800647e:	4618      	mov	r0, r3
 8006480:	3714      	adds	r7, #20
 8006482:	46bd      	mov	sp, r7
 8006484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006488:	4770      	bx	lr
 800648a:	bf00      	nop
 800648c:	40010000 	.word	0x40010000
 8006490:	40000400 	.word	0x40000400
 8006494:	40000800 	.word	0x40000800
 8006498:	40000c00 	.word	0x40000c00
 800649c:	40010400 	.word	0x40010400
 80064a0:	40014000 	.word	0x40014000
 80064a4:	40001800 	.word	0x40001800

080064a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d101      	bne.n	80064ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80064b6:	2301      	movs	r3, #1
 80064b8:	e041      	b.n	800653e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064c0:	b2db      	uxtb	r3, r3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d106      	bne.n	80064d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f839 	bl	8006546 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	2202      	movs	r2, #2
 80064d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681a      	ldr	r2, [r3, #0]
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	3304      	adds	r3, #4
 80064e4:	4619      	mov	r1, r3
 80064e6:	4610      	mov	r0, r2
 80064e8:	f000 fff4 	bl	80074d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2201      	movs	r2, #1
 80064f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2201      	movs	r2, #1
 8006500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	2201      	movs	r2, #1
 8006508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2201      	movs	r2, #1
 8006520:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2201      	movs	r2, #1
 8006528:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2201      	movs	r2, #1
 8006530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2201      	movs	r2, #1
 8006538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800653c:	2300      	movs	r3, #0
}
 800653e:	4618      	mov	r0, r3
 8006540:	3708      	adds	r7, #8
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}

08006546 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006546:	b480      	push	{r7}
 8006548:	b083      	sub	sp, #12
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800654e:	bf00      	nop
 8006550:	370c      	adds	r7, #12
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
	...

0800655c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006566:	683b      	ldr	r3, [r7, #0]
 8006568:	2b00      	cmp	r3, #0
 800656a:	d109      	bne.n	8006580 <HAL_TIM_PWM_Start+0x24>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006572:	b2db      	uxtb	r3, r3
 8006574:	2b01      	cmp	r3, #1
 8006576:	bf14      	ite	ne
 8006578:	2301      	movne	r3, #1
 800657a:	2300      	moveq	r3, #0
 800657c:	b2db      	uxtb	r3, r3
 800657e:	e022      	b.n	80065c6 <HAL_TIM_PWM_Start+0x6a>
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	2b04      	cmp	r3, #4
 8006584:	d109      	bne.n	800659a <HAL_TIM_PWM_Start+0x3e>
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800658c:	b2db      	uxtb	r3, r3
 800658e:	2b01      	cmp	r3, #1
 8006590:	bf14      	ite	ne
 8006592:	2301      	movne	r3, #1
 8006594:	2300      	moveq	r3, #0
 8006596:	b2db      	uxtb	r3, r3
 8006598:	e015      	b.n	80065c6 <HAL_TIM_PWM_Start+0x6a>
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b08      	cmp	r3, #8
 800659e:	d109      	bne.n	80065b4 <HAL_TIM_PWM_Start+0x58>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b01      	cmp	r3, #1
 80065aa:	bf14      	ite	ne
 80065ac:	2301      	movne	r3, #1
 80065ae:	2300      	moveq	r3, #0
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	e008      	b.n	80065c6 <HAL_TIM_PWM_Start+0x6a>
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065ba:	b2db      	uxtb	r3, r3
 80065bc:	2b01      	cmp	r3, #1
 80065be:	bf14      	ite	ne
 80065c0:	2301      	movne	r3, #1
 80065c2:	2300      	moveq	r3, #0
 80065c4:	b2db      	uxtb	r3, r3
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d001      	beq.n	80065ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80065ca:	2301      	movs	r3, #1
 80065cc:	e07c      	b.n	80066c8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d104      	bne.n	80065de <HAL_TIM_PWM_Start+0x82>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2202      	movs	r2, #2
 80065d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065dc:	e013      	b.n	8006606 <HAL_TIM_PWM_Start+0xaa>
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	2b04      	cmp	r3, #4
 80065e2:	d104      	bne.n	80065ee <HAL_TIM_PWM_Start+0x92>
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2202      	movs	r2, #2
 80065e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065ec:	e00b      	b.n	8006606 <HAL_TIM_PWM_Start+0xaa>
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	2b08      	cmp	r3, #8
 80065f2:	d104      	bne.n	80065fe <HAL_TIM_PWM_Start+0xa2>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2202      	movs	r2, #2
 80065f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065fc:	e003      	b.n	8006606 <HAL_TIM_PWM_Start+0xaa>
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2202      	movs	r2, #2
 8006602:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	2201      	movs	r2, #1
 800660c:	6839      	ldr	r1, [r7, #0]
 800660e:	4618      	mov	r0, r3
 8006610:	f001 fb74 	bl	8007cfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4a2d      	ldr	r2, [pc, #180]	; (80066d0 <HAL_TIM_PWM_Start+0x174>)
 800661a:	4293      	cmp	r3, r2
 800661c:	d004      	beq.n	8006628 <HAL_TIM_PWM_Start+0xcc>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	4a2c      	ldr	r2, [pc, #176]	; (80066d4 <HAL_TIM_PWM_Start+0x178>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d101      	bne.n	800662c <HAL_TIM_PWM_Start+0xd0>
 8006628:	2301      	movs	r3, #1
 800662a:	e000      	b.n	800662e <HAL_TIM_PWM_Start+0xd2>
 800662c:	2300      	movs	r3, #0
 800662e:	2b00      	cmp	r3, #0
 8006630:	d007      	beq.n	8006642 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006640:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a22      	ldr	r2, [pc, #136]	; (80066d0 <HAL_TIM_PWM_Start+0x174>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d022      	beq.n	8006692 <HAL_TIM_PWM_Start+0x136>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006654:	d01d      	beq.n	8006692 <HAL_TIM_PWM_Start+0x136>
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	4a1f      	ldr	r2, [pc, #124]	; (80066d8 <HAL_TIM_PWM_Start+0x17c>)
 800665c:	4293      	cmp	r3, r2
 800665e:	d018      	beq.n	8006692 <HAL_TIM_PWM_Start+0x136>
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a1d      	ldr	r2, [pc, #116]	; (80066dc <HAL_TIM_PWM_Start+0x180>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d013      	beq.n	8006692 <HAL_TIM_PWM_Start+0x136>
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a1c      	ldr	r2, [pc, #112]	; (80066e0 <HAL_TIM_PWM_Start+0x184>)
 8006670:	4293      	cmp	r3, r2
 8006672:	d00e      	beq.n	8006692 <HAL_TIM_PWM_Start+0x136>
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	4a16      	ldr	r2, [pc, #88]	; (80066d4 <HAL_TIM_PWM_Start+0x178>)
 800667a:	4293      	cmp	r3, r2
 800667c:	d009      	beq.n	8006692 <HAL_TIM_PWM_Start+0x136>
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a18      	ldr	r2, [pc, #96]	; (80066e4 <HAL_TIM_PWM_Start+0x188>)
 8006684:	4293      	cmp	r3, r2
 8006686:	d004      	beq.n	8006692 <HAL_TIM_PWM_Start+0x136>
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a16      	ldr	r2, [pc, #88]	; (80066e8 <HAL_TIM_PWM_Start+0x18c>)
 800668e:	4293      	cmp	r3, r2
 8006690:	d111      	bne.n	80066b6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f003 0307 	and.w	r3, r3, #7
 800669c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	2b06      	cmp	r3, #6
 80066a2:	d010      	beq.n	80066c6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	681a      	ldr	r2, [r3, #0]
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f042 0201 	orr.w	r2, r2, #1
 80066b2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b4:	e007      	b.n	80066c6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	681a      	ldr	r2, [r3, #0]
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f042 0201 	orr.w	r2, r2, #1
 80066c4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066c6:	2300      	movs	r3, #0
}
 80066c8:	4618      	mov	r0, r3
 80066ca:	3710      	adds	r7, #16
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd80      	pop	{r7, pc}
 80066d0:	40010000 	.word	0x40010000
 80066d4:	40010400 	.word	0x40010400
 80066d8:	40000400 	.word	0x40000400
 80066dc:	40000800 	.word	0x40000800
 80066e0:	40000c00 	.word	0x40000c00
 80066e4:	40014000 	.word	0x40014000
 80066e8:	40001800 	.word	0x40001800

080066ec <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b082      	sub	sp, #8
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d101      	bne.n	80066fe <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80066fa:	2301      	movs	r3, #1
 80066fc:	e041      	b.n	8006782 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d106      	bne.n	8006718 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 f839 	bl	800678a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681a      	ldr	r2, [r3, #0]
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	3304      	adds	r3, #4
 8006728:	4619      	mov	r1, r3
 800672a:	4610      	mov	r0, r2
 800672c:	f000 fed2 	bl	80074d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2201      	movs	r2, #1
 8006734:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2201      	movs	r2, #1
 8006754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2201      	movs	r2, #1
 800675c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2201      	movs	r2, #1
 8006764:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2201      	movs	r2, #1
 800676c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2201      	movs	r2, #1
 8006774:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2201      	movs	r2, #1
 800677c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006780:	2300      	movs	r3, #0
}
 8006782:	4618      	mov	r0, r3
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}

0800678a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800678a:	b480      	push	{r7}
 800678c:	b083      	sub	sp, #12
 800678e:	af00      	add	r7, sp, #0
 8006790:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8006792:	bf00      	nop
 8006794:	370c      	adds	r7, #12
 8006796:	46bd      	mov	sp, r7
 8006798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679c:	4770      	bx	lr
	...

080067a0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d104      	bne.n	80067be <HAL_TIM_IC_Start_IT+0x1e>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80067ba:	b2db      	uxtb	r3, r3
 80067bc:	e013      	b.n	80067e6 <HAL_TIM_IC_Start_IT+0x46>
 80067be:	683b      	ldr	r3, [r7, #0]
 80067c0:	2b04      	cmp	r3, #4
 80067c2:	d104      	bne.n	80067ce <HAL_TIM_IC_Start_IT+0x2e>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80067ca:	b2db      	uxtb	r3, r3
 80067cc:	e00b      	b.n	80067e6 <HAL_TIM_IC_Start_IT+0x46>
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b08      	cmp	r3, #8
 80067d2:	d104      	bne.n	80067de <HAL_TIM_IC_Start_IT+0x3e>
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80067da:	b2db      	uxtb	r3, r3
 80067dc:	e003      	b.n	80067e6 <HAL_TIM_IC_Start_IT+0x46>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80067e4:	b2db      	uxtb	r3, r3
 80067e6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d104      	bne.n	80067f8 <HAL_TIM_IC_Start_IT+0x58>
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	e013      	b.n	8006820 <HAL_TIM_IC_Start_IT+0x80>
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	2b04      	cmp	r3, #4
 80067fc:	d104      	bne.n	8006808 <HAL_TIM_IC_Start_IT+0x68>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006804:	b2db      	uxtb	r3, r3
 8006806:	e00b      	b.n	8006820 <HAL_TIM_IC_Start_IT+0x80>
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	2b08      	cmp	r3, #8
 800680c:	d104      	bne.n	8006818 <HAL_TIM_IC_Start_IT+0x78>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006814:	b2db      	uxtb	r3, r3
 8006816:	e003      	b.n	8006820 <HAL_TIM_IC_Start_IT+0x80>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800681e:	b2db      	uxtb	r3, r3
 8006820:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006822:	7bbb      	ldrb	r3, [r7, #14]
 8006824:	2b01      	cmp	r3, #1
 8006826:	d102      	bne.n	800682e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006828:	7b7b      	ldrb	r3, [r7, #13]
 800682a:	2b01      	cmp	r3, #1
 800682c:	d001      	beq.n	8006832 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e0cc      	b.n	80069cc <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d104      	bne.n	8006842 <HAL_TIM_IC_Start_IT+0xa2>
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2202      	movs	r2, #2
 800683c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006840:	e013      	b.n	800686a <HAL_TIM_IC_Start_IT+0xca>
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	2b04      	cmp	r3, #4
 8006846:	d104      	bne.n	8006852 <HAL_TIM_IC_Start_IT+0xb2>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2202      	movs	r2, #2
 800684c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006850:	e00b      	b.n	800686a <HAL_TIM_IC_Start_IT+0xca>
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	2b08      	cmp	r3, #8
 8006856:	d104      	bne.n	8006862 <HAL_TIM_IC_Start_IT+0xc2>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2202      	movs	r2, #2
 800685c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006860:	e003      	b.n	800686a <HAL_TIM_IC_Start_IT+0xca>
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2202      	movs	r2, #2
 8006866:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d104      	bne.n	800687a <HAL_TIM_IC_Start_IT+0xda>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006878:	e013      	b.n	80068a2 <HAL_TIM_IC_Start_IT+0x102>
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	2b04      	cmp	r3, #4
 800687e:	d104      	bne.n	800688a <HAL_TIM_IC_Start_IT+0xea>
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2202      	movs	r2, #2
 8006884:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006888:	e00b      	b.n	80068a2 <HAL_TIM_IC_Start_IT+0x102>
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b08      	cmp	r3, #8
 800688e:	d104      	bne.n	800689a <HAL_TIM_IC_Start_IT+0xfa>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2202      	movs	r2, #2
 8006894:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006898:	e003      	b.n	80068a2 <HAL_TIM_IC_Start_IT+0x102>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2202      	movs	r2, #2
 800689e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b0c      	cmp	r3, #12
 80068a6:	d841      	bhi.n	800692c <HAL_TIM_IC_Start_IT+0x18c>
 80068a8:	a201      	add	r2, pc, #4	; (adr r2, 80068b0 <HAL_TIM_IC_Start_IT+0x110>)
 80068aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068ae:	bf00      	nop
 80068b0:	080068e5 	.word	0x080068e5
 80068b4:	0800692d 	.word	0x0800692d
 80068b8:	0800692d 	.word	0x0800692d
 80068bc:	0800692d 	.word	0x0800692d
 80068c0:	080068f7 	.word	0x080068f7
 80068c4:	0800692d 	.word	0x0800692d
 80068c8:	0800692d 	.word	0x0800692d
 80068cc:	0800692d 	.word	0x0800692d
 80068d0:	08006909 	.word	0x08006909
 80068d4:	0800692d 	.word	0x0800692d
 80068d8:	0800692d 	.word	0x0800692d
 80068dc:	0800692d 	.word	0x0800692d
 80068e0:	0800691b 	.word	0x0800691b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	68da      	ldr	r2, [r3, #12]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f042 0202 	orr.w	r2, r2, #2
 80068f2:	60da      	str	r2, [r3, #12]
      break;
 80068f4:	e01d      	b.n	8006932 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68da      	ldr	r2, [r3, #12]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0204 	orr.w	r2, r2, #4
 8006904:	60da      	str	r2, [r3, #12]
      break;
 8006906:	e014      	b.n	8006932 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	68da      	ldr	r2, [r3, #12]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0208 	orr.w	r2, r2, #8
 8006916:	60da      	str	r2, [r3, #12]
      break;
 8006918:	e00b      	b.n	8006932 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68da      	ldr	r2, [r3, #12]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f042 0210 	orr.w	r2, r2, #16
 8006928:	60da      	str	r2, [r3, #12]
      break;
 800692a:	e002      	b.n	8006932 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	73fb      	strb	r3, [r7, #15]
      break;
 8006930:	bf00      	nop
  }

  if (status == HAL_OK)
 8006932:	7bfb      	ldrb	r3, [r7, #15]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d148      	bne.n	80069ca <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2201      	movs	r2, #1
 800693e:	6839      	ldr	r1, [r7, #0]
 8006940:	4618      	mov	r0, r3
 8006942:	f001 f9db 	bl	8007cfc <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a22      	ldr	r2, [pc, #136]	; (80069d4 <HAL_TIM_IC_Start_IT+0x234>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d022      	beq.n	8006996 <HAL_TIM_IC_Start_IT+0x1f6>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006958:	d01d      	beq.n	8006996 <HAL_TIM_IC_Start_IT+0x1f6>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a1e      	ldr	r2, [pc, #120]	; (80069d8 <HAL_TIM_IC_Start_IT+0x238>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d018      	beq.n	8006996 <HAL_TIM_IC_Start_IT+0x1f6>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a1c      	ldr	r2, [pc, #112]	; (80069dc <HAL_TIM_IC_Start_IT+0x23c>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d013      	beq.n	8006996 <HAL_TIM_IC_Start_IT+0x1f6>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a1b      	ldr	r2, [pc, #108]	; (80069e0 <HAL_TIM_IC_Start_IT+0x240>)
 8006974:	4293      	cmp	r3, r2
 8006976:	d00e      	beq.n	8006996 <HAL_TIM_IC_Start_IT+0x1f6>
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	4a19      	ldr	r2, [pc, #100]	; (80069e4 <HAL_TIM_IC_Start_IT+0x244>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d009      	beq.n	8006996 <HAL_TIM_IC_Start_IT+0x1f6>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	4a18      	ldr	r2, [pc, #96]	; (80069e8 <HAL_TIM_IC_Start_IT+0x248>)
 8006988:	4293      	cmp	r3, r2
 800698a:	d004      	beq.n	8006996 <HAL_TIM_IC_Start_IT+0x1f6>
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a16      	ldr	r2, [pc, #88]	; (80069ec <HAL_TIM_IC_Start_IT+0x24c>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d111      	bne.n	80069ba <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f003 0307 	and.w	r3, r3, #7
 80069a0:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	2b06      	cmp	r3, #6
 80069a6:	d010      	beq.n	80069ca <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681a      	ldr	r2, [r3, #0]
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f042 0201 	orr.w	r2, r2, #1
 80069b6:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80069b8:	e007      	b.n	80069ca <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	681a      	ldr	r2, [r3, #0]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	f042 0201 	orr.w	r2, r2, #1
 80069c8:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80069ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80069cc:	4618      	mov	r0, r3
 80069ce:	3710      	adds	r7, #16
 80069d0:	46bd      	mov	sp, r7
 80069d2:	bd80      	pop	{r7, pc}
 80069d4:	40010000 	.word	0x40010000
 80069d8:	40000400 	.word	0x40000400
 80069dc:	40000800 	.word	0x40000800
 80069e0:	40000c00 	.word	0x40000c00
 80069e4:	40010400 	.word	0x40010400
 80069e8:	40014000 	.word	0x40014000
 80069ec:	40001800 	.word	0x40001800

080069f0 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	6078      	str	r0, [r7, #4]
 80069f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80069fa:	2300      	movs	r3, #0
 80069fc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b0c      	cmp	r3, #12
 8006a02:	d841      	bhi.n	8006a88 <HAL_TIM_IC_Stop_IT+0x98>
 8006a04:	a201      	add	r2, pc, #4	; (adr r2, 8006a0c <HAL_TIM_IC_Stop_IT+0x1c>)
 8006a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0a:	bf00      	nop
 8006a0c:	08006a41 	.word	0x08006a41
 8006a10:	08006a89 	.word	0x08006a89
 8006a14:	08006a89 	.word	0x08006a89
 8006a18:	08006a89 	.word	0x08006a89
 8006a1c:	08006a53 	.word	0x08006a53
 8006a20:	08006a89 	.word	0x08006a89
 8006a24:	08006a89 	.word	0x08006a89
 8006a28:	08006a89 	.word	0x08006a89
 8006a2c:	08006a65 	.word	0x08006a65
 8006a30:	08006a89 	.word	0x08006a89
 8006a34:	08006a89 	.word	0x08006a89
 8006a38:	08006a89 	.word	0x08006a89
 8006a3c:	08006a77 	.word	0x08006a77
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68da      	ldr	r2, [r3, #12]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f022 0202 	bic.w	r2, r2, #2
 8006a4e:	60da      	str	r2, [r3, #12]
      break;
 8006a50:	e01d      	b.n	8006a8e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	68da      	ldr	r2, [r3, #12]
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f022 0204 	bic.w	r2, r2, #4
 8006a60:	60da      	str	r2, [r3, #12]
      break;
 8006a62:	e014      	b.n	8006a8e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68da      	ldr	r2, [r3, #12]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 0208 	bic.w	r2, r2, #8
 8006a72:	60da      	str	r2, [r3, #12]
      break;
 8006a74:	e00b      	b.n	8006a8e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68da      	ldr	r2, [r3, #12]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0210 	bic.w	r2, r2, #16
 8006a84:	60da      	str	r2, [r3, #12]
      break;
 8006a86:	e002      	b.n	8006a8e <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	73fb      	strb	r3, [r7, #15]
      break;
 8006a8c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006a8e:	7bfb      	ldrb	r3, [r7, #15]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d156      	bne.n	8006b42 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	6839      	ldr	r1, [r7, #0]
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f001 f92d 	bl	8007cfc <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	6a1a      	ldr	r2, [r3, #32]
 8006aa8:	f241 1311 	movw	r3, #4369	; 0x1111
 8006aac:	4013      	ands	r3, r2
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d10f      	bne.n	8006ad2 <HAL_TIM_IC_Stop_IT+0xe2>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	6a1a      	ldr	r2, [r3, #32]
 8006ab8:	f240 4344 	movw	r3, #1092	; 0x444
 8006abc:	4013      	ands	r3, r2
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d107      	bne.n	8006ad2 <HAL_TIM_IC_Stop_IT+0xe2>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	681a      	ldr	r2, [r3, #0]
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	f022 0201 	bic.w	r2, r2, #1
 8006ad0:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d104      	bne.n	8006ae2 <HAL_TIM_IC_Stop_IT+0xf2>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2201      	movs	r2, #1
 8006adc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ae0:	e013      	b.n	8006b0a <HAL_TIM_IC_Stop_IT+0x11a>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b04      	cmp	r3, #4
 8006ae6:	d104      	bne.n	8006af2 <HAL_TIM_IC_Stop_IT+0x102>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006af0:	e00b      	b.n	8006b0a <HAL_TIM_IC_Stop_IT+0x11a>
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	2b08      	cmp	r3, #8
 8006af6:	d104      	bne.n	8006b02 <HAL_TIM_IC_Stop_IT+0x112>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	2201      	movs	r2, #1
 8006afc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006b00:	e003      	b.n	8006b0a <HAL_TIM_IC_Stop_IT+0x11a>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	2201      	movs	r2, #1
 8006b06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d104      	bne.n	8006b1a <HAL_TIM_IC_Stop_IT+0x12a>
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2201      	movs	r2, #1
 8006b14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b18:	e013      	b.n	8006b42 <HAL_TIM_IC_Stop_IT+0x152>
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b04      	cmp	r3, #4
 8006b1e:	d104      	bne.n	8006b2a <HAL_TIM_IC_Stop_IT+0x13a>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b28:	e00b      	b.n	8006b42 <HAL_TIM_IC_Stop_IT+0x152>
 8006b2a:	683b      	ldr	r3, [r7, #0]
 8006b2c:	2b08      	cmp	r3, #8
 8006b2e:	d104      	bne.n	8006b3a <HAL_TIM_IC_Stop_IT+0x14a>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2201      	movs	r2, #1
 8006b34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b38:	e003      	b.n	8006b42 <HAL_TIM_IC_Stop_IT+0x152>
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2201      	movs	r2, #1
 8006b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8006b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}

08006b4c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d101      	bne.n	8006b60 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	e097      	b.n	8006c90 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d106      	bne.n	8006b7a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f7fb fc97 	bl	80024a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2202      	movs	r2, #2
 8006b7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	6812      	ldr	r2, [r2, #0]
 8006b8c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006b90:	f023 0307 	bic.w	r3, r3, #7
 8006b94:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	3304      	adds	r3, #4
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	4610      	mov	r0, r2
 8006ba2:	f000 fc97 	bl	80074d4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	6a1b      	ldr	r3, [r3, #32]
 8006bbc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	697a      	ldr	r2, [r7, #20]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006bc8:	693b      	ldr	r3, [r7, #16]
 8006bca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006bce:	f023 0303 	bic.w	r3, r3, #3
 8006bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	689a      	ldr	r2, [r3, #8]
 8006bd8:	683b      	ldr	r3, [r7, #0]
 8006bda:	699b      	ldr	r3, [r3, #24]
 8006bdc:	021b      	lsls	r3, r3, #8
 8006bde:	4313      	orrs	r3, r2
 8006be0:	693a      	ldr	r2, [r7, #16]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006bec:	f023 030c 	bic.w	r3, r3, #12
 8006bf0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006bf8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006bfc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	68da      	ldr	r2, [r3, #12]
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	69db      	ldr	r3, [r3, #28]
 8006c06:	021b      	lsls	r3, r3, #8
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	693a      	ldr	r2, [r7, #16]
 8006c0c:	4313      	orrs	r3, r2
 8006c0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	691b      	ldr	r3, [r3, #16]
 8006c14:	011a      	lsls	r2, r3, #4
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	6a1b      	ldr	r3, [r3, #32]
 8006c1a:	031b      	lsls	r3, r3, #12
 8006c1c:	4313      	orrs	r3, r2
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006c2a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006c32:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	685a      	ldr	r2, [r3, #4]
 8006c38:	683b      	ldr	r3, [r7, #0]
 8006c3a:	695b      	ldr	r3, [r3, #20]
 8006c3c:	011b      	lsls	r3, r3, #4
 8006c3e:	4313      	orrs	r3, r2
 8006c40:	68fa      	ldr	r2, [r7, #12]
 8006c42:	4313      	orrs	r3, r2
 8006c44:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	697a      	ldr	r2, [r7, #20]
 8006c4c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	693a      	ldr	r2, [r7, #16]
 8006c54:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2201      	movs	r2, #1
 8006c62:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2201      	movs	r2, #1
 8006c6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2201      	movs	r2, #1
 8006c7a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2201      	movs	r2, #1
 8006c82:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2201      	movs	r2, #1
 8006c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	3718      	adds	r7, #24
 8006c94:	46bd      	mov	sp, r7
 8006c96:	bd80      	pop	{r7, pc}

08006c98 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006ca8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006cb0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006cb8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006cc0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d110      	bne.n	8006cea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d102      	bne.n	8006cd4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cce:	7b7b      	ldrb	r3, [r7, #13]
 8006cd0:	2b01      	cmp	r3, #1
 8006cd2:	d001      	beq.n	8006cd8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006cd4:	2301      	movs	r3, #1
 8006cd6:	e069      	b.n	8006dac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2202      	movs	r2, #2
 8006cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2202      	movs	r2, #2
 8006ce4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006ce8:	e031      	b.n	8006d4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b04      	cmp	r3, #4
 8006cee:	d110      	bne.n	8006d12 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006cf0:	7bbb      	ldrb	r3, [r7, #14]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d102      	bne.n	8006cfc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006cf6:	7b3b      	ldrb	r3, [r7, #12]
 8006cf8:	2b01      	cmp	r3, #1
 8006cfa:	d001      	beq.n	8006d00 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e055      	b.n	8006dac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2202      	movs	r2, #2
 8006d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2202      	movs	r2, #2
 8006d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006d10:	e01d      	b.n	8006d4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d108      	bne.n	8006d2a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d18:	7bbb      	ldrb	r3, [r7, #14]
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d105      	bne.n	8006d2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006d1e:	7b7b      	ldrb	r3, [r7, #13]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d102      	bne.n	8006d2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006d24:	7b3b      	ldrb	r3, [r7, #12]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d001      	beq.n	8006d2e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e03e      	b.n	8006dac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2202      	movs	r2, #2
 8006d32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2202      	movs	r2, #2
 8006d3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	2202      	movs	r2, #2
 8006d42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2202      	movs	r2, #2
 8006d4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d003      	beq.n	8006d5c <HAL_TIM_Encoder_Start+0xc4>
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	d008      	beq.n	8006d6c <HAL_TIM_Encoder_Start+0xd4>
 8006d5a:	e00f      	b.n	8006d7c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	2201      	movs	r2, #1
 8006d62:	2100      	movs	r1, #0
 8006d64:	4618      	mov	r0, r3
 8006d66:	f000 ffc9 	bl	8007cfc <TIM_CCxChannelCmd>
      break;
 8006d6a:	e016      	b.n	8006d9a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2201      	movs	r2, #1
 8006d72:	2104      	movs	r1, #4
 8006d74:	4618      	mov	r0, r3
 8006d76:	f000 ffc1 	bl	8007cfc <TIM_CCxChannelCmd>
      break;
 8006d7a:	e00e      	b.n	8006d9a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	2201      	movs	r2, #1
 8006d82:	2100      	movs	r1, #0
 8006d84:	4618      	mov	r0, r3
 8006d86:	f000 ffb9 	bl	8007cfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	2104      	movs	r1, #4
 8006d92:	4618      	mov	r0, r3
 8006d94:	f000 ffb2 	bl	8007cfc <TIM_CCxChannelCmd>
      break;
 8006d98:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f042 0201 	orr.w	r2, r2, #1
 8006da8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006daa:	2300      	movs	r3, #0
}
 8006dac:	4618      	mov	r0, r3
 8006dae:	3710      	adds	r7, #16
 8006db0:	46bd      	mov	sp, r7
 8006db2:	bd80      	pop	{r7, pc}

08006db4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b082      	sub	sp, #8
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	691b      	ldr	r3, [r3, #16]
 8006dc2:	f003 0302 	and.w	r3, r3, #2
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d122      	bne.n	8006e10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f003 0302 	and.w	r3, r3, #2
 8006dd4:	2b02      	cmp	r3, #2
 8006dd6:	d11b      	bne.n	8006e10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f06f 0202 	mvn.w	r2, #2
 8006de0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2201      	movs	r2, #1
 8006de6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	f003 0303 	and.w	r3, r3, #3
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d003      	beq.n	8006dfe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7fb f976 	bl	80020e8 <HAL_TIM_IC_CaptureCallback>
 8006dfc:	e005      	b.n	8006e0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fb4a 	bl	8007498 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e04:	6878      	ldr	r0, [r7, #4]
 8006e06:	f000 fb51 	bl	80074ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	691b      	ldr	r3, [r3, #16]
 8006e16:	f003 0304 	and.w	r3, r3, #4
 8006e1a:	2b04      	cmp	r3, #4
 8006e1c:	d122      	bne.n	8006e64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	f003 0304 	and.w	r3, r3, #4
 8006e28:	2b04      	cmp	r3, #4
 8006e2a:	d11b      	bne.n	8006e64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f06f 0204 	mvn.w	r2, #4
 8006e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	2202      	movs	r2, #2
 8006e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f7fb f94c 	bl	80020e8 <HAL_TIM_IC_CaptureCallback>
 8006e50:	e005      	b.n	8006e5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	f000 fb20 	bl	8007498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e58:	6878      	ldr	r0, [r7, #4]
 8006e5a:	f000 fb27 	bl	80074ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2200      	movs	r2, #0
 8006e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	691b      	ldr	r3, [r3, #16]
 8006e6a:	f003 0308 	and.w	r3, r3, #8
 8006e6e:	2b08      	cmp	r3, #8
 8006e70:	d122      	bne.n	8006eb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68db      	ldr	r3, [r3, #12]
 8006e78:	f003 0308 	and.w	r3, r3, #8
 8006e7c:	2b08      	cmp	r3, #8
 8006e7e:	d11b      	bne.n	8006eb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f06f 0208 	mvn.w	r2, #8
 8006e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2204      	movs	r2, #4
 8006e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	69db      	ldr	r3, [r3, #28]
 8006e96:	f003 0303 	and.w	r3, r3, #3
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d003      	beq.n	8006ea6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f7fb f922 	bl	80020e8 <HAL_TIM_IC_CaptureCallback>
 8006ea4:	e005      	b.n	8006eb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 faf6 	bl	8007498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fafd 	bl	80074ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	f003 0310 	and.w	r3, r3, #16
 8006ec2:	2b10      	cmp	r3, #16
 8006ec4:	d122      	bne.n	8006f0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	f003 0310 	and.w	r3, r3, #16
 8006ed0:	2b10      	cmp	r3, #16
 8006ed2:	d11b      	bne.n	8006f0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f06f 0210 	mvn.w	r2, #16
 8006edc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	69db      	ldr	r3, [r3, #28]
 8006eea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d003      	beq.n	8006efa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7fb f8f8 	bl	80020e8 <HAL_TIM_IC_CaptureCallback>
 8006ef8:	e005      	b.n	8006f06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f000 facc 	bl	8007498 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fad3 	bl	80074ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	691b      	ldr	r3, [r3, #16]
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b01      	cmp	r3, #1
 8006f18:	d10e      	bne.n	8006f38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d107      	bne.n	8006f38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f06f 0201 	mvn.w	r2, #1
 8006f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f7fb f89c 	bl	8002070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f42:	2b80      	cmp	r3, #128	; 0x80
 8006f44:	d10e      	bne.n	8006f64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f50:	2b80      	cmp	r3, #128	; 0x80
 8006f52:	d107      	bne.n	8006f64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 ff78 	bl	8007e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	691b      	ldr	r3, [r3, #16]
 8006f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6e:	2b40      	cmp	r3, #64	; 0x40
 8006f70:	d10e      	bne.n	8006f90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	68db      	ldr	r3, [r3, #12]
 8006f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f7c:	2b40      	cmp	r3, #64	; 0x40
 8006f7e:	d107      	bne.n	8006f90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fa98 	bl	80074c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	f003 0320 	and.w	r3, r3, #32
 8006f9a:	2b20      	cmp	r3, #32
 8006f9c:	d10e      	bne.n	8006fbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	68db      	ldr	r3, [r3, #12]
 8006fa4:	f003 0320 	and.w	r3, r3, #32
 8006fa8:	2b20      	cmp	r3, #32
 8006faa:	d107      	bne.n	8006fbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f06f 0220 	mvn.w	r2, #32
 8006fb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 ff42 	bl	8007e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006fbc:	bf00      	nop
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fda:	2b01      	cmp	r3, #1
 8006fdc:	d101      	bne.n	8006fe2 <HAL_TIM_IC_ConfigChannel+0x1e>
 8006fde:	2302      	movs	r3, #2
 8006fe0:	e088      	b.n	80070f4 <HAL_TIM_IC_ConfigChannel+0x130>
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2201      	movs	r2, #1
 8006fe6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d11b      	bne.n	8007028 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6818      	ldr	r0, [r3, #0]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	6819      	ldr	r1, [r3, #0]
 8006ff8:	68bb      	ldr	r3, [r7, #8]
 8006ffa:	685a      	ldr	r2, [r3, #4]
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	68db      	ldr	r3, [r3, #12]
 8007000:	f000 fcb8 	bl	8007974 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	699a      	ldr	r2, [r3, #24]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f022 020c 	bic.w	r2, r2, #12
 8007012:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	6999      	ldr	r1, [r3, #24]
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	689a      	ldr	r2, [r3, #8]
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	430a      	orrs	r2, r1
 8007024:	619a      	str	r2, [r3, #24]
 8007026:	e060      	b.n	80070ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2b04      	cmp	r3, #4
 800702c:	d11c      	bne.n	8007068 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6818      	ldr	r0, [r3, #0]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	6819      	ldr	r1, [r3, #0]
 8007036:	68bb      	ldr	r3, [r7, #8]
 8007038:	685a      	ldr	r2, [r3, #4]
 800703a:	68bb      	ldr	r3, [r7, #8]
 800703c:	68db      	ldr	r3, [r3, #12]
 800703e:	f000 fd3c 	bl	8007aba <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	699a      	ldr	r2, [r3, #24]
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007050:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	6999      	ldr	r1, [r3, #24]
 8007058:	68bb      	ldr	r3, [r7, #8]
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	021a      	lsls	r2, r3, #8
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	619a      	str	r2, [r3, #24]
 8007066:	e040      	b.n	80070ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2b08      	cmp	r3, #8
 800706c:	d11b      	bne.n	80070a6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	6818      	ldr	r0, [r3, #0]
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	6819      	ldr	r1, [r3, #0]
 8007076:	68bb      	ldr	r3, [r7, #8]
 8007078:	685a      	ldr	r2, [r3, #4]
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	f000 fd89 	bl	8007b94 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	69da      	ldr	r2, [r3, #28]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f022 020c 	bic.w	r2, r2, #12
 8007090:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	69d9      	ldr	r1, [r3, #28]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	430a      	orrs	r2, r1
 80070a2:	61da      	str	r2, [r3, #28]
 80070a4:	e021      	b.n	80070ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2b0c      	cmp	r3, #12
 80070aa:	d11c      	bne.n	80070e6 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	6818      	ldr	r0, [r3, #0]
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	6819      	ldr	r1, [r3, #0]
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	68bb      	ldr	r3, [r7, #8]
 80070ba:	68db      	ldr	r3, [r3, #12]
 80070bc:	f000 fda6 	bl	8007c0c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	69da      	ldr	r2, [r3, #28]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80070ce:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	69d9      	ldr	r1, [r3, #28]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	021a      	lsls	r2, r3, #8
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	61da      	str	r2, [r3, #28]
 80070e4:	e001      	b.n	80070ea <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80070f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3718      	adds	r7, #24
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	60f8      	str	r0, [r7, #12]
 8007104:	60b9      	str	r1, [r7, #8]
 8007106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007108:	2300      	movs	r3, #0
 800710a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007112:	2b01      	cmp	r3, #1
 8007114:	d101      	bne.n	800711a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007116:	2302      	movs	r3, #2
 8007118:	e0ae      	b.n	8007278 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	2201      	movs	r2, #1
 800711e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2b0c      	cmp	r3, #12
 8007126:	f200 809f 	bhi.w	8007268 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800712a:	a201      	add	r2, pc, #4	; (adr r2, 8007130 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800712c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007130:	08007165 	.word	0x08007165
 8007134:	08007269 	.word	0x08007269
 8007138:	08007269 	.word	0x08007269
 800713c:	08007269 	.word	0x08007269
 8007140:	080071a5 	.word	0x080071a5
 8007144:	08007269 	.word	0x08007269
 8007148:	08007269 	.word	0x08007269
 800714c:	08007269 	.word	0x08007269
 8007150:	080071e7 	.word	0x080071e7
 8007154:	08007269 	.word	0x08007269
 8007158:	08007269 	.word	0x08007269
 800715c:	08007269 	.word	0x08007269
 8007160:	08007227 	.word	0x08007227
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	68b9      	ldr	r1, [r7, #8]
 800716a:	4618      	mov	r0, r3
 800716c:	f000 fa52 	bl	8007614 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	699a      	ldr	r2, [r3, #24]
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f042 0208 	orr.w	r2, r2, #8
 800717e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	699a      	ldr	r2, [r3, #24]
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f022 0204 	bic.w	r2, r2, #4
 800718e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	6999      	ldr	r1, [r3, #24]
 8007196:	68bb      	ldr	r3, [r7, #8]
 8007198:	691a      	ldr	r2, [r3, #16]
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	430a      	orrs	r2, r1
 80071a0:	619a      	str	r2, [r3, #24]
      break;
 80071a2:	e064      	b.n	800726e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68b9      	ldr	r1, [r7, #8]
 80071aa:	4618      	mov	r0, r3
 80071ac:	f000 faa2 	bl	80076f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	699a      	ldr	r2, [r3, #24]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80071be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	699a      	ldr	r2, [r3, #24]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80071ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	6999      	ldr	r1, [r3, #24]
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	691b      	ldr	r3, [r3, #16]
 80071da:	021a      	lsls	r2, r3, #8
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	430a      	orrs	r2, r1
 80071e2:	619a      	str	r2, [r3, #24]
      break;
 80071e4:	e043      	b.n	800726e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	68b9      	ldr	r1, [r7, #8]
 80071ec:	4618      	mov	r0, r3
 80071ee:	f000 faf7 	bl	80077e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	69da      	ldr	r2, [r3, #28]
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f042 0208 	orr.w	r2, r2, #8
 8007200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	69da      	ldr	r2, [r3, #28]
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	f022 0204 	bic.w	r2, r2, #4
 8007210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	69d9      	ldr	r1, [r3, #28]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	691a      	ldr	r2, [r3, #16]
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	430a      	orrs	r2, r1
 8007222:	61da      	str	r2, [r3, #28]
      break;
 8007224:	e023      	b.n	800726e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	68b9      	ldr	r1, [r7, #8]
 800722c:	4618      	mov	r0, r3
 800722e:	f000 fb4b 	bl	80078c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	69da      	ldr	r2, [r3, #28]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	69da      	ldr	r2, [r3, #28]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	69d9      	ldr	r1, [r3, #28]
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	691b      	ldr	r3, [r3, #16]
 800725c:	021a      	lsls	r2, r3, #8
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	430a      	orrs	r2, r1
 8007264:	61da      	str	r2, [r3, #28]
      break;
 8007266:	e002      	b.n	800726e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007268:	2301      	movs	r3, #1
 800726a:	75fb      	strb	r3, [r7, #23]
      break;
 800726c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007276:	7dfb      	ldrb	r3, [r7, #23]
}
 8007278:	4618      	mov	r0, r3
 800727a:	3718      	adds	r7, #24
 800727c:	46bd      	mov	sp, r7
 800727e:	bd80      	pop	{r7, pc}

08007280 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
 8007288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800728a:	2300      	movs	r3, #0
 800728c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007294:	2b01      	cmp	r3, #1
 8007296:	d101      	bne.n	800729c <HAL_TIM_ConfigClockSource+0x1c>
 8007298:	2302      	movs	r3, #2
 800729a:	e0b4      	b.n	8007406 <HAL_TIM_ConfigClockSource+0x186>
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	2201      	movs	r2, #1
 80072a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	2202      	movs	r2, #2
 80072a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80072ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68ba      	ldr	r2, [r7, #8]
 80072ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072d4:	d03e      	beq.n	8007354 <HAL_TIM_ConfigClockSource+0xd4>
 80072d6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80072da:	f200 8087 	bhi.w	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 80072de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072e2:	f000 8086 	beq.w	80073f2 <HAL_TIM_ConfigClockSource+0x172>
 80072e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80072ea:	d87f      	bhi.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 80072ec:	2b70      	cmp	r3, #112	; 0x70
 80072ee:	d01a      	beq.n	8007326 <HAL_TIM_ConfigClockSource+0xa6>
 80072f0:	2b70      	cmp	r3, #112	; 0x70
 80072f2:	d87b      	bhi.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 80072f4:	2b60      	cmp	r3, #96	; 0x60
 80072f6:	d050      	beq.n	800739a <HAL_TIM_ConfigClockSource+0x11a>
 80072f8:	2b60      	cmp	r3, #96	; 0x60
 80072fa:	d877      	bhi.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 80072fc:	2b50      	cmp	r3, #80	; 0x50
 80072fe:	d03c      	beq.n	800737a <HAL_TIM_ConfigClockSource+0xfa>
 8007300:	2b50      	cmp	r3, #80	; 0x50
 8007302:	d873      	bhi.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 8007304:	2b40      	cmp	r3, #64	; 0x40
 8007306:	d058      	beq.n	80073ba <HAL_TIM_ConfigClockSource+0x13a>
 8007308:	2b40      	cmp	r3, #64	; 0x40
 800730a:	d86f      	bhi.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 800730c:	2b30      	cmp	r3, #48	; 0x30
 800730e:	d064      	beq.n	80073da <HAL_TIM_ConfigClockSource+0x15a>
 8007310:	2b30      	cmp	r3, #48	; 0x30
 8007312:	d86b      	bhi.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 8007314:	2b20      	cmp	r3, #32
 8007316:	d060      	beq.n	80073da <HAL_TIM_ConfigClockSource+0x15a>
 8007318:	2b20      	cmp	r3, #32
 800731a:	d867      	bhi.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
 800731c:	2b00      	cmp	r3, #0
 800731e:	d05c      	beq.n	80073da <HAL_TIM_ConfigClockSource+0x15a>
 8007320:	2b10      	cmp	r3, #16
 8007322:	d05a      	beq.n	80073da <HAL_TIM_ConfigClockSource+0x15a>
 8007324:	e062      	b.n	80073ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6818      	ldr	r0, [r3, #0]
 800732a:	683b      	ldr	r3, [r7, #0]
 800732c:	6899      	ldr	r1, [r3, #8]
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	685a      	ldr	r2, [r3, #4]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	f000 fcc1 	bl	8007cbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007342:	68bb      	ldr	r3, [r7, #8]
 8007344:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007348:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	609a      	str	r2, [r3, #8]
      break;
 8007352:	e04f      	b.n	80073f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6818      	ldr	r0, [r3, #0]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	6899      	ldr	r1, [r3, #8]
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	685a      	ldr	r2, [r3, #4]
 8007360:	683b      	ldr	r3, [r7, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f000 fcaa 	bl	8007cbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689a      	ldr	r2, [r3, #8]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007376:	609a      	str	r2, [r3, #8]
      break;
 8007378:	e03c      	b.n	80073f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	6818      	ldr	r0, [r3, #0]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	6859      	ldr	r1, [r3, #4]
 8007382:	683b      	ldr	r3, [r7, #0]
 8007384:	68db      	ldr	r3, [r3, #12]
 8007386:	461a      	mov	r2, r3
 8007388:	f000 fb68 	bl	8007a5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2150      	movs	r1, #80	; 0x50
 8007392:	4618      	mov	r0, r3
 8007394:	f000 fc77 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 8007398:	e02c      	b.n	80073f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6818      	ldr	r0, [r3, #0]
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	6859      	ldr	r1, [r3, #4]
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	68db      	ldr	r3, [r3, #12]
 80073a6:	461a      	mov	r2, r3
 80073a8:	f000 fbc4 	bl	8007b34 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	2160      	movs	r1, #96	; 0x60
 80073b2:	4618      	mov	r0, r3
 80073b4:	f000 fc67 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 80073b8:	e01c      	b.n	80073f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6818      	ldr	r0, [r3, #0]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	6859      	ldr	r1, [r3, #4]
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	461a      	mov	r2, r3
 80073c8:	f000 fb48 	bl	8007a5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	2140      	movs	r1, #64	; 0x40
 80073d2:	4618      	mov	r0, r3
 80073d4:	f000 fc57 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 80073d8:	e00c      	b.n	80073f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	683b      	ldr	r3, [r7, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	4619      	mov	r1, r3
 80073e4:	4610      	mov	r0, r2
 80073e6:	f000 fc4e 	bl	8007c86 <TIM_ITRx_SetConfig>
      break;
 80073ea:	e003      	b.n	80073f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	73fb      	strb	r3, [r7, #15]
      break;
 80073f0:	e000      	b.n	80073f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80073f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007404:	7bfb      	ldrb	r3, [r7, #15]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007410:	b480      	push	{r7}
 8007412:	b085      	sub	sp, #20
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
 8007418:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 800741a:	2300      	movs	r3, #0
 800741c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b0c      	cmp	r3, #12
 8007422:	d831      	bhi.n	8007488 <HAL_TIM_ReadCapturedValue+0x78>
 8007424:	a201      	add	r2, pc, #4	; (adr r2, 800742c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742a:	bf00      	nop
 800742c:	08007461 	.word	0x08007461
 8007430:	08007489 	.word	0x08007489
 8007434:	08007489 	.word	0x08007489
 8007438:	08007489 	.word	0x08007489
 800743c:	0800746b 	.word	0x0800746b
 8007440:	08007489 	.word	0x08007489
 8007444:	08007489 	.word	0x08007489
 8007448:	08007489 	.word	0x08007489
 800744c:	08007475 	.word	0x08007475
 8007450:	08007489 	.word	0x08007489
 8007454:	08007489 	.word	0x08007489
 8007458:	08007489 	.word	0x08007489
 800745c:	0800747f 	.word	0x0800747f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007466:	60fb      	str	r3, [r7, #12]

      break;
 8007468:	e00f      	b.n	800748a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007470:	60fb      	str	r3, [r7, #12]

      break;
 8007472:	e00a      	b.n	800748a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800747a:	60fb      	str	r3, [r7, #12]

      break;
 800747c:	e005      	b.n	800748a <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007484:	60fb      	str	r3, [r7, #12]

      break;
 8007486:	e000      	b.n	800748a <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007488:	bf00      	nop
  }

  return tmpreg;
 800748a:	68fb      	ldr	r3, [r7, #12]
}
 800748c:	4618      	mov	r0, r3
 800748e:	3714      	adds	r7, #20
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80074a0:	bf00      	nop
 80074a2:	370c      	adds	r7, #12
 80074a4:	46bd      	mov	sp, r7
 80074a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074aa:	4770      	bx	lr

080074ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80074b4:	bf00      	nop
 80074b6:	370c      	adds	r7, #12
 80074b8:	46bd      	mov	sp, r7
 80074ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074be:	4770      	bx	lr

080074c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80074c0:	b480      	push	{r7}
 80074c2:	b083      	sub	sp, #12
 80074c4:	af00      	add	r7, sp, #0
 80074c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80074c8:	bf00      	nop
 80074ca:	370c      	adds	r7, #12
 80074cc:	46bd      	mov	sp, r7
 80074ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d2:	4770      	bx	lr

080074d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80074d4:	b480      	push	{r7}
 80074d6:	b085      	sub	sp, #20
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a40      	ldr	r2, [pc, #256]	; (80075e8 <TIM_Base_SetConfig+0x114>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d013      	beq.n	8007514 <TIM_Base_SetConfig+0x40>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80074f2:	d00f      	beq.n	8007514 <TIM_Base_SetConfig+0x40>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a3d      	ldr	r2, [pc, #244]	; (80075ec <TIM_Base_SetConfig+0x118>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d00b      	beq.n	8007514 <TIM_Base_SetConfig+0x40>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a3c      	ldr	r2, [pc, #240]	; (80075f0 <TIM_Base_SetConfig+0x11c>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d007      	beq.n	8007514 <TIM_Base_SetConfig+0x40>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a3b      	ldr	r2, [pc, #236]	; (80075f4 <TIM_Base_SetConfig+0x120>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d003      	beq.n	8007514 <TIM_Base_SetConfig+0x40>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a3a      	ldr	r2, [pc, #232]	; (80075f8 <TIM_Base_SetConfig+0x124>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d108      	bne.n	8007526 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800751a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	685b      	ldr	r3, [r3, #4]
 8007520:	68fa      	ldr	r2, [r7, #12]
 8007522:	4313      	orrs	r3, r2
 8007524:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	4a2f      	ldr	r2, [pc, #188]	; (80075e8 <TIM_Base_SetConfig+0x114>)
 800752a:	4293      	cmp	r3, r2
 800752c:	d02b      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007534:	d027      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	4a2c      	ldr	r2, [pc, #176]	; (80075ec <TIM_Base_SetConfig+0x118>)
 800753a:	4293      	cmp	r3, r2
 800753c:	d023      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a2b      	ldr	r2, [pc, #172]	; (80075f0 <TIM_Base_SetConfig+0x11c>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d01f      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a2a      	ldr	r2, [pc, #168]	; (80075f4 <TIM_Base_SetConfig+0x120>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d01b      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a29      	ldr	r2, [pc, #164]	; (80075f8 <TIM_Base_SetConfig+0x124>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d017      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a28      	ldr	r2, [pc, #160]	; (80075fc <TIM_Base_SetConfig+0x128>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d013      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a27      	ldr	r2, [pc, #156]	; (8007600 <TIM_Base_SetConfig+0x12c>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d00f      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a26      	ldr	r2, [pc, #152]	; (8007604 <TIM_Base_SetConfig+0x130>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d00b      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a25      	ldr	r2, [pc, #148]	; (8007608 <TIM_Base_SetConfig+0x134>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d007      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a24      	ldr	r2, [pc, #144]	; (800760c <TIM_Base_SetConfig+0x138>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d003      	beq.n	8007586 <TIM_Base_SetConfig+0xb2>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a23      	ldr	r2, [pc, #140]	; (8007610 <TIM_Base_SetConfig+0x13c>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d108      	bne.n	8007598 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800758c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	68fa      	ldr	r2, [r7, #12]
 8007594:	4313      	orrs	r3, r2
 8007596:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800759e:	683b      	ldr	r3, [r7, #0]
 80075a0:	695b      	ldr	r3, [r3, #20]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	68fa      	ldr	r2, [r7, #12]
 80075aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	689a      	ldr	r2, [r3, #8]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80075b4:	683b      	ldr	r3, [r7, #0]
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	4a0a      	ldr	r2, [pc, #40]	; (80075e8 <TIM_Base_SetConfig+0x114>)
 80075c0:	4293      	cmp	r3, r2
 80075c2:	d003      	beq.n	80075cc <TIM_Base_SetConfig+0xf8>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	4a0c      	ldr	r2, [pc, #48]	; (80075f8 <TIM_Base_SetConfig+0x124>)
 80075c8:	4293      	cmp	r3, r2
 80075ca:	d103      	bne.n	80075d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80075cc:	683b      	ldr	r3, [r7, #0]
 80075ce:	691a      	ldr	r2, [r3, #16]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2201      	movs	r2, #1
 80075d8:	615a      	str	r2, [r3, #20]
}
 80075da:	bf00      	nop
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	40010000 	.word	0x40010000
 80075ec:	40000400 	.word	0x40000400
 80075f0:	40000800 	.word	0x40000800
 80075f4:	40000c00 	.word	0x40000c00
 80075f8:	40010400 	.word	0x40010400
 80075fc:	40014000 	.word	0x40014000
 8007600:	40014400 	.word	0x40014400
 8007604:	40014800 	.word	0x40014800
 8007608:	40001800 	.word	0x40001800
 800760c:	40001c00 	.word	0x40001c00
 8007610:	40002000 	.word	0x40002000

08007614 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007614:	b480      	push	{r7}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a1b      	ldr	r3, [r3, #32]
 8007622:	f023 0201 	bic.w	r2, r3, #1
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a1b      	ldr	r3, [r3, #32]
 800762e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	f023 0303 	bic.w	r3, r3, #3
 800764a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	4313      	orrs	r3, r2
 8007654:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007656:	697b      	ldr	r3, [r7, #20]
 8007658:	f023 0302 	bic.w	r3, r3, #2
 800765c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800765e:	683b      	ldr	r3, [r7, #0]
 8007660:	689b      	ldr	r3, [r3, #8]
 8007662:	697a      	ldr	r2, [r7, #20]
 8007664:	4313      	orrs	r3, r2
 8007666:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a20      	ldr	r2, [pc, #128]	; (80076ec <TIM_OC1_SetConfig+0xd8>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d003      	beq.n	8007678 <TIM_OC1_SetConfig+0x64>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a1f      	ldr	r2, [pc, #124]	; (80076f0 <TIM_OC1_SetConfig+0xdc>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d10c      	bne.n	8007692 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	f023 0308 	bic.w	r3, r3, #8
 800767e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	68db      	ldr	r3, [r3, #12]
 8007684:	697a      	ldr	r2, [r7, #20]
 8007686:	4313      	orrs	r3, r2
 8007688:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	f023 0304 	bic.w	r3, r3, #4
 8007690:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	4a15      	ldr	r2, [pc, #84]	; (80076ec <TIM_OC1_SetConfig+0xd8>)
 8007696:	4293      	cmp	r3, r2
 8007698:	d003      	beq.n	80076a2 <TIM_OC1_SetConfig+0x8e>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	4a14      	ldr	r2, [pc, #80]	; (80076f0 <TIM_OC1_SetConfig+0xdc>)
 800769e:	4293      	cmp	r3, r2
 80076a0:	d111      	bne.n	80076c6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076a8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80076b0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80076b2:	683b      	ldr	r3, [r7, #0]
 80076b4:	695b      	ldr	r3, [r3, #20]
 80076b6:	693a      	ldr	r2, [r7, #16]
 80076b8:	4313      	orrs	r3, r2
 80076ba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	699b      	ldr	r3, [r3, #24]
 80076c0:	693a      	ldr	r2, [r7, #16]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	693a      	ldr	r2, [r7, #16]
 80076ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	68fa      	ldr	r2, [r7, #12]
 80076d0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	685a      	ldr	r2, [r3, #4]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	621a      	str	r2, [r3, #32]
}
 80076e0:	bf00      	nop
 80076e2:	371c      	adds	r7, #28
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr
 80076ec:	40010000 	.word	0x40010000
 80076f0:	40010400 	.word	0x40010400

080076f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b087      	sub	sp, #28
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	6a1b      	ldr	r3, [r3, #32]
 8007702:	f023 0210 	bic.w	r2, r3, #16
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	6a1b      	ldr	r3, [r3, #32]
 800770e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	685b      	ldr	r3, [r3, #4]
 8007714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	699b      	ldr	r3, [r3, #24]
 800771a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800772a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800772c:	683b      	ldr	r3, [r7, #0]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	021b      	lsls	r3, r3, #8
 8007732:	68fa      	ldr	r2, [r7, #12]
 8007734:	4313      	orrs	r3, r2
 8007736:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007738:	697b      	ldr	r3, [r7, #20]
 800773a:	f023 0320 	bic.w	r3, r3, #32
 800773e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007740:	683b      	ldr	r3, [r7, #0]
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	011b      	lsls	r3, r3, #4
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	4313      	orrs	r3, r2
 800774a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	4a22      	ldr	r2, [pc, #136]	; (80077d8 <TIM_OC2_SetConfig+0xe4>)
 8007750:	4293      	cmp	r3, r2
 8007752:	d003      	beq.n	800775c <TIM_OC2_SetConfig+0x68>
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4a21      	ldr	r2, [pc, #132]	; (80077dc <TIM_OC2_SetConfig+0xe8>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d10d      	bne.n	8007778 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007764:	683b      	ldr	r3, [r7, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	011b      	lsls	r3, r3, #4
 800776a:	697a      	ldr	r2, [r7, #20]
 800776c:	4313      	orrs	r3, r2
 800776e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007776:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4a17      	ldr	r2, [pc, #92]	; (80077d8 <TIM_OC2_SetConfig+0xe4>)
 800777c:	4293      	cmp	r3, r2
 800777e:	d003      	beq.n	8007788 <TIM_OC2_SetConfig+0x94>
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	4a16      	ldr	r2, [pc, #88]	; (80077dc <TIM_OC2_SetConfig+0xe8>)
 8007784:	4293      	cmp	r3, r2
 8007786:	d113      	bne.n	80077b0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800778e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007796:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	695b      	ldr	r3, [r3, #20]
 800779c:	009b      	lsls	r3, r3, #2
 800779e:	693a      	ldr	r2, [r7, #16]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80077a4:	683b      	ldr	r3, [r7, #0]
 80077a6:	699b      	ldr	r3, [r3, #24]
 80077a8:	009b      	lsls	r3, r3, #2
 80077aa:	693a      	ldr	r2, [r7, #16]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	693a      	ldr	r2, [r7, #16]
 80077b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	68fa      	ldr	r2, [r7, #12]
 80077ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80077bc:	683b      	ldr	r3, [r7, #0]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	697a      	ldr	r2, [r7, #20]
 80077c8:	621a      	str	r2, [r3, #32]
}
 80077ca:	bf00      	nop
 80077cc:	371c      	adds	r7, #28
 80077ce:	46bd      	mov	sp, r7
 80077d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d4:	4770      	bx	lr
 80077d6:	bf00      	nop
 80077d8:	40010000 	.word	0x40010000
 80077dc:	40010400 	.word	0x40010400

080077e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b087      	sub	sp, #28
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6a1b      	ldr	r3, [r3, #32]
 80077ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a1b      	ldr	r3, [r3, #32]
 80077fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	69db      	ldr	r3, [r3, #28]
 8007806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800780e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f023 0303 	bic.w	r3, r3, #3
 8007816:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	68fa      	ldr	r2, [r7, #12]
 800781e:	4313      	orrs	r3, r2
 8007820:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007822:	697b      	ldr	r3, [r7, #20]
 8007824:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007828:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	689b      	ldr	r3, [r3, #8]
 800782e:	021b      	lsls	r3, r3, #8
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	4313      	orrs	r3, r2
 8007834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	4a21      	ldr	r2, [pc, #132]	; (80078c0 <TIM_OC3_SetConfig+0xe0>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d003      	beq.n	8007846 <TIM_OC3_SetConfig+0x66>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a20      	ldr	r2, [pc, #128]	; (80078c4 <TIM_OC3_SetConfig+0xe4>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d10d      	bne.n	8007862 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007846:	697b      	ldr	r3, [r7, #20]
 8007848:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800784c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	021b      	lsls	r3, r3, #8
 8007854:	697a      	ldr	r2, [r7, #20]
 8007856:	4313      	orrs	r3, r2
 8007858:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800785a:	697b      	ldr	r3, [r7, #20]
 800785c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007860:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	4a16      	ldr	r2, [pc, #88]	; (80078c0 <TIM_OC3_SetConfig+0xe0>)
 8007866:	4293      	cmp	r3, r2
 8007868:	d003      	beq.n	8007872 <TIM_OC3_SetConfig+0x92>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4a15      	ldr	r2, [pc, #84]	; (80078c4 <TIM_OC3_SetConfig+0xe4>)
 800786e:	4293      	cmp	r3, r2
 8007870:	d113      	bne.n	800789a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007872:	693b      	ldr	r3, [r7, #16]
 8007874:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007878:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800787a:	693b      	ldr	r3, [r7, #16]
 800787c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007880:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	695b      	ldr	r3, [r3, #20]
 8007886:	011b      	lsls	r3, r3, #4
 8007888:	693a      	ldr	r2, [r7, #16]
 800788a:	4313      	orrs	r3, r2
 800788c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800788e:	683b      	ldr	r3, [r7, #0]
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	011b      	lsls	r3, r3, #4
 8007894:	693a      	ldr	r2, [r7, #16]
 8007896:	4313      	orrs	r3, r2
 8007898:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	693a      	ldr	r2, [r7, #16]
 800789e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	68fa      	ldr	r2, [r7, #12]
 80078a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	685a      	ldr	r2, [r3, #4]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	697a      	ldr	r2, [r7, #20]
 80078b2:	621a      	str	r2, [r3, #32]
}
 80078b4:	bf00      	nop
 80078b6:	371c      	adds	r7, #28
 80078b8:	46bd      	mov	sp, r7
 80078ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078be:	4770      	bx	lr
 80078c0:	40010000 	.word	0x40010000
 80078c4:	40010400 	.word	0x40010400

080078c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80078c8:	b480      	push	{r7}
 80078ca:	b087      	sub	sp, #28
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a1b      	ldr	r3, [r3, #32]
 80078d6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	6a1b      	ldr	r3, [r3, #32]
 80078e2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	69db      	ldr	r3, [r3, #28]
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80078fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	021b      	lsls	r3, r3, #8
 8007906:	68fa      	ldr	r2, [r7, #12]
 8007908:	4313      	orrs	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800790c:	693b      	ldr	r3, [r7, #16]
 800790e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007912:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007914:	683b      	ldr	r3, [r7, #0]
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	031b      	lsls	r3, r3, #12
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	4313      	orrs	r3, r2
 800791e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	4a12      	ldr	r2, [pc, #72]	; (800796c <TIM_OC4_SetConfig+0xa4>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d003      	beq.n	8007930 <TIM_OC4_SetConfig+0x68>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	4a11      	ldr	r2, [pc, #68]	; (8007970 <TIM_OC4_SetConfig+0xa8>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d109      	bne.n	8007944 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007936:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	695b      	ldr	r3, [r3, #20]
 800793c:	019b      	lsls	r3, r3, #6
 800793e:	697a      	ldr	r2, [r7, #20]
 8007940:	4313      	orrs	r3, r2
 8007942:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	697a      	ldr	r2, [r7, #20]
 8007948:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	68fa      	ldr	r2, [r7, #12]
 800794e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	693a      	ldr	r2, [r7, #16]
 800795c:	621a      	str	r2, [r3, #32]
}
 800795e:	bf00      	nop
 8007960:	371c      	adds	r7, #28
 8007962:	46bd      	mov	sp, r7
 8007964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007968:	4770      	bx	lr
 800796a:	bf00      	nop
 800796c:	40010000 	.word	0x40010000
 8007970:	40010400 	.word	0x40010400

08007974 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007974:	b480      	push	{r7}
 8007976:	b087      	sub	sp, #28
 8007978:	af00      	add	r7, sp, #0
 800797a:	60f8      	str	r0, [r7, #12]
 800797c:	60b9      	str	r1, [r7, #8]
 800797e:	607a      	str	r2, [r7, #4]
 8007980:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	6a1b      	ldr	r3, [r3, #32]
 8007986:	f023 0201 	bic.w	r2, r3, #1
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	699b      	ldr	r3, [r3, #24]
 8007992:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	6a1b      	ldr	r3, [r3, #32]
 8007998:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	4a28      	ldr	r2, [pc, #160]	; (8007a40 <TIM_TI1_SetConfig+0xcc>)
 800799e:	4293      	cmp	r3, r2
 80079a0:	d01b      	beq.n	80079da <TIM_TI1_SetConfig+0x66>
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079a8:	d017      	beq.n	80079da <TIM_TI1_SetConfig+0x66>
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	4a25      	ldr	r2, [pc, #148]	; (8007a44 <TIM_TI1_SetConfig+0xd0>)
 80079ae:	4293      	cmp	r3, r2
 80079b0:	d013      	beq.n	80079da <TIM_TI1_SetConfig+0x66>
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	4a24      	ldr	r2, [pc, #144]	; (8007a48 <TIM_TI1_SetConfig+0xd4>)
 80079b6:	4293      	cmp	r3, r2
 80079b8:	d00f      	beq.n	80079da <TIM_TI1_SetConfig+0x66>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	4a23      	ldr	r2, [pc, #140]	; (8007a4c <TIM_TI1_SetConfig+0xd8>)
 80079be:	4293      	cmp	r3, r2
 80079c0:	d00b      	beq.n	80079da <TIM_TI1_SetConfig+0x66>
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	4a22      	ldr	r2, [pc, #136]	; (8007a50 <TIM_TI1_SetConfig+0xdc>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d007      	beq.n	80079da <TIM_TI1_SetConfig+0x66>
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	4a21      	ldr	r2, [pc, #132]	; (8007a54 <TIM_TI1_SetConfig+0xe0>)
 80079ce:	4293      	cmp	r3, r2
 80079d0:	d003      	beq.n	80079da <TIM_TI1_SetConfig+0x66>
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	4a20      	ldr	r2, [pc, #128]	; (8007a58 <TIM_TI1_SetConfig+0xe4>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d101      	bne.n	80079de <TIM_TI1_SetConfig+0x6a>
 80079da:	2301      	movs	r3, #1
 80079dc:	e000      	b.n	80079e0 <TIM_TI1_SetConfig+0x6c>
 80079de:	2300      	movs	r3, #0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d008      	beq.n	80079f6 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	f023 0303 	bic.w	r3, r3, #3
 80079ea:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80079ec:	697a      	ldr	r2, [r7, #20]
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	4313      	orrs	r3, r2
 80079f2:	617b      	str	r3, [r7, #20]
 80079f4:	e003      	b.n	80079fe <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	f043 0301 	orr.w	r3, r3, #1
 80079fc:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007a06:	683b      	ldr	r3, [r7, #0]
 8007a08:	011b      	lsls	r3, r3, #4
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	697a      	ldr	r2, [r7, #20]
 8007a0e:	4313      	orrs	r3, r2
 8007a10:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f023 030a 	bic.w	r3, r3, #10
 8007a18:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	f003 030a 	and.w	r3, r3, #10
 8007a20:	693a      	ldr	r2, [r7, #16]
 8007a22:	4313      	orrs	r3, r2
 8007a24:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	697a      	ldr	r2, [r7, #20]
 8007a2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	693a      	ldr	r2, [r7, #16]
 8007a30:	621a      	str	r2, [r3, #32]
}
 8007a32:	bf00      	nop
 8007a34:	371c      	adds	r7, #28
 8007a36:	46bd      	mov	sp, r7
 8007a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3c:	4770      	bx	lr
 8007a3e:	bf00      	nop
 8007a40:	40010000 	.word	0x40010000
 8007a44:	40000400 	.word	0x40000400
 8007a48:	40000800 	.word	0x40000800
 8007a4c:	40000c00 	.word	0x40000c00
 8007a50:	40010400 	.word	0x40010400
 8007a54:	40014000 	.word	0x40014000
 8007a58:	40001800 	.word	0x40001800

08007a5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b087      	sub	sp, #28
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a1b      	ldr	r3, [r3, #32]
 8007a6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	f023 0201 	bic.w	r2, r3, #1
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a80:	693b      	ldr	r3, [r7, #16]
 8007a82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	011b      	lsls	r3, r3, #4
 8007a8c:	693a      	ldr	r2, [r7, #16]
 8007a8e:	4313      	orrs	r3, r2
 8007a90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	f023 030a 	bic.w	r3, r3, #10
 8007a98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007a9a:	697a      	ldr	r2, [r7, #20]
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	693a      	ldr	r2, [r7, #16]
 8007aa6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	697a      	ldr	r2, [r7, #20]
 8007aac:	621a      	str	r2, [r3, #32]
}
 8007aae:	bf00      	nop
 8007ab0:	371c      	adds	r7, #28
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr

08007aba <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007aba:	b480      	push	{r7}
 8007abc:	b087      	sub	sp, #28
 8007abe:	af00      	add	r7, sp, #0
 8007ac0:	60f8      	str	r0, [r7, #12]
 8007ac2:	60b9      	str	r1, [r7, #8]
 8007ac4:	607a      	str	r2, [r7, #4]
 8007ac6:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	f023 0210 	bic.w	r2, r3, #16
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6a1b      	ldr	r3, [r3, #32]
 8007ade:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007ae0:	697b      	ldr	r3, [r7, #20]
 8007ae2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ae6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	021b      	lsls	r3, r3, #8
 8007aec:	697a      	ldr	r2, [r7, #20]
 8007aee:	4313      	orrs	r3, r2
 8007af0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007af2:	697b      	ldr	r3, [r7, #20]
 8007af4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007af8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007afa:	683b      	ldr	r3, [r7, #0]
 8007afc:	031b      	lsls	r3, r3, #12
 8007afe:	b29b      	uxth	r3, r3
 8007b00:	697a      	ldr	r2, [r7, #20]
 8007b02:	4313      	orrs	r3, r2
 8007b04:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b06:	693b      	ldr	r3, [r7, #16]
 8007b08:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b0c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	011b      	lsls	r3, r3, #4
 8007b12:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8007b16:	693a      	ldr	r2, [r7, #16]
 8007b18:	4313      	orrs	r3, r2
 8007b1a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	693a      	ldr	r2, [r7, #16]
 8007b26:	621a      	str	r2, [r3, #32]
}
 8007b28:	bf00      	nop
 8007b2a:	371c      	adds	r7, #28
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b32:	4770      	bx	lr

08007b34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b34:	b480      	push	{r7}
 8007b36:	b087      	sub	sp, #28
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	6a1b      	ldr	r3, [r3, #32]
 8007b44:	f023 0210 	bic.w	r2, r3, #16
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	699b      	ldr	r3, [r3, #24]
 8007b50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	6a1b      	ldr	r3, [r3, #32]
 8007b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007b5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	031b      	lsls	r3, r3, #12
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	4313      	orrs	r3, r2
 8007b68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b6a:	693b      	ldr	r3, [r7, #16]
 8007b6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007b70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	011b      	lsls	r3, r3, #4
 8007b76:	693a      	ldr	r2, [r7, #16]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	697a      	ldr	r2, [r7, #20]
 8007b80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	693a      	ldr	r2, [r7, #16]
 8007b86:	621a      	str	r2, [r3, #32]
}
 8007b88:	bf00      	nop
 8007b8a:	371c      	adds	r7, #28
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b087      	sub	sp, #28
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	60f8      	str	r0, [r7, #12]
 8007b9c:	60b9      	str	r1, [r7, #8]
 8007b9e:	607a      	str	r2, [r7, #4]
 8007ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	6a1b      	ldr	r3, [r3, #32]
 8007bb8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007bba:	697b      	ldr	r3, [r7, #20]
 8007bbc:	f023 0303 	bic.w	r3, r3, #3
 8007bc0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8007bc2:	697a      	ldr	r2, [r7, #20]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007bca:	697b      	ldr	r3, [r7, #20]
 8007bcc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007bd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	011b      	lsls	r3, r3, #4
 8007bd6:	b2db      	uxtb	r3, r3
 8007bd8:	697a      	ldr	r2, [r7, #20]
 8007bda:	4313      	orrs	r3, r2
 8007bdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8007be4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	021b      	lsls	r3, r3, #8
 8007bea:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007bee:	693a      	ldr	r2, [r7, #16]
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	697a      	ldr	r2, [r7, #20]
 8007bf8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	621a      	str	r2, [r3, #32]
}
 8007c00:	bf00      	nop
 8007c02:	371c      	adds	r7, #28
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b087      	sub	sp, #28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
 8007c18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	69db      	ldr	r3, [r3, #28]
 8007c2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	6a1b      	ldr	r3, [r3, #32]
 8007c30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c38:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	021b      	lsls	r3, r3, #8
 8007c3e:	697a      	ldr	r2, [r7, #20]
 8007c40:	4313      	orrs	r3, r2
 8007c42:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007c4a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	031b      	lsls	r3, r3, #12
 8007c50:	b29b      	uxth	r3, r3
 8007c52:	697a      	ldr	r2, [r7, #20]
 8007c54:	4313      	orrs	r3, r2
 8007c56:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8007c5e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8007c60:	68bb      	ldr	r3, [r7, #8]
 8007c62:	031b      	lsls	r3, r3, #12
 8007c64:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8007c68:	693a      	ldr	r2, [r7, #16]
 8007c6a:	4313      	orrs	r3, r2
 8007c6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	693a      	ldr	r2, [r7, #16]
 8007c78:	621a      	str	r2, [r3, #32]
}
 8007c7a:	bf00      	nop
 8007c7c:	371c      	adds	r7, #28
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007c86:	b480      	push	{r7}
 8007c88:	b085      	sub	sp, #20
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	689b      	ldr	r3, [r3, #8]
 8007c94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007c9e:	683a      	ldr	r2, [r7, #0]
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	4313      	orrs	r3, r2
 8007ca4:	f043 0307 	orr.w	r3, r3, #7
 8007ca8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	68fa      	ldr	r2, [r7, #12]
 8007cae:	609a      	str	r2, [r3, #8]
}
 8007cb0:	bf00      	nop
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007cbc:	b480      	push	{r7}
 8007cbe:	b087      	sub	sp, #28
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	60f8      	str	r0, [r7, #12]
 8007cc4:	60b9      	str	r1, [r7, #8]
 8007cc6:	607a      	str	r2, [r7, #4]
 8007cc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	689b      	ldr	r3, [r3, #8]
 8007cce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007cd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007cd8:	683b      	ldr	r3, [r7, #0]
 8007cda:	021a      	lsls	r2, r3, #8
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	431a      	orrs	r2, r3
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	4313      	orrs	r3, r2
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	4313      	orrs	r3, r2
 8007ce8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	697a      	ldr	r2, [r7, #20]
 8007cee:	609a      	str	r2, [r3, #8]
}
 8007cf0:	bf00      	nop
 8007cf2:	371c      	adds	r7, #28
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr

08007cfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	b087      	sub	sp, #28
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	60f8      	str	r0, [r7, #12]
 8007d04:	60b9      	str	r1, [r7, #8]
 8007d06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007d08:	68bb      	ldr	r3, [r7, #8]
 8007d0a:	f003 031f 	and.w	r3, r3, #31
 8007d0e:	2201      	movs	r2, #1
 8007d10:	fa02 f303 	lsl.w	r3, r2, r3
 8007d14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	6a1a      	ldr	r2, [r3, #32]
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	43db      	mvns	r3, r3
 8007d1e:	401a      	ands	r2, r3
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	6a1a      	ldr	r2, [r3, #32]
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	f003 031f 	and.w	r3, r3, #31
 8007d2e:	6879      	ldr	r1, [r7, #4]
 8007d30:	fa01 f303 	lsl.w	r3, r1, r3
 8007d34:	431a      	orrs	r2, r3
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	621a      	str	r2, [r3, #32]
}
 8007d3a:	bf00      	nop
 8007d3c:	371c      	adds	r7, #28
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d44:	4770      	bx	lr
	...

08007d48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007d48:	b480      	push	{r7}
 8007d4a:	b085      	sub	sp, #20
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d101      	bne.n	8007d60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007d5c:	2302      	movs	r3, #2
 8007d5e:	e05a      	b.n	8007e16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2202      	movs	r2, #2
 8007d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007d88:	683b      	ldr	r3, [r7, #0]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	4313      	orrs	r3, r2
 8007d90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68fa      	ldr	r2, [r7, #12]
 8007d98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a21      	ldr	r2, [pc, #132]	; (8007e24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d022      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dac:	d01d      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	4a1d      	ldr	r2, [pc, #116]	; (8007e28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d018      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a1b      	ldr	r2, [pc, #108]	; (8007e2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007dbe:	4293      	cmp	r3, r2
 8007dc0:	d013      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a1a      	ldr	r2, [pc, #104]	; (8007e30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007dc8:	4293      	cmp	r3, r2
 8007dca:	d00e      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	4a18      	ldr	r2, [pc, #96]	; (8007e34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007dd2:	4293      	cmp	r3, r2
 8007dd4:	d009      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	4a17      	ldr	r2, [pc, #92]	; (8007e38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d004      	beq.n	8007dea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a15      	ldr	r2, [pc, #84]	; (8007e3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d10c      	bne.n	8007e04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007df0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	685b      	ldr	r3, [r3, #4]
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	68ba      	ldr	r2, [r7, #8]
 8007e02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2201      	movs	r2, #1
 8007e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	2200      	movs	r2, #0
 8007e10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e14:	2300      	movs	r3, #0
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3714      	adds	r7, #20
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e20:	4770      	bx	lr
 8007e22:	bf00      	nop
 8007e24:	40010000 	.word	0x40010000
 8007e28:	40000400 	.word	0x40000400
 8007e2c:	40000800 	.word	0x40000800
 8007e30:	40000c00 	.word	0x40000c00
 8007e34:	40010400 	.word	0x40010400
 8007e38:	40014000 	.word	0x40014000
 8007e3c:	40001800 	.word	0x40001800

08007e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b083      	sub	sp, #12
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007e48:	bf00      	nop
 8007e4a:	370c      	adds	r7, #12
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007e54:	b480      	push	{r7}
 8007e56:	b083      	sub	sp, #12
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007e5c:	bf00      	nop
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007e68:	b084      	sub	sp, #16
 8007e6a:	b580      	push	{r7, lr}
 8007e6c:	b084      	sub	sp, #16
 8007e6e:	af00      	add	r7, sp, #0
 8007e70:	6078      	str	r0, [r7, #4]
 8007e72:	f107 001c 	add.w	r0, r7, #28
 8007e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d122      	bne.n	8007ec6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	68db      	ldr	r3, [r3, #12]
 8007e90:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e98:	687a      	ldr	r2, [r7, #4]
 8007e9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007eaa:	2b01      	cmp	r3, #1
 8007eac:	d105      	bne.n	8007eba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f9c0 	bl	8008240 <USB_CoreReset>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	73fb      	strb	r3, [r7, #15]
 8007ec4:	e01a      	b.n	8007efc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f9b4 	bl	8008240 <USB_CoreReset>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d106      	bne.n	8007ef0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	639a      	str	r2, [r3, #56]	; 0x38
 8007eee:	e005      	b.n	8007efc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ef4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efe:	2b01      	cmp	r3, #1
 8007f00:	d10b      	bne.n	8007f1a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	f043 0206 	orr.w	r2, r3, #6
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	689b      	ldr	r3, [r3, #8]
 8007f12:	f043 0220 	orr.w	r2, r3, #32
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3710      	adds	r7, #16
 8007f20:	46bd      	mov	sp, r7
 8007f22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007f26:	b004      	add	sp, #16
 8007f28:	4770      	bx	lr

08007f2a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f2a:	b480      	push	{r7}
 8007f2c:	b083      	sub	sp, #12
 8007f2e:	af00      	add	r7, sp, #0
 8007f30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	689b      	ldr	r3, [r3, #8]
 8007f36:	f043 0201 	orr.w	r2, r3, #1
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f4c:	b480      	push	{r7}
 8007f4e:	b083      	sub	sp, #12
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f023 0201 	bic.w	r2, r3, #1
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f60:	2300      	movs	r3, #0
}
 8007f62:	4618      	mov	r0, r3
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr

08007f6e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b084      	sub	sp, #16
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	6078      	str	r0, [r7, #4]
 8007f76:	460b      	mov	r3, r1
 8007f78:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007f8a:	78fb      	ldrb	r3, [r7, #3]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d115      	bne.n	8007fbc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68db      	ldr	r3, [r3, #12]
 8007f94:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007f9c:	2001      	movs	r0, #1
 8007f9e:	f7fa fcab 	bl	80028f8 <HAL_Delay>
      ms++;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 f93a 	bl	8008222 <USB_GetMode>
 8007fae:	4603      	mov	r3, r0
 8007fb0:	2b01      	cmp	r3, #1
 8007fb2:	d01e      	beq.n	8007ff2 <USB_SetCurrentMode+0x84>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2b31      	cmp	r3, #49	; 0x31
 8007fb8:	d9f0      	bls.n	8007f9c <USB_SetCurrentMode+0x2e>
 8007fba:	e01a      	b.n	8007ff2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007fbc:	78fb      	ldrb	r3, [r7, #3]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d115      	bne.n	8007fee <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	68db      	ldr	r3, [r3, #12]
 8007fc6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007fce:	2001      	movs	r0, #1
 8007fd0:	f7fa fc92 	bl	80028f8 <HAL_Delay>
      ms++;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	3301      	adds	r3, #1
 8007fd8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007fda:	6878      	ldr	r0, [r7, #4]
 8007fdc:	f000 f921 	bl	8008222 <USB_GetMode>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d005      	beq.n	8007ff2 <USB_SetCurrentMode+0x84>
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	2b31      	cmp	r3, #49	; 0x31
 8007fea:	d9f0      	bls.n	8007fce <USB_SetCurrentMode+0x60>
 8007fec:	e001      	b.n	8007ff2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	e005      	b.n	8007ffe <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	2b32      	cmp	r3, #50	; 0x32
 8007ff6:	d101      	bne.n	8007ffc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	e000      	b.n	8007ffe <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007ffc:	2300      	movs	r3, #0
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	3710      	adds	r7, #16
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
	...

08008008 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008008:	b480      	push	{r7}
 800800a:	b085      	sub	sp, #20
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
 8008010:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008012:	2300      	movs	r3, #0
 8008014:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	3301      	adds	r3, #1
 800801a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	4a13      	ldr	r2, [pc, #76]	; (800806c <USB_FlushTxFifo+0x64>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d901      	bls.n	8008028 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008024:	2303      	movs	r3, #3
 8008026:	e01b      	b.n	8008060 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	691b      	ldr	r3, [r3, #16]
 800802c:	2b00      	cmp	r3, #0
 800802e:	daf2      	bge.n	8008016 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008030:	2300      	movs	r3, #0
 8008032:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	019b      	lsls	r3, r3, #6
 8008038:	f043 0220 	orr.w	r2, r3, #32
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	3301      	adds	r3, #1
 8008044:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	4a08      	ldr	r2, [pc, #32]	; (800806c <USB_FlushTxFifo+0x64>)
 800804a:	4293      	cmp	r3, r2
 800804c:	d901      	bls.n	8008052 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800804e:	2303      	movs	r3, #3
 8008050:	e006      	b.n	8008060 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	f003 0320 	and.w	r3, r3, #32
 800805a:	2b20      	cmp	r3, #32
 800805c:	d0f0      	beq.n	8008040 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800805e:	2300      	movs	r3, #0
}
 8008060:	4618      	mov	r0, r3
 8008062:	3714      	adds	r7, #20
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr
 800806c:	00030d40 	.word	0x00030d40

08008070 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008078:	2300      	movs	r3, #0
 800807a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	3301      	adds	r3, #1
 8008080:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	4a11      	ldr	r2, [pc, #68]	; (80080cc <USB_FlushRxFifo+0x5c>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d901      	bls.n	800808e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800808a:	2303      	movs	r3, #3
 800808c:	e018      	b.n	80080c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	2b00      	cmp	r3, #0
 8008094:	daf2      	bge.n	800807c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008096:	2300      	movs	r3, #0
 8008098:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2210      	movs	r2, #16
 800809e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	3301      	adds	r3, #1
 80080a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	4a08      	ldr	r2, [pc, #32]	; (80080cc <USB_FlushRxFifo+0x5c>)
 80080aa:	4293      	cmp	r3, r2
 80080ac:	d901      	bls.n	80080b2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80080ae:	2303      	movs	r3, #3
 80080b0:	e006      	b.n	80080c0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	691b      	ldr	r3, [r3, #16]
 80080b6:	f003 0310 	and.w	r3, r3, #16
 80080ba:	2b10      	cmp	r3, #16
 80080bc:	d0f0      	beq.n	80080a0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80080be:	2300      	movs	r3, #0
}
 80080c0:	4618      	mov	r0, r3
 80080c2:	3714      	adds	r7, #20
 80080c4:	46bd      	mov	sp, r7
 80080c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ca:	4770      	bx	lr
 80080cc:	00030d40 	.word	0x00030d40

080080d0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b089      	sub	sp, #36	; 0x24
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	60f8      	str	r0, [r7, #12]
 80080d8:	60b9      	str	r1, [r7, #8]
 80080da:	4611      	mov	r1, r2
 80080dc:	461a      	mov	r2, r3
 80080de:	460b      	mov	r3, r1
 80080e0:	71fb      	strb	r3, [r7, #7]
 80080e2:	4613      	mov	r3, r2
 80080e4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80080ea:	68bb      	ldr	r3, [r7, #8]
 80080ec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80080ee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d123      	bne.n	800813e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80080f6:	88bb      	ldrh	r3, [r7, #4]
 80080f8:	3303      	adds	r3, #3
 80080fa:	089b      	lsrs	r3, r3, #2
 80080fc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80080fe:	2300      	movs	r3, #0
 8008100:	61bb      	str	r3, [r7, #24]
 8008102:	e018      	b.n	8008136 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008104:	79fb      	ldrb	r3, [r7, #7]
 8008106:	031a      	lsls	r2, r3, #12
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	4413      	add	r3, r2
 800810c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008110:	461a      	mov	r2, r3
 8008112:	69fb      	ldr	r3, [r7, #28]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008118:	69fb      	ldr	r3, [r7, #28]
 800811a:	3301      	adds	r3, #1
 800811c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800811e:	69fb      	ldr	r3, [r7, #28]
 8008120:	3301      	adds	r3, #1
 8008122:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008124:	69fb      	ldr	r3, [r7, #28]
 8008126:	3301      	adds	r3, #1
 8008128:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800812a:	69fb      	ldr	r3, [r7, #28]
 800812c:	3301      	adds	r3, #1
 800812e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	3301      	adds	r3, #1
 8008134:	61bb      	str	r3, [r7, #24]
 8008136:	69ba      	ldr	r2, [r7, #24]
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	429a      	cmp	r2, r3
 800813c:	d3e2      	bcc.n	8008104 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800813e:	2300      	movs	r3, #0
}
 8008140:	4618      	mov	r0, r3
 8008142:	3724      	adds	r7, #36	; 0x24
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800814c:	b480      	push	{r7}
 800814e:	b08b      	sub	sp, #44	; 0x2c
 8008150:	af00      	add	r7, sp, #0
 8008152:	60f8      	str	r0, [r7, #12]
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	4613      	mov	r3, r2
 8008158:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008162:	88fb      	ldrh	r3, [r7, #6]
 8008164:	089b      	lsrs	r3, r3, #2
 8008166:	b29b      	uxth	r3, r3
 8008168:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800816a:	88fb      	ldrh	r3, [r7, #6]
 800816c:	f003 0303 	and.w	r3, r3, #3
 8008170:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008172:	2300      	movs	r3, #0
 8008174:	623b      	str	r3, [r7, #32]
 8008176:	e014      	b.n	80081a2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008178:	69bb      	ldr	r3, [r7, #24]
 800817a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800817e:	681a      	ldr	r2, [r3, #0]
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	601a      	str	r2, [r3, #0]
    pDest++;
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	3301      	adds	r3, #1
 8008188:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800818c:	3301      	adds	r3, #1
 800818e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008192:	3301      	adds	r3, #1
 8008194:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8008196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008198:	3301      	adds	r3, #1
 800819a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800819c:	6a3b      	ldr	r3, [r7, #32]
 800819e:	3301      	adds	r3, #1
 80081a0:	623b      	str	r3, [r7, #32]
 80081a2:	6a3a      	ldr	r2, [r7, #32]
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	429a      	cmp	r2, r3
 80081a8:	d3e6      	bcc.n	8008178 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80081aa:	8bfb      	ldrh	r3, [r7, #30]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d01e      	beq.n	80081ee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80081b0:	2300      	movs	r3, #0
 80081b2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80081b4:	69bb      	ldr	r3, [r7, #24]
 80081b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80081ba:	461a      	mov	r2, r3
 80081bc:	f107 0310 	add.w	r3, r7, #16
 80081c0:	6812      	ldr	r2, [r2, #0]
 80081c2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80081c4:	693a      	ldr	r2, [r7, #16]
 80081c6:	6a3b      	ldr	r3, [r7, #32]
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	00db      	lsls	r3, r3, #3
 80081cc:	fa22 f303 	lsr.w	r3, r2, r3
 80081d0:	b2da      	uxtb	r2, r3
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	701a      	strb	r2, [r3, #0]
      i++;
 80081d6:	6a3b      	ldr	r3, [r7, #32]
 80081d8:	3301      	adds	r3, #1
 80081da:	623b      	str	r3, [r7, #32]
      pDest++;
 80081dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081de:	3301      	adds	r3, #1
 80081e0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80081e2:	8bfb      	ldrh	r3, [r7, #30]
 80081e4:	3b01      	subs	r3, #1
 80081e6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80081e8:	8bfb      	ldrh	r3, [r7, #30]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d1ea      	bne.n	80081c4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80081ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	372c      	adds	r7, #44	; 0x2c
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	695b      	ldr	r3, [r3, #20]
 8008208:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	699b      	ldr	r3, [r3, #24]
 800820e:	68fa      	ldr	r2, [r7, #12]
 8008210:	4013      	ands	r3, r2
 8008212:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008214:	68fb      	ldr	r3, [r7, #12]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr

08008222 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008222:	b480      	push	{r7}
 8008224:	b083      	sub	sp, #12
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	695b      	ldr	r3, [r3, #20]
 800822e:	f003 0301 	and.w	r3, r3, #1
}
 8008232:	4618      	mov	r0, r3
 8008234:	370c      	adds	r7, #12
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
	...

08008240 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008248:	2300      	movs	r3, #0
 800824a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	3301      	adds	r3, #1
 8008250:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	4a13      	ldr	r2, [pc, #76]	; (80082a4 <USB_CoreReset+0x64>)
 8008256:	4293      	cmp	r3, r2
 8008258:	d901      	bls.n	800825e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800825a:	2303      	movs	r3, #3
 800825c:	e01b      	b.n	8008296 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	691b      	ldr	r3, [r3, #16]
 8008262:	2b00      	cmp	r3, #0
 8008264:	daf2      	bge.n	800824c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008266:	2300      	movs	r3, #0
 8008268:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	691b      	ldr	r3, [r3, #16]
 800826e:	f043 0201 	orr.w	r2, r3, #1
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	3301      	adds	r3, #1
 800827a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4a09      	ldr	r2, [pc, #36]	; (80082a4 <USB_CoreReset+0x64>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d901      	bls.n	8008288 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e006      	b.n	8008296 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	691b      	ldr	r3, [r3, #16]
 800828c:	f003 0301 	and.w	r3, r3, #1
 8008290:	2b01      	cmp	r3, #1
 8008292:	d0f0      	beq.n	8008276 <USB_CoreReset+0x36>

  return HAL_OK;
 8008294:	2300      	movs	r3, #0
}
 8008296:	4618      	mov	r0, r3
 8008298:	3714      	adds	r7, #20
 800829a:	46bd      	mov	sp, r7
 800829c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a0:	4770      	bx	lr
 80082a2:	bf00      	nop
 80082a4:	00030d40 	.word	0x00030d40

080082a8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082a8:	b084      	sub	sp, #16
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b086      	sub	sp, #24
 80082ae:	af00      	add	r7, sp, #0
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80082b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80082ba:	2300      	movs	r3, #0
 80082bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80082c8:	461a      	mov	r2, r3
 80082ca:	2300      	movs	r3, #0
 80082cc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082d2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082de:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082ea:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d018      	beq.n	8008330 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80082fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008300:	2b01      	cmp	r3, #1
 8008302:	d10a      	bne.n	800831a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68fa      	ldr	r2, [r7, #12]
 800830e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008312:	f043 0304 	orr.w	r3, r3, #4
 8008316:	6013      	str	r3, [r2, #0]
 8008318:	e014      	b.n	8008344 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008328:	f023 0304 	bic.w	r3, r3, #4
 800832c:	6013      	str	r3, [r2, #0]
 800832e:	e009      	b.n	8008344 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	68fa      	ldr	r2, [r7, #12]
 800833a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800833e:	f023 0304 	bic.w	r3, r3, #4
 8008342:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008344:	2110      	movs	r1, #16
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f7ff fe5e 	bl	8008008 <USB_FlushTxFifo>
 800834c:	4603      	mov	r3, r0
 800834e:	2b00      	cmp	r3, #0
 8008350:	d001      	beq.n	8008356 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8008352:	2301      	movs	r3, #1
 8008354:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f7ff fe8a 	bl	8008070 <USB_FlushRxFifo>
 800835c:	4603      	mov	r3, r0
 800835e:	2b00      	cmp	r3, #0
 8008360:	d001      	beq.n	8008366 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8008362:	2301      	movs	r3, #1
 8008364:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8008366:	2300      	movs	r3, #0
 8008368:	613b      	str	r3, [r7, #16]
 800836a:	e015      	b.n	8008398 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800836c:	693b      	ldr	r3, [r7, #16]
 800836e:	015a      	lsls	r2, r3, #5
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	4413      	add	r3, r2
 8008374:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008378:	461a      	mov	r2, r3
 800837a:	f04f 33ff 	mov.w	r3, #4294967295
 800837e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	015a      	lsls	r2, r3, #5
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	4413      	add	r3, r2
 8008388:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800838c:	461a      	mov	r2, r3
 800838e:	2300      	movs	r3, #0
 8008390:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8008392:	693b      	ldr	r3, [r7, #16]
 8008394:	3301      	adds	r3, #1
 8008396:	613b      	str	r3, [r7, #16]
 8008398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800839a:	693a      	ldr	r2, [r7, #16]
 800839c:	429a      	cmp	r2, r3
 800839e:	d3e5      	bcc.n	800836c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2200      	movs	r2, #0
 80083a4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f04f 32ff 	mov.w	r2, #4294967295
 80083ac:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d00b      	beq.n	80083d2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80083c0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	4a13      	ldr	r2, [pc, #76]	; (8008414 <USB_HostInit+0x16c>)
 80083c6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a13      	ldr	r2, [pc, #76]	; (8008418 <USB_HostInit+0x170>)
 80083cc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80083d0:	e009      	b.n	80083e6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2280      	movs	r2, #128	; 0x80
 80083d6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	4a10      	ldr	r2, [pc, #64]	; (800841c <USB_HostInit+0x174>)
 80083dc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	4a0f      	ldr	r2, [pc, #60]	; (8008420 <USB_HostInit+0x178>)
 80083e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80083e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d105      	bne.n	80083f8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	699b      	ldr	r3, [r3, #24]
 80083f0:	f043 0210 	orr.w	r2, r3, #16
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	699a      	ldr	r2, [r3, #24]
 80083fc:	4b09      	ldr	r3, [pc, #36]	; (8008424 <USB_HostInit+0x17c>)
 80083fe:	4313      	orrs	r3, r2
 8008400:	687a      	ldr	r2, [r7, #4]
 8008402:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8008404:	7dfb      	ldrb	r3, [r7, #23]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3718      	adds	r7, #24
 800840a:	46bd      	mov	sp, r7
 800840c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008410:	b004      	add	sp, #16
 8008412:	4770      	bx	lr
 8008414:	01000200 	.word	0x01000200
 8008418:	00e00300 	.word	0x00e00300
 800841c:	00600080 	.word	0x00600080
 8008420:	004000e0 	.word	0x004000e0
 8008424:	a3200008 	.word	0xa3200008

08008428 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	460b      	mov	r3, r1
 8008432:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8008446:	f023 0303 	bic.w	r3, r3, #3
 800844a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	78fb      	ldrb	r3, [r7, #3]
 8008456:	f003 0303 	and.w	r3, r3, #3
 800845a:	68f9      	ldr	r1, [r7, #12]
 800845c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8008460:	4313      	orrs	r3, r2
 8008462:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8008464:	78fb      	ldrb	r3, [r7, #3]
 8008466:	2b01      	cmp	r3, #1
 8008468:	d107      	bne.n	800847a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008470:	461a      	mov	r2, r3
 8008472:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8008476:	6053      	str	r3, [r2, #4]
 8008478:	e009      	b.n	800848e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800847a:	78fb      	ldrb	r3, [r7, #3]
 800847c:	2b02      	cmp	r3, #2
 800847e:	d106      	bne.n	800848e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008486:	461a      	mov	r2, r3
 8008488:	f241 7370 	movw	r3, #6000	; 0x1770
 800848c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800848e:	2300      	movs	r3, #0
}
 8008490:	4618      	mov	r0, r3
 8008492:	3714      	adds	r7, #20
 8008494:	46bd      	mov	sp, r7
 8008496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800849a:	4770      	bx	lr

0800849c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800849c:	b580      	push	{r7, lr}
 800849e:	b084      	sub	sp, #16
 80084a0:	af00      	add	r7, sp, #0
 80084a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80084a8:	2300      	movs	r3, #0
 80084aa:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80084bc:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	68fa      	ldr	r2, [r7, #12]
 80084c2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80084c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80084ca:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80084cc:	2064      	movs	r0, #100	; 0x64
 80084ce:	f7fa fa13 	bl	80028f8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	68fa      	ldr	r2, [r7, #12]
 80084d6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80084da:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084de:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80084e0:	200a      	movs	r0, #10
 80084e2:	f7fa fa09 	bl	80028f8 <HAL_Delay>

  return HAL_OK;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3710      	adds	r7, #16
 80084ec:	46bd      	mov	sp, r7
 80084ee:	bd80      	pop	{r7, pc}

080084f0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80084f0:	b480      	push	{r7}
 80084f2:	b085      	sub	sp, #20
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8008500:	2300      	movs	r3, #0
 8008502:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8008514:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8008516:	68bb      	ldr	r3, [r7, #8]
 8008518:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800851c:	2b00      	cmp	r3, #0
 800851e:	d109      	bne.n	8008534 <USB_DriveVbus+0x44>
 8008520:	78fb      	ldrb	r3, [r7, #3]
 8008522:	2b01      	cmp	r3, #1
 8008524:	d106      	bne.n	8008534 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800852e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008532:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800853a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800853e:	d109      	bne.n	8008554 <USB_DriveVbus+0x64>
 8008540:	78fb      	ldrb	r3, [r7, #3]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d106      	bne.n	8008554 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	68fa      	ldr	r2, [r7, #12]
 800854a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800854e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008552:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8008554:	2300      	movs	r3, #0
}
 8008556:	4618      	mov	r0, r3
 8008558:	3714      	adds	r7, #20
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008562:	b480      	push	{r7}
 8008564:	b085      	sub	sp, #20
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800856e:	2300      	movs	r3, #0
 8008570:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	0c5b      	lsrs	r3, r3, #17
 8008580:	f003 0303 	and.w	r3, r3, #3
}
 8008584:	4618      	mov	r0, r3
 8008586:	3714      	adds	r7, #20
 8008588:	46bd      	mov	sp, r7
 800858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800858e:	4770      	bx	lr

08008590 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
 8008596:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80085a2:	689b      	ldr	r3, [r3, #8]
 80085a4:	b29b      	uxth	r3, r3
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3714      	adds	r7, #20
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
	...

080085b4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80085b4:	b580      	push	{r7, lr}
 80085b6:	b088      	sub	sp, #32
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	4608      	mov	r0, r1
 80085be:	4611      	mov	r1, r2
 80085c0:	461a      	mov	r2, r3
 80085c2:	4603      	mov	r3, r0
 80085c4:	70fb      	strb	r3, [r7, #3]
 80085c6:	460b      	mov	r3, r1
 80085c8:	70bb      	strb	r3, [r7, #2]
 80085ca:	4613      	mov	r3, r2
 80085cc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80085d6:	78fb      	ldrb	r3, [r7, #3]
 80085d8:	015a      	lsls	r2, r3, #5
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	4413      	add	r3, r2
 80085de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80085e2:	461a      	mov	r2, r3
 80085e4:	f04f 33ff 	mov.w	r3, #4294967295
 80085e8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80085ea:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80085ee:	2b03      	cmp	r3, #3
 80085f0:	d87e      	bhi.n	80086f0 <USB_HC_Init+0x13c>
 80085f2:	a201      	add	r2, pc, #4	; (adr r2, 80085f8 <USB_HC_Init+0x44>)
 80085f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085f8:	08008609 	.word	0x08008609
 80085fc:	080086b3 	.word	0x080086b3
 8008600:	08008609 	.word	0x08008609
 8008604:	08008675 	.word	0x08008675
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008608:	78fb      	ldrb	r3, [r7, #3]
 800860a:	015a      	lsls	r2, r3, #5
 800860c:	693b      	ldr	r3, [r7, #16]
 800860e:	4413      	add	r3, r2
 8008610:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008614:	461a      	mov	r2, r3
 8008616:	f240 439d 	movw	r3, #1181	; 0x49d
 800861a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800861c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008620:	2b00      	cmp	r3, #0
 8008622:	da10      	bge.n	8008646 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008624:	78fb      	ldrb	r3, [r7, #3]
 8008626:	015a      	lsls	r2, r3, #5
 8008628:	693b      	ldr	r3, [r7, #16]
 800862a:	4413      	add	r3, r2
 800862c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008630:	68db      	ldr	r3, [r3, #12]
 8008632:	78fa      	ldrb	r2, [r7, #3]
 8008634:	0151      	lsls	r1, r2, #5
 8008636:	693a      	ldr	r2, [r7, #16]
 8008638:	440a      	add	r2, r1
 800863a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800863e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008642:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8008644:	e057      	b.n	80086f6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800864a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800864e:	2b00      	cmp	r3, #0
 8008650:	d051      	beq.n	80086f6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8008652:	78fb      	ldrb	r3, [r7, #3]
 8008654:	015a      	lsls	r2, r3, #5
 8008656:	693b      	ldr	r3, [r7, #16]
 8008658:	4413      	add	r3, r2
 800865a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800865e:	68db      	ldr	r3, [r3, #12]
 8008660:	78fa      	ldrb	r2, [r7, #3]
 8008662:	0151      	lsls	r1, r2, #5
 8008664:	693a      	ldr	r2, [r7, #16]
 8008666:	440a      	add	r2, r1
 8008668:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800866c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008670:	60d3      	str	r3, [r2, #12]
      break;
 8008672:	e040      	b.n	80086f6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8008674:	78fb      	ldrb	r3, [r7, #3]
 8008676:	015a      	lsls	r2, r3, #5
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	4413      	add	r3, r2
 800867c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008680:	461a      	mov	r2, r3
 8008682:	f240 639d 	movw	r3, #1693	; 0x69d
 8008686:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8008688:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800868c:	2b00      	cmp	r3, #0
 800868e:	da34      	bge.n	80086fa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8008690:	78fb      	ldrb	r3, [r7, #3]
 8008692:	015a      	lsls	r2, r3, #5
 8008694:	693b      	ldr	r3, [r7, #16]
 8008696:	4413      	add	r3, r2
 8008698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	78fa      	ldrb	r2, [r7, #3]
 80086a0:	0151      	lsls	r1, r2, #5
 80086a2:	693a      	ldr	r2, [r7, #16]
 80086a4:	440a      	add	r2, r1
 80086a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80086ae:	60d3      	str	r3, [r2, #12]
      }

      break;
 80086b0:	e023      	b.n	80086fa <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80086b2:	78fb      	ldrb	r3, [r7, #3]
 80086b4:	015a      	lsls	r2, r3, #5
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	4413      	add	r3, r2
 80086ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086be:	461a      	mov	r2, r3
 80086c0:	f240 2325 	movw	r3, #549	; 0x225
 80086c4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80086c6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	da17      	bge.n	80086fe <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80086ce:	78fb      	ldrb	r3, [r7, #3]
 80086d0:	015a      	lsls	r2, r3, #5
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	4413      	add	r3, r2
 80086d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80086da:	68db      	ldr	r3, [r3, #12]
 80086dc:	78fa      	ldrb	r2, [r7, #3]
 80086de:	0151      	lsls	r1, r2, #5
 80086e0:	693a      	ldr	r2, [r7, #16]
 80086e2:	440a      	add	r2, r1
 80086e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80086e8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80086ec:	60d3      	str	r3, [r2, #12]
      }
      break;
 80086ee:	e006      	b.n	80086fe <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80086f0:	2301      	movs	r3, #1
 80086f2:	77fb      	strb	r3, [r7, #31]
      break;
 80086f4:	e004      	b.n	8008700 <USB_HC_Init+0x14c>
      break;
 80086f6:	bf00      	nop
 80086f8:	e002      	b.n	8008700 <USB_HC_Init+0x14c>
      break;
 80086fa:	bf00      	nop
 80086fc:	e000      	b.n	8008700 <USB_HC_Init+0x14c>
      break;
 80086fe:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8008700:	78fb      	ldrb	r3, [r7, #3]
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	4413      	add	r3, r2
 8008708:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	78fa      	ldrb	r2, [r7, #3]
 8008710:	0151      	lsls	r1, r2, #5
 8008712:	693a      	ldr	r2, [r7, #16]
 8008714:	440a      	add	r2, r1
 8008716:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800871a:	f043 0302 	orr.w	r3, r3, #2
 800871e:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8008720:	693b      	ldr	r3, [r7, #16]
 8008722:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008726:	699a      	ldr	r2, [r3, #24]
 8008728:	78fb      	ldrb	r3, [r7, #3]
 800872a:	f003 030f 	and.w	r3, r3, #15
 800872e:	2101      	movs	r1, #1
 8008730:	fa01 f303 	lsl.w	r3, r1, r3
 8008734:	6939      	ldr	r1, [r7, #16]
 8008736:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800873a:	4313      	orrs	r3, r2
 800873c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800874a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800874e:	2b00      	cmp	r3, #0
 8008750:	da03      	bge.n	800875a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8008752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008756:	61bb      	str	r3, [r7, #24]
 8008758:	e001      	b.n	800875e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800875a:	2300      	movs	r3, #0
 800875c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800875e:	6878      	ldr	r0, [r7, #4]
 8008760:	f7ff feff 	bl	8008562 <USB_GetHostSpeed>
 8008764:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8008766:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800876a:	2b02      	cmp	r3, #2
 800876c:	d106      	bne.n	800877c <USB_HC_Init+0x1c8>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2b02      	cmp	r3, #2
 8008772:	d003      	beq.n	800877c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8008774:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8008778:	617b      	str	r3, [r7, #20]
 800877a:	e001      	b.n	8008780 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800877c:	2300      	movs	r3, #0
 800877e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008780:	787b      	ldrb	r3, [r7, #1]
 8008782:	059b      	lsls	r3, r3, #22
 8008784:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8008788:	78bb      	ldrb	r3, [r7, #2]
 800878a:	02db      	lsls	r3, r3, #11
 800878c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8008790:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8008792:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008796:	049b      	lsls	r3, r3, #18
 8008798:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800879c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800879e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80087a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80087a4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80087a6:	69bb      	ldr	r3, [r7, #24]
 80087a8:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80087aa:	78fb      	ldrb	r3, [r7, #3]
 80087ac:	0159      	lsls	r1, r3, #5
 80087ae:	693b      	ldr	r3, [r7, #16]
 80087b0:	440b      	add	r3, r1
 80087b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087b6:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80087bc:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80087be:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80087c2:	2b03      	cmp	r3, #3
 80087c4:	d003      	beq.n	80087ce <USB_HC_Init+0x21a>
 80087c6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80087ca:	2b01      	cmp	r3, #1
 80087cc:	d10f      	bne.n	80087ee <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80087ce:	78fb      	ldrb	r3, [r7, #3]
 80087d0:	015a      	lsls	r2, r3, #5
 80087d2:	693b      	ldr	r3, [r7, #16]
 80087d4:	4413      	add	r3, r2
 80087d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	78fa      	ldrb	r2, [r7, #3]
 80087de:	0151      	lsls	r1, r2, #5
 80087e0:	693a      	ldr	r2, [r7, #16]
 80087e2:	440a      	add	r2, r1
 80087e4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80087e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80087ec:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80087ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80087f0:	4618      	mov	r0, r3
 80087f2:	3720      	adds	r7, #32
 80087f4:	46bd      	mov	sp, r7
 80087f6:	bd80      	pop	{r7, pc}

080087f8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b08c      	sub	sp, #48	; 0x30
 80087fc:	af02      	add	r7, sp, #8
 80087fe:	60f8      	str	r0, [r7, #12]
 8008800:	60b9      	str	r1, [r7, #8]
 8008802:	4613      	mov	r3, r2
 8008804:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	785b      	ldrb	r3, [r3, #1]
 800880e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8008810:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008814:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800881a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800881e:	2b00      	cmp	r3, #0
 8008820:	d02d      	beq.n	800887e <USB_HC_StartXfer+0x86>
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	791b      	ldrb	r3, [r3, #4]
 8008826:	2b00      	cmp	r3, #0
 8008828:	d129      	bne.n	800887e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800882a:	79fb      	ldrb	r3, [r7, #7]
 800882c:	2b01      	cmp	r3, #1
 800882e:	d117      	bne.n	8008860 <USB_HC_StartXfer+0x68>
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	79db      	ldrb	r3, [r3, #7]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d003      	beq.n	8008840 <USB_HC_StartXfer+0x48>
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	79db      	ldrb	r3, [r3, #7]
 800883c:	2b02      	cmp	r3, #2
 800883e:	d10f      	bne.n	8008860 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	015a      	lsls	r2, r3, #5
 8008844:	6a3b      	ldr	r3, [r7, #32]
 8008846:	4413      	add	r3, r2
 8008848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	69fa      	ldr	r2, [r7, #28]
 8008850:	0151      	lsls	r1, r2, #5
 8008852:	6a3a      	ldr	r2, [r7, #32]
 8008854:	440a      	add	r2, r1
 8008856:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800885a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800885e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8008860:	79fb      	ldrb	r3, [r7, #7]
 8008862:	2b00      	cmp	r3, #0
 8008864:	d10b      	bne.n	800887e <USB_HC_StartXfer+0x86>
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	795b      	ldrb	r3, [r3, #5]
 800886a:	2b01      	cmp	r3, #1
 800886c:	d107      	bne.n	800887e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	785b      	ldrb	r3, [r3, #1]
 8008872:	4619      	mov	r1, r3
 8008874:	68f8      	ldr	r0, [r7, #12]
 8008876:	f000 fa0f 	bl	8008c98 <USB_DoPing>
      return HAL_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	e0f8      	b.n	8008a70 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800887e:	68bb      	ldr	r3, [r7, #8]
 8008880:	695b      	ldr	r3, [r3, #20]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d018      	beq.n	80088b8 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	695b      	ldr	r3, [r3, #20]
 800888a:	68ba      	ldr	r2, [r7, #8]
 800888c:	8912      	ldrh	r2, [r2, #8]
 800888e:	4413      	add	r3, r2
 8008890:	3b01      	subs	r3, #1
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	8912      	ldrh	r2, [r2, #8]
 8008896:	fbb3 f3f2 	udiv	r3, r3, r2
 800889a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800889c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800889e:	8b7b      	ldrh	r3, [r7, #26]
 80088a0:	429a      	cmp	r2, r3
 80088a2:	d90b      	bls.n	80088bc <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80088a4:	8b7b      	ldrh	r3, [r7, #26]
 80088a6:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80088a8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088aa:	68ba      	ldr	r2, [r7, #8]
 80088ac:	8912      	ldrh	r2, [r2, #8]
 80088ae:	fb03 f202 	mul.w	r2, r3, r2
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	611a      	str	r2, [r3, #16]
 80088b6:	e001      	b.n	80088bc <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80088b8:	2301      	movs	r3, #1
 80088ba:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	78db      	ldrb	r3, [r3, #3]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d007      	beq.n	80088d4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80088c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	8912      	ldrh	r2, [r2, #8]
 80088ca:	fb03 f202 	mul.w	r2, r3, r2
 80088ce:	68bb      	ldr	r3, [r7, #8]
 80088d0:	611a      	str	r2, [r3, #16]
 80088d2:	e003      	b.n	80088dc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	695a      	ldr	r2, [r3, #20]
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	691b      	ldr	r3, [r3, #16]
 80088e0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80088e4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80088e6:	04d9      	lsls	r1, r3, #19
 80088e8:	4b63      	ldr	r3, [pc, #396]	; (8008a78 <USB_HC_StartXfer+0x280>)
 80088ea:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80088ec:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	7a9b      	ldrb	r3, [r3, #10]
 80088f2:	075b      	lsls	r3, r3, #29
 80088f4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80088f8:	69f9      	ldr	r1, [r7, #28]
 80088fa:	0148      	lsls	r0, r1, #5
 80088fc:	6a39      	ldr	r1, [r7, #32]
 80088fe:	4401      	add	r1, r0
 8008900:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008904:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8008906:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8008908:	79fb      	ldrb	r3, [r7, #7]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d009      	beq.n	8008922 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	68d9      	ldr	r1, [r3, #12]
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	015a      	lsls	r2, r3, #5
 8008916:	6a3b      	ldr	r3, [r7, #32]
 8008918:	4413      	add	r3, r2
 800891a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800891e:	460a      	mov	r2, r1
 8008920:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8008922:	6a3b      	ldr	r3, [r7, #32]
 8008924:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008928:	689b      	ldr	r3, [r3, #8]
 800892a:	f003 0301 	and.w	r3, r3, #1
 800892e:	2b00      	cmp	r3, #0
 8008930:	bf0c      	ite	eq
 8008932:	2301      	moveq	r3, #1
 8008934:	2300      	movne	r3, #0
 8008936:	b2db      	uxtb	r3, r3
 8008938:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	015a      	lsls	r2, r3, #5
 800893e:	6a3b      	ldr	r3, [r7, #32]
 8008940:	4413      	add	r3, r2
 8008942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	69fa      	ldr	r2, [r7, #28]
 800894a:	0151      	lsls	r1, r2, #5
 800894c:	6a3a      	ldr	r2, [r7, #32]
 800894e:	440a      	add	r2, r1
 8008950:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008954:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008958:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	015a      	lsls	r2, r3, #5
 800895e:	6a3b      	ldr	r3, [r7, #32]
 8008960:	4413      	add	r3, r2
 8008962:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	7e7b      	ldrb	r3, [r7, #25]
 800896a:	075b      	lsls	r3, r3, #29
 800896c:	69f9      	ldr	r1, [r7, #28]
 800896e:	0148      	lsls	r0, r1, #5
 8008970:	6a39      	ldr	r1, [r7, #32]
 8008972:	4401      	add	r1, r0
 8008974:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8008978:	4313      	orrs	r3, r2
 800897a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	015a      	lsls	r2, r3, #5
 8008980:	6a3b      	ldr	r3, [r7, #32]
 8008982:	4413      	add	r3, r2
 8008984:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008992:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	78db      	ldrb	r3, [r3, #3]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d004      	beq.n	80089a6 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800899c:	693b      	ldr	r3, [r7, #16]
 800899e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80089a2:	613b      	str	r3, [r7, #16]
 80089a4:	e003      	b.n	80089ae <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80089ac:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80089b4:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	015a      	lsls	r2, r3, #5
 80089ba:	6a3b      	ldr	r3, [r7, #32]
 80089bc:	4413      	add	r3, r2
 80089be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80089c2:	461a      	mov	r2, r3
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80089c8:	79fb      	ldrb	r3, [r7, #7]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d001      	beq.n	80089d2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80089ce:	2300      	movs	r3, #0
 80089d0:	e04e      	b.n	8008a70 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	78db      	ldrb	r3, [r3, #3]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d149      	bne.n	8008a6e <USB_HC_StartXfer+0x276>
 80089da:	68bb      	ldr	r3, [r7, #8]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d045      	beq.n	8008a6e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	79db      	ldrb	r3, [r3, #7]
 80089e6:	2b03      	cmp	r3, #3
 80089e8:	d830      	bhi.n	8008a4c <USB_HC_StartXfer+0x254>
 80089ea:	a201      	add	r2, pc, #4	; (adr r2, 80089f0 <USB_HC_StartXfer+0x1f8>)
 80089ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089f0:	08008a01 	.word	0x08008a01
 80089f4:	08008a25 	.word	0x08008a25
 80089f8:	08008a01 	.word	0x08008a01
 80089fc:	08008a25 	.word	0x08008a25
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	695b      	ldr	r3, [r3, #20]
 8008a04:	3303      	adds	r3, #3
 8008a06:	089b      	lsrs	r3, r3, #2
 8008a08:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8008a0a:	8afa      	ldrh	r2, [r7, #22]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a10:	b29b      	uxth	r3, r3
 8008a12:	429a      	cmp	r2, r3
 8008a14:	d91c      	bls.n	8008a50 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	699b      	ldr	r3, [r3, #24]
 8008a1a:	f043 0220 	orr.w	r2, r3, #32
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	619a      	str	r2, [r3, #24]
        }
        break;
 8008a22:	e015      	b.n	8008a50 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	695b      	ldr	r3, [r3, #20]
 8008a28:	3303      	adds	r3, #3
 8008a2a:	089b      	lsrs	r3, r3, #2
 8008a2c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8008a2e:	8afa      	ldrh	r2, [r7, #22]
 8008a30:	6a3b      	ldr	r3, [r7, #32]
 8008a32:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a36:	691b      	ldr	r3, [r3, #16]
 8008a38:	b29b      	uxth	r3, r3
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d90a      	bls.n	8008a54 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	699b      	ldr	r3, [r3, #24]
 8008a42:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8008a46:	68fb      	ldr	r3, [r7, #12]
 8008a48:	619a      	str	r2, [r3, #24]
        }
        break;
 8008a4a:	e003      	b.n	8008a54 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8008a4c:	bf00      	nop
 8008a4e:	e002      	b.n	8008a56 <USB_HC_StartXfer+0x25e>
        break;
 8008a50:	bf00      	nop
 8008a52:	e000      	b.n	8008a56 <USB_HC_StartXfer+0x25e>
        break;
 8008a54:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	68d9      	ldr	r1, [r3, #12]
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	785a      	ldrb	r2, [r3, #1]
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	695b      	ldr	r3, [r3, #20]
 8008a62:	b29b      	uxth	r3, r3
 8008a64:	2000      	movs	r0, #0
 8008a66:	9000      	str	r0, [sp, #0]
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	f7ff fb31 	bl	80080d0 <USB_WritePacket>
  }

  return HAL_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3728      	adds	r7, #40	; 0x28
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}
 8008a78:	1ff80000 	.word	0x1ff80000

08008a7c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008a8e:	695b      	ldr	r3, [r3, #20]
 8008a90:	b29b      	uxth	r3, r3
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3714      	adds	r7, #20
 8008a96:	46bd      	mov	sp, r7
 8008a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a9c:	4770      	bx	lr

08008a9e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	b089      	sub	sp, #36	; 0x24
 8008aa2:	af00      	add	r7, sp, #0
 8008aa4:	6078      	str	r0, [r7, #4]
 8008aa6:	460b      	mov	r3, r1
 8008aa8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8008aae:	78fb      	ldrb	r3, [r7, #3]
 8008ab0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8008ab6:	69bb      	ldr	r3, [r7, #24]
 8008ab8:	015a      	lsls	r2, r3, #5
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	4413      	add	r3, r2
 8008abe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	0c9b      	lsrs	r3, r3, #18
 8008ac6:	f003 0303 	and.w	r3, r3, #3
 8008aca:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8008acc:	69bb      	ldr	r3, [r7, #24]
 8008ace:	015a      	lsls	r2, r3, #5
 8008ad0:	69fb      	ldr	r3, [r7, #28]
 8008ad2:	4413      	add	r3, r2
 8008ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	0fdb      	lsrs	r3, r3, #31
 8008adc:	f003 0301 	and.w	r3, r3, #1
 8008ae0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	689b      	ldr	r3, [r3, #8]
 8008ae6:	f003 0320 	and.w	r3, r3, #32
 8008aea:	2b20      	cmp	r3, #32
 8008aec:	d104      	bne.n	8008af8 <USB_HC_Halt+0x5a>
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d101      	bne.n	8008af8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8008af4:	2300      	movs	r3, #0
 8008af6:	e0c8      	b.n	8008c8a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d002      	beq.n	8008b04 <USB_HC_Halt+0x66>
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d163      	bne.n	8008bcc <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008b04:	69bb      	ldr	r3, [r7, #24]
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	69fb      	ldr	r3, [r7, #28]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	69ba      	ldr	r2, [r7, #24]
 8008b14:	0151      	lsls	r1, r2, #5
 8008b16:	69fa      	ldr	r2, [r7, #28]
 8008b18:	440a      	add	r2, r1
 8008b1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b22:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	f003 0320 	and.w	r3, r3, #32
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	f040 80ab 	bne.w	8008c88 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b36:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d133      	bne.n	8008ba6 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	015a      	lsls	r2, r3, #5
 8008b42:	69fb      	ldr	r3, [r7, #28]
 8008b44:	4413      	add	r3, r2
 8008b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	69ba      	ldr	r2, [r7, #24]
 8008b4e:	0151      	lsls	r1, r2, #5
 8008b50:	69fa      	ldr	r2, [r7, #28]
 8008b52:	440a      	add	r2, r1
 8008b54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b58:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008b5c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008b5e:	69bb      	ldr	r3, [r7, #24]
 8008b60:	015a      	lsls	r2, r3, #5
 8008b62:	69fb      	ldr	r3, [r7, #28]
 8008b64:	4413      	add	r3, r2
 8008b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b6a:	681b      	ldr	r3, [r3, #0]
 8008b6c:	69ba      	ldr	r2, [r7, #24]
 8008b6e:	0151      	lsls	r1, r2, #5
 8008b70:	69fa      	ldr	r2, [r7, #28]
 8008b72:	440a      	add	r2, r1
 8008b74:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008b78:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008b7c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	3301      	adds	r3, #1
 8008b82:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008b8a:	d81d      	bhi.n	8008bc8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	015a      	lsls	r2, r3, #5
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	4413      	add	r3, r2
 8008b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008b9e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ba2:	d0ec      	beq.n	8008b7e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008ba4:	e070      	b.n	8008c88 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008ba6:	69bb      	ldr	r3, [r7, #24]
 8008ba8:	015a      	lsls	r2, r3, #5
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	4413      	add	r3, r2
 8008bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	69ba      	ldr	r2, [r7, #24]
 8008bb6:	0151      	lsls	r1, r2, #5
 8008bb8:	69fa      	ldr	r2, [r7, #28]
 8008bba:	440a      	add	r2, r1
 8008bbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008bc0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008bc4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008bc6:	e05f      	b.n	8008c88 <USB_HC_Halt+0x1ea>
            break;
 8008bc8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008bca:	e05d      	b.n	8008c88 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	015a      	lsls	r2, r3, #5
 8008bd0:	69fb      	ldr	r3, [r7, #28]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	69ba      	ldr	r2, [r7, #24]
 8008bdc:	0151      	lsls	r1, r2, #5
 8008bde:	69fa      	ldr	r2, [r7, #28]
 8008be0:	440a      	add	r2, r1
 8008be2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008be6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bea:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008bec:	69fb      	ldr	r3, [r7, #28]
 8008bee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008bf2:	691b      	ldr	r3, [r3, #16]
 8008bf4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d133      	bne.n	8008c64 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	015a      	lsls	r2, r3, #5
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	4413      	add	r3, r2
 8008c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	69ba      	ldr	r2, [r7, #24]
 8008c0c:	0151      	lsls	r1, r2, #5
 8008c0e:	69fa      	ldr	r2, [r7, #28]
 8008c10:	440a      	add	r2, r1
 8008c12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c16:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008c1a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c1c:	69bb      	ldr	r3, [r7, #24]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	69fb      	ldr	r3, [r7, #28]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	69ba      	ldr	r2, [r7, #24]
 8008c2c:	0151      	lsls	r1, r2, #5
 8008c2e:	69fa      	ldr	r2, [r7, #28]
 8008c30:	440a      	add	r2, r1
 8008c32:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c3a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	3301      	adds	r3, #1
 8008c40:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c48:	d81d      	bhi.n	8008c86 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008c4a:	69bb      	ldr	r3, [r7, #24]
 8008c4c:	015a      	lsls	r2, r3, #5
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	4413      	add	r3, r2
 8008c52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008c5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008c60:	d0ec      	beq.n	8008c3c <USB_HC_Halt+0x19e>
 8008c62:	e011      	b.n	8008c88 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008c64:	69bb      	ldr	r3, [r7, #24]
 8008c66:	015a      	lsls	r2, r3, #5
 8008c68:	69fb      	ldr	r3, [r7, #28]
 8008c6a:	4413      	add	r3, r2
 8008c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	69ba      	ldr	r2, [r7, #24]
 8008c74:	0151      	lsls	r1, r2, #5
 8008c76:	69fa      	ldr	r2, [r7, #28]
 8008c78:	440a      	add	r2, r1
 8008c7a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008c7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008c82:	6013      	str	r3, [r2, #0]
 8008c84:	e000      	b.n	8008c88 <USB_HC_Halt+0x1ea>
          break;
 8008c86:	bf00      	nop
    }
  }

  return HAL_OK;
 8008c88:	2300      	movs	r3, #0
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3724      	adds	r7, #36	; 0x24
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr
	...

08008c98 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008c98:	b480      	push	{r7}
 8008c9a:	b087      	sub	sp, #28
 8008c9c:	af00      	add	r7, sp, #0
 8008c9e:	6078      	str	r0, [r7, #4]
 8008ca0:	460b      	mov	r3, r1
 8008ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008ca8:	78fb      	ldrb	r3, [r7, #3]
 8008caa:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008cac:	2301      	movs	r3, #1
 8008cae:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	04da      	lsls	r2, r3, #19
 8008cb4:	4b15      	ldr	r3, [pc, #84]	; (8008d0c <USB_DoPing+0x74>)
 8008cb6:	4013      	ands	r3, r2
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	0151      	lsls	r1, r2, #5
 8008cbc:	697a      	ldr	r2, [r7, #20]
 8008cbe:	440a      	add	r2, r1
 8008cc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8008cc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008cc8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	015a      	lsls	r2, r3, #5
 8008cce:	697b      	ldr	r3, [r7, #20]
 8008cd0:	4413      	add	r3, r2
 8008cd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008ce0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8008ce2:	68bb      	ldr	r3, [r7, #8]
 8008ce4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008ce8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	015a      	lsls	r2, r3, #5
 8008cee:	697b      	ldr	r3, [r7, #20]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008cf6:	461a      	mov	r2, r3
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008cfc:	2300      	movs	r3, #0
}
 8008cfe:	4618      	mov	r0, r3
 8008d00:	371c      	adds	r7, #28
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
 8008d0a:	bf00      	nop
 8008d0c:	1ff80000 	.word	0x1ff80000

08008d10 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8008d10:	b580      	push	{r7, lr}
 8008d12:	b088      	sub	sp, #32
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008d18:	2300      	movs	r3, #0
 8008d1a:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8008d20:	2300      	movs	r3, #0
 8008d22:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7ff f911 	bl	8007f4c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008d2a:	2110      	movs	r1, #16
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f7ff f96b 	bl	8008008 <USB_FlushTxFifo>
 8008d32:	4603      	mov	r3, r0
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d001      	beq.n	8008d3c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8008d38:	2301      	movs	r3, #1
 8008d3a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f7ff f997 	bl	8008070 <USB_FlushRxFifo>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d001      	beq.n	8008d4c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8008d48:	2301      	movs	r3, #1
 8008d4a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	61bb      	str	r3, [r7, #24]
 8008d50:	e01f      	b.n	8008d92 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	015a      	lsls	r2, r3, #5
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	4413      	add	r3, r2
 8008d5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8008d62:	693b      	ldr	r3, [r7, #16]
 8008d64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008d68:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8008d6a:	693b      	ldr	r3, [r7, #16]
 8008d6c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008d70:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008d72:	693b      	ldr	r3, [r7, #16]
 8008d74:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008d78:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008d7a:	69bb      	ldr	r3, [r7, #24]
 8008d7c:	015a      	lsls	r2, r3, #5
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	4413      	add	r3, r2
 8008d82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008d86:	461a      	mov	r2, r3
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008d8c:	69bb      	ldr	r3, [r7, #24]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	61bb      	str	r3, [r7, #24]
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	2b0f      	cmp	r3, #15
 8008d96:	d9dc      	bls.n	8008d52 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008d98:	2300      	movs	r3, #0
 8008d9a:	61bb      	str	r3, [r7, #24]
 8008d9c:	e034      	b.n	8008e08 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8008d9e:	69bb      	ldr	r3, [r7, #24]
 8008da0:	015a      	lsls	r2, r3, #5
 8008da2:	697b      	ldr	r3, [r7, #20]
 8008da4:	4413      	add	r3, r2
 8008da6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008db4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008db6:	693b      	ldr	r3, [r7, #16]
 8008db8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8008dbc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8008dbe:	693b      	ldr	r3, [r7, #16]
 8008dc0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008dc4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	015a      	lsls	r2, r3, #5
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	4413      	add	r3, r2
 8008dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008dd2:	461a      	mov	r2, r3
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	3301      	adds	r3, #1
 8008ddc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008de4:	d80c      	bhi.n	8008e00 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008de6:	69bb      	ldr	r3, [r7, #24]
 8008de8:	015a      	lsls	r2, r3, #5
 8008dea:	697b      	ldr	r3, [r7, #20]
 8008dec:	4413      	add	r3, r2
 8008dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008df8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008dfc:	d0ec      	beq.n	8008dd8 <USB_StopHost+0xc8>
 8008dfe:	e000      	b.n	8008e02 <USB_StopHost+0xf2>
        break;
 8008e00:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8008e02:	69bb      	ldr	r3, [r7, #24]
 8008e04:	3301      	adds	r3, #1
 8008e06:	61bb      	str	r3, [r7, #24]
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	2b0f      	cmp	r3, #15
 8008e0c:	d9c7      	bls.n	8008d9e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8008e14:	461a      	mov	r2, r3
 8008e16:	f04f 33ff 	mov.w	r3, #4294967295
 8008e1a:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	f04f 32ff 	mov.w	r2, #4294967295
 8008e22:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8008e24:	6878      	ldr	r0, [r7, #4]
 8008e26:	f7ff f880 	bl	8007f2a <USB_EnableGlobalInt>

  return ret;
 8008e2a:	7ffb      	ldrb	r3, [r7, #31]
}
 8008e2c:	4618      	mov	r0, r3
 8008e2e:	3720      	adds	r7, #32
 8008e30:	46bd      	mov	sp, r7
 8008e32:	bd80      	pop	{r7, pc}

08008e34 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008e34:	b590      	push	{r4, r7, lr}
 8008e36:	b089      	sub	sp, #36	; 0x24
 8008e38:	af04      	add	r7, sp, #16
 8008e3a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008e3c:	2301      	movs	r3, #1
 8008e3e:	2202      	movs	r2, #2
 8008e40:	2102      	movs	r1, #2
 8008e42:	6878      	ldr	r0, [r7, #4]
 8008e44:	f000 fc66 	bl	8009714 <USBH_FindInterface>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008e4c:	7bfb      	ldrb	r3, [r7, #15]
 8008e4e:	2bff      	cmp	r3, #255	; 0xff
 8008e50:	d002      	beq.n	8008e58 <USBH_CDC_InterfaceInit+0x24>
 8008e52:	7bfb      	ldrb	r3, [r7, #15]
 8008e54:	2b01      	cmp	r3, #1
 8008e56:	d901      	bls.n	8008e5c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008e58:	2302      	movs	r3, #2
 8008e5a:	e13d      	b.n	80090d8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008e5c:	7bfb      	ldrb	r3, [r7, #15]
 8008e5e:	4619      	mov	r1, r3
 8008e60:	6878      	ldr	r0, [r7, #4]
 8008e62:	f000 fc3b 	bl	80096dc <USBH_SelectInterface>
 8008e66:	4603      	mov	r3, r0
 8008e68:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008e6a:	7bbb      	ldrb	r3, [r7, #14]
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d001      	beq.n	8008e74 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008e70:	2302      	movs	r3, #2
 8008e72:	e131      	b.n	80090d8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8008e7a:	2050      	movs	r0, #80	; 0x50
 8008e7c:	f002 fad2 	bl	800b424 <malloc>
 8008e80:	4603      	mov	r3, r0
 8008e82:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e8a:	69db      	ldr	r3, [r3, #28]
 8008e8c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d101      	bne.n	8008e98 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008e94:	2302      	movs	r3, #2
 8008e96:	e11f      	b.n	80090d8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008e98:	2250      	movs	r2, #80	; 0x50
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	68b8      	ldr	r0, [r7, #8]
 8008e9e:	f002 fb7d 	bl	800b59c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008ea2:	7bfb      	ldrb	r3, [r7, #15]
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	211a      	movs	r1, #26
 8008ea8:	fb01 f303 	mul.w	r3, r1, r3
 8008eac:	4413      	add	r3, r2
 8008eae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008eb2:	781b      	ldrb	r3, [r3, #0]
 8008eb4:	b25b      	sxtb	r3, r3
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	da15      	bge.n	8008ee6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008eba:	7bfb      	ldrb	r3, [r7, #15]
 8008ebc:	687a      	ldr	r2, [r7, #4]
 8008ebe:	211a      	movs	r1, #26
 8008ec0:	fb01 f303 	mul.w	r3, r1, r3
 8008ec4:	4413      	add	r3, r2
 8008ec6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008eca:	781a      	ldrb	r2, [r3, #0]
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008ed0:	7bfb      	ldrb	r3, [r7, #15]
 8008ed2:	687a      	ldr	r2, [r7, #4]
 8008ed4:	211a      	movs	r1, #26
 8008ed6:	fb01 f303 	mul.w	r3, r1, r3
 8008eda:	4413      	add	r3, r2
 8008edc:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008ee0:	881a      	ldrh	r2, [r3, #0]
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008ee6:	68bb      	ldr	r3, [r7, #8]
 8008ee8:	785b      	ldrb	r3, [r3, #1]
 8008eea:	4619      	mov	r1, r3
 8008eec:	6878      	ldr	r0, [r7, #4]
 8008eee:	f001 ff2e 	bl	800ad4e <USBH_AllocPipe>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	68bb      	ldr	r3, [r7, #8]
 8008ef8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008efa:	68bb      	ldr	r3, [r7, #8]
 8008efc:	7819      	ldrb	r1, [r3, #0]
 8008efe:	68bb      	ldr	r3, [r7, #8]
 8008f00:	7858      	ldrb	r0, [r3, #1]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	8952      	ldrh	r2, [r2, #10]
 8008f12:	9202      	str	r2, [sp, #8]
 8008f14:	2203      	movs	r2, #3
 8008f16:	9201      	str	r2, [sp, #4]
 8008f18:	9300      	str	r3, [sp, #0]
 8008f1a:	4623      	mov	r3, r4
 8008f1c:	4602      	mov	r2, r0
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f001 fee6 	bl	800acf0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	2200      	movs	r2, #0
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	6878      	ldr	r0, [r7, #4]
 8008f2e:	f002 f9f5 	bl	800b31c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008f32:	2300      	movs	r3, #0
 8008f34:	2200      	movs	r2, #0
 8008f36:	210a      	movs	r1, #10
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fbeb 	bl	8009714 <USBH_FindInterface>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008f42:	7bfb      	ldrb	r3, [r7, #15]
 8008f44:	2bff      	cmp	r3, #255	; 0xff
 8008f46:	d002      	beq.n	8008f4e <USBH_CDC_InterfaceInit+0x11a>
 8008f48:	7bfb      	ldrb	r3, [r7, #15]
 8008f4a:	2b01      	cmp	r3, #1
 8008f4c:	d901      	bls.n	8008f52 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008f4e:	2302      	movs	r3, #2
 8008f50:	e0c2      	b.n	80090d8 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008f52:	7bfb      	ldrb	r3, [r7, #15]
 8008f54:	687a      	ldr	r2, [r7, #4]
 8008f56:	211a      	movs	r1, #26
 8008f58:	fb01 f303 	mul.w	r3, r1, r3
 8008f5c:	4413      	add	r3, r2
 8008f5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008f62:	781b      	ldrb	r3, [r3, #0]
 8008f64:	b25b      	sxtb	r3, r3
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	da16      	bge.n	8008f98 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008f6a:	7bfb      	ldrb	r3, [r7, #15]
 8008f6c:	687a      	ldr	r2, [r7, #4]
 8008f6e:	211a      	movs	r1, #26
 8008f70:	fb01 f303 	mul.w	r3, r1, r3
 8008f74:	4413      	add	r3, r2
 8008f76:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008f7a:	781a      	ldrb	r2, [r3, #0]
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008f80:	7bfb      	ldrb	r3, [r7, #15]
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	211a      	movs	r1, #26
 8008f86:	fb01 f303 	mul.w	r3, r1, r3
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008f90:	881a      	ldrh	r2, [r3, #0]
 8008f92:	68bb      	ldr	r3, [r7, #8]
 8008f94:	835a      	strh	r2, [r3, #26]
 8008f96:	e015      	b.n	8008fc4 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008f98:	7bfb      	ldrb	r3, [r7, #15]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	211a      	movs	r1, #26
 8008f9e:	fb01 f303 	mul.w	r3, r1, r3
 8008fa2:	4413      	add	r3, r2
 8008fa4:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8008fa8:	781a      	ldrb	r2, [r3, #0]
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
 8008fb0:	687a      	ldr	r2, [r7, #4]
 8008fb2:	211a      	movs	r1, #26
 8008fb4:	fb01 f303 	mul.w	r3, r1, r3
 8008fb8:	4413      	add	r3, r2
 8008fba:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8008fbe:	881a      	ldrh	r2, [r3, #0]
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008fc4:	7bfb      	ldrb	r3, [r7, #15]
 8008fc6:	687a      	ldr	r2, [r7, #4]
 8008fc8:	211a      	movs	r1, #26
 8008fca:	fb01 f303 	mul.w	r3, r1, r3
 8008fce:	4413      	add	r3, r2
 8008fd0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	b25b      	sxtb	r3, r3
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	da16      	bge.n	800900a <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008fdc:	7bfb      	ldrb	r3, [r7, #15]
 8008fde:	687a      	ldr	r2, [r7, #4]
 8008fe0:	211a      	movs	r1, #26
 8008fe2:	fb01 f303 	mul.w	r3, r1, r3
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f203 3356 	addw	r3, r3, #854	; 0x356
 8008fec:	781a      	ldrb	r2, [r3, #0]
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008ff2:	7bfb      	ldrb	r3, [r7, #15]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	211a      	movs	r1, #26
 8008ff8:	fb01 f303 	mul.w	r3, r1, r3
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009002:	881a      	ldrh	r2, [r3, #0]
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	835a      	strh	r2, [r3, #26]
 8009008:	e015      	b.n	8009036 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800900a:	7bfb      	ldrb	r3, [r7, #15]
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	211a      	movs	r1, #26
 8009010:	fb01 f303 	mul.w	r3, r1, r3
 8009014:	4413      	add	r3, r2
 8009016:	f203 3356 	addw	r3, r3, #854	; 0x356
 800901a:	781a      	ldrb	r2, [r3, #0]
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009020:	7bfb      	ldrb	r3, [r7, #15]
 8009022:	687a      	ldr	r2, [r7, #4]
 8009024:	211a      	movs	r1, #26
 8009026:	fb01 f303 	mul.w	r3, r1, r3
 800902a:	4413      	add	r3, r2
 800902c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8009030:	881a      	ldrh	r2, [r3, #0]
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	7b9b      	ldrb	r3, [r3, #14]
 800903a:	4619      	mov	r1, r3
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f001 fe86 	bl	800ad4e <USBH_AllocPipe>
 8009042:	4603      	mov	r3, r0
 8009044:	461a      	mov	r2, r3
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	7bdb      	ldrb	r3, [r3, #15]
 800904e:	4619      	mov	r1, r3
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f001 fe7c 	bl	800ad4e <USBH_AllocPipe>
 8009056:	4603      	mov	r3, r0
 8009058:	461a      	mov	r2, r3
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	7b59      	ldrb	r1, [r3, #13]
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	7b98      	ldrb	r0, [r3, #14]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8009072:	68ba      	ldr	r2, [r7, #8]
 8009074:	8b12      	ldrh	r2, [r2, #24]
 8009076:	9202      	str	r2, [sp, #8]
 8009078:	2202      	movs	r2, #2
 800907a:	9201      	str	r2, [sp, #4]
 800907c:	9300      	str	r3, [sp, #0]
 800907e:	4623      	mov	r3, r4
 8009080:	4602      	mov	r2, r0
 8009082:	6878      	ldr	r0, [r7, #4]
 8009084:	f001 fe34 	bl	800acf0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	7b19      	ldrb	r1, [r3, #12]
 800908c:	68bb      	ldr	r3, [r7, #8]
 800908e:	7bd8      	ldrb	r0, [r3, #15]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800909c:	68ba      	ldr	r2, [r7, #8]
 800909e:	8b52      	ldrh	r2, [r2, #26]
 80090a0:	9202      	str	r2, [sp, #8]
 80090a2:	2202      	movs	r2, #2
 80090a4:	9201      	str	r2, [sp, #4]
 80090a6:	9300      	str	r3, [sp, #0]
 80090a8:	4623      	mov	r3, r4
 80090aa:	4602      	mov	r2, r0
 80090ac:	6878      	ldr	r0, [r7, #4]
 80090ae:	f001 fe1f 	bl	800acf0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80090b2:	68bb      	ldr	r3, [r7, #8]
 80090b4:	2200      	movs	r2, #0
 80090b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	7b5b      	ldrb	r3, [r3, #13]
 80090be:	2200      	movs	r2, #0
 80090c0:	4619      	mov	r1, r3
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f002 f92a 	bl	800b31c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80090c8:	68bb      	ldr	r3, [r7, #8]
 80090ca:	7b1b      	ldrb	r3, [r3, #12]
 80090cc:	2200      	movs	r2, #0
 80090ce:	4619      	mov	r1, r3
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f002 f923 	bl	800b31c <USBH_LL_SetToggle>

  return USBH_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3714      	adds	r7, #20
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd90      	pop	{r4, r7, pc}

080090e0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b084      	sub	sp, #16
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80090ee:	69db      	ldr	r3, [r3, #28]
 80090f0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	781b      	ldrb	r3, [r3, #0]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00e      	beq.n	8009118 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80090fa:	68fb      	ldr	r3, [r7, #12]
 80090fc:	781b      	ldrb	r3, [r3, #0]
 80090fe:	4619      	mov	r1, r3
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f001 fe14 	bl	800ad2e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	781b      	ldrb	r3, [r3, #0]
 800910a:	4619      	mov	r1, r3
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f001 fe3f 	bl	800ad90 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	2200      	movs	r2, #0
 8009116:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	7b1b      	ldrb	r3, [r3, #12]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d00e      	beq.n	800913e <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	7b1b      	ldrb	r3, [r3, #12]
 8009124:	4619      	mov	r1, r3
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f001 fe01 	bl	800ad2e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	7b1b      	ldrb	r3, [r3, #12]
 8009130:	4619      	mov	r1, r3
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f001 fe2c 	bl	800ad90 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	2200      	movs	r2, #0
 800913c:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	7b5b      	ldrb	r3, [r3, #13]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d00e      	beq.n	8009164 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	7b5b      	ldrb	r3, [r3, #13]
 800914a:	4619      	mov	r1, r3
 800914c:	6878      	ldr	r0, [r7, #4]
 800914e:	f001 fdee 	bl	800ad2e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	7b5b      	ldrb	r3, [r3, #13]
 8009156:	4619      	mov	r1, r3
 8009158:	6878      	ldr	r0, [r7, #4]
 800915a:	f001 fe19 	bl	800ad90 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	2200      	movs	r2, #0
 8009162:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800916a:	69db      	ldr	r3, [r3, #28]
 800916c:	2b00      	cmp	r3, #0
 800916e:	d00b      	beq.n	8009188 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009176:	69db      	ldr	r3, [r3, #28]
 8009178:	4618      	mov	r0, r3
 800917a:	f002 f95b 	bl	800b434 <free>
    phost->pActiveClass->pData = 0U;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009184:	2200      	movs	r2, #0
 8009186:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009188:	2300      	movs	r3, #0
}
 800918a:	4618      	mov	r0, r3
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	bd80      	pop	{r7, pc}

08009192 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009192:	b580      	push	{r7, lr}
 8009194:	b084      	sub	sp, #16
 8009196:	af00      	add	r7, sp, #0
 8009198:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091a0:	69db      	ldr	r3, [r3, #28]
 80091a2:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	3340      	adds	r3, #64	; 0x40
 80091a8:	4619      	mov	r1, r3
 80091aa:	6878      	ldr	r0, [r7, #4]
 80091ac:	f000 f8b1 	bl	8009312 <GetLineCoding>
 80091b0:	4603      	mov	r3, r0
 80091b2:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80091b4:	7afb      	ldrb	r3, [r7, #11]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d105      	bne.n	80091c6 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80091c0:	2102      	movs	r1, #2
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80091c6:	7afb      	ldrb	r3, [r7, #11]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3710      	adds	r7, #16
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b084      	sub	sp, #16
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80091d8:	2301      	movs	r3, #1
 80091da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80091dc:	2300      	movs	r3, #0
 80091de:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80091e6:	69db      	ldr	r3, [r3, #28]
 80091e8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80091ea:	68bb      	ldr	r3, [r7, #8]
 80091ec:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80091f0:	2b04      	cmp	r3, #4
 80091f2:	d877      	bhi.n	80092e4 <USBH_CDC_Process+0x114>
 80091f4:	a201      	add	r2, pc, #4	; (adr r2, 80091fc <USBH_CDC_Process+0x2c>)
 80091f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80091fa:	bf00      	nop
 80091fc:	08009211 	.word	0x08009211
 8009200:	08009217 	.word	0x08009217
 8009204:	08009247 	.word	0x08009247
 8009208:	080092bb 	.word	0x080092bb
 800920c:	080092c9 	.word	0x080092c9
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009210:	2300      	movs	r3, #0
 8009212:	73fb      	strb	r3, [r7, #15]
      break;
 8009214:	e06d      	b.n	80092f2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009216:	68bb      	ldr	r3, [r7, #8]
 8009218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800921a:	4619      	mov	r1, r3
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f000 f897 	bl	8009350 <SetLineCoding>
 8009222:	4603      	mov	r3, r0
 8009224:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009226:	7bbb      	ldrb	r3, [r7, #14]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d104      	bne.n	8009236 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800922c:	68bb      	ldr	r3, [r7, #8]
 800922e:	2202      	movs	r2, #2
 8009230:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009234:	e058      	b.n	80092e8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009236:	7bbb      	ldrb	r3, [r7, #14]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d055      	beq.n	80092e8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800923c:	68bb      	ldr	r3, [r7, #8]
 800923e:	2204      	movs	r2, #4
 8009240:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8009244:	e050      	b.n	80092e8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	3340      	adds	r3, #64	; 0x40
 800924a:	4619      	mov	r1, r3
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f000 f860 	bl	8009312 <GetLineCoding>
 8009252:	4603      	mov	r3, r0
 8009254:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009256:	7bbb      	ldrb	r3, [r7, #14]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d126      	bne.n	80092aa <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800925c:	68bb      	ldr	r3, [r7, #8]
 800925e:	2200      	movs	r2, #0
 8009260:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009264:	68bb      	ldr	r3, [r7, #8]
 8009266:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800926e:	791b      	ldrb	r3, [r3, #4]
 8009270:	429a      	cmp	r2, r3
 8009272:	d13b      	bne.n	80092ec <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800927e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009280:	429a      	cmp	r2, r3
 8009282:	d133      	bne.n	80092ec <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009284:	68bb      	ldr	r3, [r7, #8]
 8009286:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800928e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009290:	429a      	cmp	r2, r3
 8009292:	d12b      	bne.n	80092ec <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800929c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800929e:	429a      	cmp	r2, r3
 80092a0:	d124      	bne.n	80092ec <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f000 f958 	bl	8009558 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80092a8:	e020      	b.n	80092ec <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80092aa:	7bbb      	ldrb	r3, [r7, #14]
 80092ac:	2b01      	cmp	r3, #1
 80092ae:	d01d      	beq.n	80092ec <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80092b0:	68bb      	ldr	r3, [r7, #8]
 80092b2:	2204      	movs	r2, #4
 80092b4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80092b8:	e018      	b.n	80092ec <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f000 f867 	bl	800938e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80092c0:	6878      	ldr	r0, [r7, #4]
 80092c2:	f000 f8da 	bl	800947a <CDC_ProcessReception>
      break;
 80092c6:	e014      	b.n	80092f2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80092c8:	2100      	movs	r1, #0
 80092ca:	6878      	ldr	r0, [r7, #4]
 80092cc:	f000 ffef 	bl	800a2ae <USBH_ClrFeature>
 80092d0:	4603      	mov	r3, r0
 80092d2:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80092d4:	7bbb      	ldrb	r3, [r7, #14]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d10a      	bne.n	80092f0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	2200      	movs	r2, #0
 80092de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80092e2:	e005      	b.n	80092f0 <USBH_CDC_Process+0x120>

    default:
      break;
 80092e4:	bf00      	nop
 80092e6:	e004      	b.n	80092f2 <USBH_CDC_Process+0x122>
      break;
 80092e8:	bf00      	nop
 80092ea:	e002      	b.n	80092f2 <USBH_CDC_Process+0x122>
      break;
 80092ec:	bf00      	nop
 80092ee:	e000      	b.n	80092f2 <USBH_CDC_Process+0x122>
      break;
 80092f0:	bf00      	nop

  }

  return status;
 80092f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b083      	sub	sp, #12
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	370c      	adds	r7, #12
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8009312:	b580      	push	{r7, lr}
 8009314:	b082      	sub	sp, #8
 8009316:	af00      	add	r7, sp, #0
 8009318:	6078      	str	r0, [r7, #4]
 800931a:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	22a1      	movs	r2, #161	; 0xa1
 8009320:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2221      	movs	r2, #33	; 0x21
 8009326:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	2200      	movs	r2, #0
 800932c:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	2200      	movs	r2, #0
 8009332:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2207      	movs	r2, #7
 8009338:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	2207      	movs	r2, #7
 800933e:	4619      	mov	r1, r3
 8009340:	6878      	ldr	r0, [r7, #4]
 8009342:	f001 fa83 	bl	800a84c <USBH_CtlReq>
 8009346:	4603      	mov	r3, r0
}
 8009348:	4618      	mov	r0, r3
 800934a:	3708      	adds	r7, #8
 800934c:	46bd      	mov	sp, r7
 800934e:	bd80      	pop	{r7, pc}

08009350 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2221      	movs	r2, #33	; 0x21
 800935e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	2220      	movs	r2, #32
 8009364:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	2200      	movs	r2, #0
 800936a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2200      	movs	r2, #0
 8009370:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2207      	movs	r2, #7
 8009376:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	2207      	movs	r2, #7
 800937c:	4619      	mov	r1, r3
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f001 fa64 	bl	800a84c <USBH_CtlReq>
 8009384:	4603      	mov	r3, r0
}
 8009386:	4618      	mov	r0, r3
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800938e:	b580      	push	{r7, lr}
 8009390:	b086      	sub	sp, #24
 8009392:	af02      	add	r7, sp, #8
 8009394:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800939c:	69db      	ldr	r3, [r3, #28]
 800939e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80093a0:	2300      	movs	r3, #0
 80093a2:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80093aa:	2b01      	cmp	r3, #1
 80093ac:	d002      	beq.n	80093b4 <CDC_ProcessTransmission+0x26>
 80093ae:	2b02      	cmp	r3, #2
 80093b0:	d023      	beq.n	80093fa <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80093b2:	e05e      	b.n	8009472 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b8:	68fa      	ldr	r2, [r7, #12]
 80093ba:	8b12      	ldrh	r2, [r2, #24]
 80093bc:	4293      	cmp	r3, r2
 80093be:	d90b      	bls.n	80093d8 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	69d9      	ldr	r1, [r3, #28]
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	8b1a      	ldrh	r2, [r3, #24]
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	7b5b      	ldrb	r3, [r3, #13]
 80093cc:	2001      	movs	r0, #1
 80093ce:	9000      	str	r0, [sp, #0]
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f001 fc4a 	bl	800ac6a <USBH_BulkSendData>
 80093d6:	e00b      	b.n	80093f0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80093e0:	b29a      	uxth	r2, r3
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	7b5b      	ldrb	r3, [r3, #13]
 80093e6:	2001      	movs	r0, #1
 80093e8:	9000      	str	r0, [sp, #0]
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f001 fc3d 	bl	800ac6a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2202      	movs	r2, #2
 80093f4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80093f8:	e03b      	b.n	8009472 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	7b5b      	ldrb	r3, [r3, #13]
 80093fe:	4619      	mov	r1, r3
 8009400:	6878      	ldr	r0, [r7, #4]
 8009402:	f001 ff61 	bl	800b2c8 <USBH_LL_GetURBState>
 8009406:	4603      	mov	r3, r0
 8009408:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800940a:	7afb      	ldrb	r3, [r7, #11]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d128      	bne.n	8009462 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009414:	68fa      	ldr	r2, [r7, #12]
 8009416:	8b12      	ldrh	r2, [r2, #24]
 8009418:	4293      	cmp	r3, r2
 800941a:	d90e      	bls.n	800943a <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009420:	68fa      	ldr	r2, [r7, #12]
 8009422:	8b12      	ldrh	r2, [r2, #24]
 8009424:	1a9a      	subs	r2, r3, r2
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	69db      	ldr	r3, [r3, #28]
 800942e:	68fa      	ldr	r2, [r7, #12]
 8009430:	8b12      	ldrh	r2, [r2, #24]
 8009432:	441a      	add	r2, r3
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	61da      	str	r2, [r3, #28]
 8009438:	e002      	b.n	8009440 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2200      	movs	r2, #0
 800943e:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009444:	2b00      	cmp	r3, #0
 8009446:	d004      	beq.n	8009452 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2201      	movs	r2, #1
 800944c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009450:	e00e      	b.n	8009470 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	2200      	movs	r2, #0
 8009456:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800945a:	6878      	ldr	r0, [r7, #4]
 800945c:	f000 f868 	bl	8009530 <USBH_CDC_TransmitCallback>
      break;
 8009460:	e006      	b.n	8009470 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8009462:	7afb      	ldrb	r3, [r7, #11]
 8009464:	2b02      	cmp	r3, #2
 8009466:	d103      	bne.n	8009470 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2201      	movs	r2, #1
 800946c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8009470:	bf00      	nop
  }
}
 8009472:	bf00      	nop
 8009474:	3710      	adds	r7, #16
 8009476:	46bd      	mov	sp, r7
 8009478:	bd80      	pop	{r7, pc}

0800947a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800947a:	b580      	push	{r7, lr}
 800947c:	b086      	sub	sp, #24
 800947e:	af00      	add	r7, sp, #0
 8009480:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009488:	69db      	ldr	r3, [r3, #28]
 800948a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800948c:	2300      	movs	r3, #0
 800948e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009490:	697b      	ldr	r3, [r7, #20]
 8009492:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8009496:	2b03      	cmp	r3, #3
 8009498:	d002      	beq.n	80094a0 <CDC_ProcessReception+0x26>
 800949a:	2b04      	cmp	r3, #4
 800949c:	d00e      	beq.n	80094bc <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800949e:	e043      	b.n	8009528 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80094a0:	697b      	ldr	r3, [r7, #20]
 80094a2:	6a19      	ldr	r1, [r3, #32]
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	8b5a      	ldrh	r2, [r3, #26]
 80094a8:	697b      	ldr	r3, [r7, #20]
 80094aa:	7b1b      	ldrb	r3, [r3, #12]
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f001 fc01 	bl	800acb4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80094b2:	697b      	ldr	r3, [r7, #20]
 80094b4:	2204      	movs	r2, #4
 80094b6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80094ba:	e035      	b.n	8009528 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80094bc:	697b      	ldr	r3, [r7, #20]
 80094be:	7b1b      	ldrb	r3, [r3, #12]
 80094c0:	4619      	mov	r1, r3
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f001 ff00 	bl	800b2c8 <USBH_LL_GetURBState>
 80094c8:	4603      	mov	r3, r0
 80094ca:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80094cc:	7cfb      	ldrb	r3, [r7, #19]
 80094ce:	2b01      	cmp	r3, #1
 80094d0:	d129      	bne.n	8009526 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	7b1b      	ldrb	r3, [r3, #12]
 80094d6:	4619      	mov	r1, r3
 80094d8:	6878      	ldr	r0, [r7, #4]
 80094da:	f001 fe63 	bl	800b1a4 <USBH_LL_GetLastXferSize>
 80094de:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094e4:	68fa      	ldr	r2, [r7, #12]
 80094e6:	429a      	cmp	r2, r3
 80094e8:	d016      	beq.n	8009518 <CDC_ProcessReception+0x9e>
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	8b5b      	ldrh	r3, [r3, #26]
 80094ee:	461a      	mov	r2, r3
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d910      	bls.n	8009518 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	1ad2      	subs	r2, r2, r3
 80094fe:	697b      	ldr	r3, [r7, #20]
 8009500:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	6a1a      	ldr	r2, [r3, #32]
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	441a      	add	r2, r3
 800950a:	697b      	ldr	r3, [r7, #20]
 800950c:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800950e:	697b      	ldr	r3, [r7, #20]
 8009510:	2203      	movs	r2, #3
 8009512:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8009516:	e006      	b.n	8009526 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	2200      	movs	r2, #0
 800951c:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009520:	6878      	ldr	r0, [r7, #4]
 8009522:	f000 f80f 	bl	8009544 <USBH_CDC_ReceiveCallback>
      break;
 8009526:	bf00      	nop
  }
}
 8009528:	bf00      	nop
 800952a:	3718      	adds	r7, #24
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}

08009530 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009538:	bf00      	nop
 800953a:	370c      	adds	r7, #12
 800953c:	46bd      	mov	sp, r7
 800953e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009542:	4770      	bx	lr

08009544 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009544:	b480      	push	{r7}
 8009546:	b083      	sub	sp, #12
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800954c:	bf00      	nop
 800954e:	370c      	adds	r7, #12
 8009550:	46bd      	mov	sp, r7
 8009552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009556:	4770      	bx	lr

08009558 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009558:	b480      	push	{r7}
 800955a:	b083      	sub	sp, #12
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009560:	bf00      	nop
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 800956c:	b580      	push	{r7, lr}
 800956e:	b084      	sub	sp, #16
 8009570:	af00      	add	r7, sp, #0
 8009572:	60f8      	str	r0, [r7, #12]
 8009574:	60b9      	str	r1, [r7, #8]
 8009576:	4613      	mov	r3, r2
 8009578:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	2b00      	cmp	r3, #0
 800957e:	d101      	bne.n	8009584 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8009580:	2302      	movs	r3, #2
 8009582:	e029      	b.n	80095d8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	79fa      	ldrb	r2, [r7, #7]
 8009588:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2200      	movs	r2, #0
 8009590:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2200      	movs	r2, #0
 8009598:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 f81f 	bl	80095e0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2200      	movs	r2, #0
 80095a6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	2200      	movs	r2, #0
 80095b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	2200      	movs	r2, #0
 80095be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80095c2:	68bb      	ldr	r3, [r7, #8]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d003      	beq.n	80095d0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	68ba      	ldr	r2, [r7, #8]
 80095cc:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80095d0:	68f8      	ldr	r0, [r7, #12]
 80095d2:	f001 fd33 	bl	800b03c <USBH_LL_Init>

  return USBH_OK;
 80095d6:	2300      	movs	r3, #0
}
 80095d8:	4618      	mov	r0, r3
 80095da:	3710      	adds	r7, #16
 80095dc:	46bd      	mov	sp, r7
 80095de:	bd80      	pop	{r7, pc}

080095e0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80095e0:	b480      	push	{r7}
 80095e2:	b085      	sub	sp, #20
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80095e8:	2300      	movs	r3, #0
 80095ea:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80095ec:	2300      	movs	r3, #0
 80095ee:	60fb      	str	r3, [r7, #12]
 80095f0:	e009      	b.n	8009606 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	33e0      	adds	r3, #224	; 0xe0
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4413      	add	r3, r2
 80095fc:	2200      	movs	r2, #0
 80095fe:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	3301      	adds	r3, #1
 8009604:	60fb      	str	r3, [r7, #12]
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	2b0f      	cmp	r3, #15
 800960a:	d9f2      	bls.n	80095f2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800960c:	2300      	movs	r3, #0
 800960e:	60fb      	str	r3, [r7, #12]
 8009610:	e009      	b.n	8009626 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009612:	687a      	ldr	r2, [r7, #4]
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	4413      	add	r3, r2
 8009618:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800961c:	2200      	movs	r2, #0
 800961e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	3301      	adds	r3, #1
 8009624:	60fb      	str	r3, [r7, #12]
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800962c:	d3f1      	bcc.n	8009612 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	2200      	movs	r2, #0
 8009632:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	2200      	movs	r2, #0
 8009638:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2201      	movs	r2, #1
 800963e:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	2200      	movs	r2, #0
 8009644:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	2201      	movs	r2, #1
 800964c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2240      	movs	r2, #64	; 0x40
 8009652:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2200      	movs	r2, #0
 800965e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2201      	movs	r2, #1
 8009666:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2200      	movs	r2, #0
 800966e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2200      	movs	r2, #0
 8009676:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 800967a:	2300      	movs	r3, #0
}
 800967c:	4618      	mov	r0, r3
 800967e:	3714      	adds	r7, #20
 8009680:	46bd      	mov	sp, r7
 8009682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009686:	4770      	bx	lr

08009688 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8009688:	b480      	push	{r7}
 800968a:	b085      	sub	sp, #20
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009692:	2300      	movs	r3, #0
 8009694:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	2b00      	cmp	r3, #0
 800969a:	d016      	beq.n	80096ca <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	d10e      	bne.n	80096c4 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80096ac:	1c59      	adds	r1, r3, #1
 80096ae:	687a      	ldr	r2, [r7, #4]
 80096b0:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80096b4:	687a      	ldr	r2, [r7, #4]
 80096b6:	33de      	adds	r3, #222	; 0xde
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	73fb      	strb	r3, [r7, #15]
 80096c2:	e004      	b.n	80096ce <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80096c4:	2302      	movs	r3, #2
 80096c6:	73fb      	strb	r3, [r7, #15]
 80096c8:	e001      	b.n	80096ce <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80096ca:	2302      	movs	r3, #2
 80096cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80096ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80096d0:	4618      	mov	r0, r3
 80096d2:	3714      	adds	r7, #20
 80096d4:	46bd      	mov	sp, r7
 80096d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096da:	4770      	bx	lr

080096dc <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80096dc:	b480      	push	{r7}
 80096de:	b085      	sub	sp, #20
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	460b      	mov	r3, r1
 80096e6:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80096e8:	2300      	movs	r3, #0
 80096ea:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80096f2:	78fa      	ldrb	r2, [r7, #3]
 80096f4:	429a      	cmp	r2, r3
 80096f6:	d204      	bcs.n	8009702 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	78fa      	ldrb	r2, [r7, #3]
 80096fc:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009700:	e001      	b.n	8009706 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009702:	2302      	movs	r3, #2
 8009704:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009706:	7bfb      	ldrb	r3, [r7, #15]
}
 8009708:	4618      	mov	r0, r3
 800970a:	3714      	adds	r7, #20
 800970c:	46bd      	mov	sp, r7
 800970e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009712:	4770      	bx	lr

08009714 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009714:	b480      	push	{r7}
 8009716:	b087      	sub	sp, #28
 8009718:	af00      	add	r7, sp, #0
 800971a:	6078      	str	r0, [r7, #4]
 800971c:	4608      	mov	r0, r1
 800971e:	4611      	mov	r1, r2
 8009720:	461a      	mov	r2, r3
 8009722:	4603      	mov	r3, r0
 8009724:	70fb      	strb	r3, [r7, #3]
 8009726:	460b      	mov	r3, r1
 8009728:	70bb      	strb	r3, [r7, #2]
 800972a:	4613      	mov	r3, r2
 800972c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800972e:	2300      	movs	r3, #0
 8009730:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009732:	2300      	movs	r3, #0
 8009734:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800973c:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800973e:	e025      	b.n	800978c <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8009740:	7dfb      	ldrb	r3, [r7, #23]
 8009742:	221a      	movs	r2, #26
 8009744:	fb02 f303 	mul.w	r3, r2, r3
 8009748:	3308      	adds	r3, #8
 800974a:	68fa      	ldr	r2, [r7, #12]
 800974c:	4413      	add	r3, r2
 800974e:	3302      	adds	r3, #2
 8009750:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	795b      	ldrb	r3, [r3, #5]
 8009756:	78fa      	ldrb	r2, [r7, #3]
 8009758:	429a      	cmp	r2, r3
 800975a:	d002      	beq.n	8009762 <USBH_FindInterface+0x4e>
 800975c:	78fb      	ldrb	r3, [r7, #3]
 800975e:	2bff      	cmp	r3, #255	; 0xff
 8009760:	d111      	bne.n	8009786 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009766:	78ba      	ldrb	r2, [r7, #2]
 8009768:	429a      	cmp	r2, r3
 800976a:	d002      	beq.n	8009772 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800976c:	78bb      	ldrb	r3, [r7, #2]
 800976e:	2bff      	cmp	r3, #255	; 0xff
 8009770:	d109      	bne.n	8009786 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009776:	787a      	ldrb	r2, [r7, #1]
 8009778:	429a      	cmp	r2, r3
 800977a:	d002      	beq.n	8009782 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800977c:	787b      	ldrb	r3, [r7, #1]
 800977e:	2bff      	cmp	r3, #255	; 0xff
 8009780:	d101      	bne.n	8009786 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009782:	7dfb      	ldrb	r3, [r7, #23]
 8009784:	e006      	b.n	8009794 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009786:	7dfb      	ldrb	r3, [r7, #23]
 8009788:	3301      	adds	r3, #1
 800978a:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800978c:	7dfb      	ldrb	r3, [r7, #23]
 800978e:	2b01      	cmp	r3, #1
 8009790:	d9d6      	bls.n	8009740 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009792:	23ff      	movs	r3, #255	; 0xff
}
 8009794:	4618      	mov	r0, r3
 8009796:	371c      	adds	r7, #28
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b082      	sub	sp, #8
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f001 fc83 	bl	800b0b4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80097ae:	2101      	movs	r1, #1
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f001 fd9c 	bl	800b2ee <USBH_LL_DriverVBUS>

  return USBH_OK;
 80097b6:	2300      	movs	r3, #0
}
 80097b8:	4618      	mov	r0, r3
 80097ba:	3708      	adds	r7, #8
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd80      	pop	{r7, pc}

080097c0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b088      	sub	sp, #32
 80097c4:	af04      	add	r7, sp, #16
 80097c6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80097c8:	2302      	movs	r3, #2
 80097ca:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80097cc:	2300      	movs	r3, #0
 80097ce:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	2b01      	cmp	r3, #1
 80097da:	d102      	bne.n	80097e2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2203      	movs	r2, #3
 80097e0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	781b      	ldrb	r3, [r3, #0]
 80097e6:	b2db      	uxtb	r3, r3
 80097e8:	2b0b      	cmp	r3, #11
 80097ea:	f200 81be 	bhi.w	8009b6a <USBH_Process+0x3aa>
 80097ee:	a201      	add	r2, pc, #4	; (adr r2, 80097f4 <USBH_Process+0x34>)
 80097f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097f4:	08009825 	.word	0x08009825
 80097f8:	08009857 	.word	0x08009857
 80097fc:	080098bf 	.word	0x080098bf
 8009800:	08009b05 	.word	0x08009b05
 8009804:	08009b6b 	.word	0x08009b6b
 8009808:	08009963 	.word	0x08009963
 800980c:	08009aab 	.word	0x08009aab
 8009810:	08009999 	.word	0x08009999
 8009814:	080099b9 	.word	0x080099b9
 8009818:	080099d9 	.word	0x080099d9
 800981c:	08009a1d 	.word	0x08009a1d
 8009820:	08009aed 	.word	0x08009aed
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800982a:	b2db      	uxtb	r3, r3
 800982c:	2b00      	cmp	r3, #0
 800982e:	f000 819e 	beq.w	8009b6e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2201      	movs	r2, #1
 8009836:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009838:	20c8      	movs	r0, #200	; 0xc8
 800983a:	f001 fd9f 	bl	800b37c <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f001 fc95 	bl	800b16e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2200      	movs	r2, #0
 8009848:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009854:	e18b      	b.n	8009b6e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800985c:	2b01      	cmp	r3, #1
 800985e:	d107      	bne.n	8009870 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	2202      	movs	r2, #2
 800986c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800986e:	e18d      	b.n	8009b8c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8009876:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800987a:	d914      	bls.n	80098a6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009882:	3301      	adds	r3, #1
 8009884:	b2da      	uxtb	r2, r3
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009892:	2b03      	cmp	r3, #3
 8009894:	d903      	bls.n	800989e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	220d      	movs	r2, #13
 800989a:	701a      	strb	r2, [r3, #0]
      break;
 800989c:	e176      	b.n	8009b8c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	701a      	strb	r2, [r3, #0]
      break;
 80098a4:	e172      	b.n	8009b8c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80098ac:	f103 020a 	add.w	r2, r3, #10
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80098b6:	200a      	movs	r0, #10
 80098b8:	f001 fd60 	bl	800b37c <USBH_Delay>
      break;
 80098bc:	e166      	b.n	8009b8c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	d005      	beq.n	80098d4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80098ce:	2104      	movs	r1, #4
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80098d4:	2064      	movs	r0, #100	; 0x64
 80098d6:	f001 fd51 	bl	800b37c <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 80098da:	6878      	ldr	r0, [r7, #4]
 80098dc:	f001 fc20 	bl	800b120 <USBH_LL_GetSpeed>
 80098e0:	4603      	mov	r3, r0
 80098e2:	461a      	mov	r2, r3
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2205      	movs	r2, #5
 80098ee:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80098f0:	2100      	movs	r1, #0
 80098f2:	6878      	ldr	r0, [r7, #4]
 80098f4:	f001 fa2b 	bl	800ad4e <USBH_AllocPipe>
 80098f8:	4603      	mov	r3, r0
 80098fa:	461a      	mov	r2, r3
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009900:	2180      	movs	r1, #128	; 0x80
 8009902:	6878      	ldr	r0, [r7, #4]
 8009904:	f001 fa23 	bl	800ad4e <USBH_AllocPipe>
 8009908:	4603      	mov	r3, r0
 800990a:	461a      	mov	r2, r3
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	7919      	ldrb	r1, [r3, #4]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009924:	b292      	uxth	r2, r2
 8009926:	9202      	str	r2, [sp, #8]
 8009928:	2200      	movs	r2, #0
 800992a:	9201      	str	r2, [sp, #4]
 800992c:	9300      	str	r3, [sp, #0]
 800992e:	4603      	mov	r3, r0
 8009930:	2280      	movs	r2, #128	; 0x80
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f001 f9dc 	bl	800acf0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	7959      	ldrb	r1, [r3, #5]
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800994c:	b292      	uxth	r2, r2
 800994e:	9202      	str	r2, [sp, #8]
 8009950:	2200      	movs	r2, #0
 8009952:	9201      	str	r2, [sp, #4]
 8009954:	9300      	str	r3, [sp, #0]
 8009956:	4603      	mov	r3, r0
 8009958:	2200      	movs	r2, #0
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	f001 f9c8 	bl	800acf0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009960:	e114      	b.n	8009b8c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009962:	6878      	ldr	r0, [r7, #4]
 8009964:	f000 f918 	bl	8009b98 <USBH_HandleEnum>
 8009968:	4603      	mov	r3, r0
 800996a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800996c:	7bbb      	ldrb	r3, [r7, #14]
 800996e:	b2db      	uxtb	r3, r3
 8009970:	2b00      	cmp	r3, #0
 8009972:	f040 80fe 	bne.w	8009b72 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	2200      	movs	r2, #0
 800997a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8009984:	2b01      	cmp	r3, #1
 8009986:	d103      	bne.n	8009990 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	2208      	movs	r2, #8
 800998c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800998e:	e0f0      	b.n	8009b72 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2207      	movs	r2, #7
 8009994:	701a      	strb	r2, [r3, #0]
      break;
 8009996:	e0ec      	b.n	8009b72 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800999e:	2b00      	cmp	r3, #0
 80099a0:	f000 80e9 	beq.w	8009b76 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80099aa:	2101      	movs	r1, #1
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	2208      	movs	r2, #8
 80099b4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80099b6:	e0de      	b.n	8009b76 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80099be:	b29b      	uxth	r3, r3
 80099c0:	4619      	mov	r1, r3
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fc2c 	bl	800a220 <USBH_SetCfg>
 80099c8:	4603      	mov	r3, r0
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f040 80d5 	bne.w	8009b7a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2209      	movs	r2, #9
 80099d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80099d6:	e0d0      	b.n	8009b7a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80099de:	f003 0320 	and.w	r3, r3, #32
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d016      	beq.n	8009a14 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 80099e6:	2101      	movs	r1, #1
 80099e8:	6878      	ldr	r0, [r7, #4]
 80099ea:	f000 fc3c 	bl	800a266 <USBH_SetFeature>
 80099ee:	4603      	mov	r3, r0
 80099f0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80099f2:	7bbb      	ldrb	r3, [r7, #14]
 80099f4:	b2db      	uxtb	r3, r3
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d103      	bne.n	8009a02 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	220a      	movs	r2, #10
 80099fe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a00:	e0bd      	b.n	8009b7e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8009a02:	7bbb      	ldrb	r3, [r7, #14]
 8009a04:	b2db      	uxtb	r3, r3
 8009a06:	2b03      	cmp	r3, #3
 8009a08:	f040 80b9 	bne.w	8009b7e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	220a      	movs	r2, #10
 8009a10:	701a      	strb	r2, [r3, #0]
      break;
 8009a12:	e0b4      	b.n	8009b7e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	220a      	movs	r2, #10
 8009a18:	701a      	strb	r2, [r3, #0]
      break;
 8009a1a:	e0b0      	b.n	8009b7e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	f000 80ad 	beq.w	8009b82 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009a30:	2300      	movs	r3, #0
 8009a32:	73fb      	strb	r3, [r7, #15]
 8009a34:	e016      	b.n	8009a64 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009a36:	7bfa      	ldrb	r2, [r7, #15]
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	32de      	adds	r2, #222	; 0xde
 8009a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a40:	791a      	ldrb	r2, [r3, #4]
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8009a48:	429a      	cmp	r2, r3
 8009a4a:	d108      	bne.n	8009a5e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009a4c:	7bfa      	ldrb	r2, [r7, #15]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	32de      	adds	r2, #222	; 0xde
 8009a52:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8009a5c:	e005      	b.n	8009a6a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009a5e:	7bfb      	ldrb	r3, [r7, #15]
 8009a60:	3301      	adds	r3, #1
 8009a62:	73fb      	strb	r3, [r7, #15]
 8009a64:	7bfb      	ldrb	r3, [r7, #15]
 8009a66:	2b00      	cmp	r3, #0
 8009a68:	d0e5      	beq.n	8009a36 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d016      	beq.n	8009aa2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009a7a:	689b      	ldr	r3, [r3, #8]
 8009a7c:	6878      	ldr	r0, [r7, #4]
 8009a7e:	4798      	blx	r3
 8009a80:	4603      	mov	r3, r0
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d109      	bne.n	8009a9a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2206      	movs	r2, #6
 8009a8a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009a92:	2103      	movs	r1, #3
 8009a94:	6878      	ldr	r0, [r7, #4]
 8009a96:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a98:	e073      	b.n	8009b82 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	220d      	movs	r2, #13
 8009a9e:	701a      	strb	r2, [r3, #0]
      break;
 8009aa0:	e06f      	b.n	8009b82 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	220d      	movs	r2, #13
 8009aa6:	701a      	strb	r2, [r3, #0]
      break;
 8009aa8:	e06b      	b.n	8009b82 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d017      	beq.n	8009ae4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	4798      	blx	r3
 8009ac0:	4603      	mov	r3, r0
 8009ac2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009ac4:	7bbb      	ldrb	r3, [r7, #14]
 8009ac6:	b2db      	uxtb	r3, r3
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d103      	bne.n	8009ad4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	220b      	movs	r2, #11
 8009ad0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009ad2:	e058      	b.n	8009b86 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8009ad4:	7bbb      	ldrb	r3, [r7, #14]
 8009ad6:	b2db      	uxtb	r3, r3
 8009ad8:	2b02      	cmp	r3, #2
 8009ada:	d154      	bne.n	8009b86 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	220d      	movs	r2, #13
 8009ae0:	701a      	strb	r2, [r3, #0]
      break;
 8009ae2:	e050      	b.n	8009b86 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	220d      	movs	r2, #13
 8009ae8:	701a      	strb	r2, [r3, #0]
      break;
 8009aea:	e04c      	b.n	8009b86 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d049      	beq.n	8009b8a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009afc:	695b      	ldr	r3, [r3, #20]
 8009afe:	6878      	ldr	r0, [r7, #4]
 8009b00:	4798      	blx	r3
      }
      break;
 8009b02:	e042      	b.n	8009b8a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8009b0c:	6878      	ldr	r0, [r7, #4]
 8009b0e:	f7ff fd67 	bl	80095e0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d009      	beq.n	8009b30 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009b22:	68db      	ldr	r3, [r3, #12]
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b36:	2b00      	cmp	r3, #0
 8009b38:	d005      	beq.n	8009b46 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009b40:	2105      	movs	r1, #5
 8009b42:	6878      	ldr	r0, [r7, #4]
 8009b44:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d107      	bne.n	8009b62 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009b5a:	6878      	ldr	r0, [r7, #4]
 8009b5c:	f7ff fe20 	bl	80097a0 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b60:	e014      	b.n	8009b8c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8009b62:	6878      	ldr	r0, [r7, #4]
 8009b64:	f001 faa6 	bl	800b0b4 <USBH_LL_Start>
      break;
 8009b68:	e010      	b.n	8009b8c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8009b6a:	bf00      	nop
 8009b6c:	e00e      	b.n	8009b8c <USBH_Process+0x3cc>
      break;
 8009b6e:	bf00      	nop
 8009b70:	e00c      	b.n	8009b8c <USBH_Process+0x3cc>
      break;
 8009b72:	bf00      	nop
 8009b74:	e00a      	b.n	8009b8c <USBH_Process+0x3cc>
    break;
 8009b76:	bf00      	nop
 8009b78:	e008      	b.n	8009b8c <USBH_Process+0x3cc>
      break;
 8009b7a:	bf00      	nop
 8009b7c:	e006      	b.n	8009b8c <USBH_Process+0x3cc>
      break;
 8009b7e:	bf00      	nop
 8009b80:	e004      	b.n	8009b8c <USBH_Process+0x3cc>
      break;
 8009b82:	bf00      	nop
 8009b84:	e002      	b.n	8009b8c <USBH_Process+0x3cc>
      break;
 8009b86:	bf00      	nop
 8009b88:	e000      	b.n	8009b8c <USBH_Process+0x3cc>
      break;
 8009b8a:	bf00      	nop
  }
  return USBH_OK;
 8009b8c:	2300      	movs	r3, #0
}
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}
 8009b96:	bf00      	nop

08009b98 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b088      	sub	sp, #32
 8009b9c:	af04      	add	r7, sp, #16
 8009b9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009ba0:	2301      	movs	r3, #1
 8009ba2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009ba4:	2301      	movs	r3, #1
 8009ba6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	785b      	ldrb	r3, [r3, #1]
 8009bac:	2b07      	cmp	r3, #7
 8009bae:	f200 81c1 	bhi.w	8009f34 <USBH_HandleEnum+0x39c>
 8009bb2:	a201      	add	r2, pc, #4	; (adr r2, 8009bb8 <USBH_HandleEnum+0x20>)
 8009bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009bb8:	08009bd9 	.word	0x08009bd9
 8009bbc:	08009c97 	.word	0x08009c97
 8009bc0:	08009d01 	.word	0x08009d01
 8009bc4:	08009d8f 	.word	0x08009d8f
 8009bc8:	08009df9 	.word	0x08009df9
 8009bcc:	08009e69 	.word	0x08009e69
 8009bd0:	08009eaf 	.word	0x08009eaf
 8009bd4:	08009ef5 	.word	0x08009ef5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009bd8:	2108      	movs	r1, #8
 8009bda:	6878      	ldr	r0, [r7, #4]
 8009bdc:	f000 fa50 	bl	800a080 <USBH_Get_DevDesc>
 8009be0:	4603      	mov	r3, r0
 8009be2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009be4:	7bbb      	ldrb	r3, [r7, #14]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d130      	bne.n	8009c4c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	2201      	movs	r2, #1
 8009bf8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	7919      	ldrb	r1, [r3, #4]
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009c0a:	687a      	ldr	r2, [r7, #4]
 8009c0c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009c0e:	b292      	uxth	r2, r2
 8009c10:	9202      	str	r2, [sp, #8]
 8009c12:	2200      	movs	r2, #0
 8009c14:	9201      	str	r2, [sp, #4]
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2280      	movs	r2, #128	; 0x80
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f001 f867 	bl	800acf0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	7959      	ldrb	r1, [r3, #5]
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009c32:	687a      	ldr	r2, [r7, #4]
 8009c34:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c36:	b292      	uxth	r2, r2
 8009c38:	9202      	str	r2, [sp, #8]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	9201      	str	r2, [sp, #4]
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	4603      	mov	r3, r0
 8009c42:	2200      	movs	r2, #0
 8009c44:	6878      	ldr	r0, [r7, #4]
 8009c46:	f001 f853 	bl	800acf0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009c4a:	e175      	b.n	8009f38 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c4c:	7bbb      	ldrb	r3, [r7, #14]
 8009c4e:	2b03      	cmp	r3, #3
 8009c50:	f040 8172 	bne.w	8009f38 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c5a:	3301      	adds	r3, #1
 8009c5c:	b2da      	uxtb	r2, r3
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c6a:	2b03      	cmp	r3, #3
 8009c6c:	d903      	bls.n	8009c76 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	220d      	movs	r2, #13
 8009c72:	701a      	strb	r2, [r3, #0]
      break;
 8009c74:	e160      	b.n	8009f38 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	795b      	ldrb	r3, [r3, #5]
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	6878      	ldr	r0, [r7, #4]
 8009c7e:	f001 f887 	bl	800ad90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	791b      	ldrb	r3, [r3, #4]
 8009c86:	4619      	mov	r1, r3
 8009c88:	6878      	ldr	r0, [r7, #4]
 8009c8a:	f001 f881 	bl	800ad90 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	701a      	strb	r2, [r3, #0]
      break;
 8009c94:	e150      	b.n	8009f38 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009c96:	2112      	movs	r1, #18
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	f000 f9f1 	bl	800a080 <USBH_Get_DevDesc>
 8009c9e:	4603      	mov	r3, r0
 8009ca0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009ca2:	7bbb      	ldrb	r3, [r7, #14]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d103      	bne.n	8009cb0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	2202      	movs	r2, #2
 8009cac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009cae:	e145      	b.n	8009f3c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009cb0:	7bbb      	ldrb	r3, [r7, #14]
 8009cb2:	2b03      	cmp	r3, #3
 8009cb4:	f040 8142 	bne.w	8009f3c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	b2da      	uxtb	r2, r3
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009cce:	2b03      	cmp	r3, #3
 8009cd0:	d903      	bls.n	8009cda <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	220d      	movs	r2, #13
 8009cd6:	701a      	strb	r2, [r3, #0]
      break;
 8009cd8:	e130      	b.n	8009f3c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	795b      	ldrb	r3, [r3, #5]
 8009cde:	4619      	mov	r1, r3
 8009ce0:	6878      	ldr	r0, [r7, #4]
 8009ce2:	f001 f855 	bl	800ad90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	791b      	ldrb	r3, [r3, #4]
 8009cea:	4619      	mov	r1, r3
 8009cec:	6878      	ldr	r0, [r7, #4]
 8009cee:	f001 f84f 	bl	800ad90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	2200      	movs	r2, #0
 8009cf6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	701a      	strb	r2, [r3, #0]
      break;
 8009cfe:	e11d      	b.n	8009f3c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009d00:	2101      	movs	r1, #1
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 fa68 	bl	800a1d8 <USBH_SetAddress>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d0c:	7bbb      	ldrb	r3, [r7, #14]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d132      	bne.n	8009d78 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009d12:	2002      	movs	r0, #2
 8009d14:	f001 fb32 	bl	800b37c <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	2203      	movs	r2, #3
 8009d24:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	7919      	ldrb	r1, [r3, #4]
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009d3a:	b292      	uxth	r2, r2
 8009d3c:	9202      	str	r2, [sp, #8]
 8009d3e:	2200      	movs	r2, #0
 8009d40:	9201      	str	r2, [sp, #4]
 8009d42:	9300      	str	r3, [sp, #0]
 8009d44:	4603      	mov	r3, r0
 8009d46:	2280      	movs	r2, #128	; 0x80
 8009d48:	6878      	ldr	r0, [r7, #4]
 8009d4a:	f000 ffd1 	bl	800acf0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	7959      	ldrb	r1, [r3, #5]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009d62:	b292      	uxth	r2, r2
 8009d64:	9202      	str	r2, [sp, #8]
 8009d66:	2200      	movs	r2, #0
 8009d68:	9201      	str	r2, [sp, #4]
 8009d6a:	9300      	str	r3, [sp, #0]
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	2200      	movs	r2, #0
 8009d70:	6878      	ldr	r0, [r7, #4]
 8009d72:	f000 ffbd 	bl	800acf0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009d76:	e0e3      	b.n	8009f40 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d78:	7bbb      	ldrb	r3, [r7, #14]
 8009d7a:	2b03      	cmp	r3, #3
 8009d7c:	f040 80e0 	bne.w	8009f40 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	220d      	movs	r2, #13
 8009d84:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	705a      	strb	r2, [r3, #1]
      break;
 8009d8c:	e0d8      	b.n	8009f40 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009d8e:	2109      	movs	r1, #9
 8009d90:	6878      	ldr	r0, [r7, #4]
 8009d92:	f000 f99d 	bl	800a0d0 <USBH_Get_CfgDesc>
 8009d96:	4603      	mov	r3, r0
 8009d98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d9a:	7bbb      	ldrb	r3, [r7, #14]
 8009d9c:	2b00      	cmp	r3, #0
 8009d9e:	d103      	bne.n	8009da8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2204      	movs	r2, #4
 8009da4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009da6:	e0cd      	b.n	8009f44 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009da8:	7bbb      	ldrb	r3, [r7, #14]
 8009daa:	2b03      	cmp	r3, #3
 8009dac:	f040 80ca 	bne.w	8009f44 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009db6:	3301      	adds	r3, #1
 8009db8:	b2da      	uxtb	r2, r3
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d903      	bls.n	8009dd2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	220d      	movs	r2, #13
 8009dce:	701a      	strb	r2, [r3, #0]
      break;
 8009dd0:	e0b8      	b.n	8009f44 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	795b      	ldrb	r3, [r3, #5]
 8009dd6:	4619      	mov	r1, r3
 8009dd8:	6878      	ldr	r0, [r7, #4]
 8009dda:	f000 ffd9 	bl	800ad90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	791b      	ldrb	r3, [r3, #4]
 8009de2:	4619      	mov	r1, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 ffd3 	bl	800ad90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2200      	movs	r2, #0
 8009dee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	701a      	strb	r2, [r3, #0]
      break;
 8009df6:	e0a5      	b.n	8009f44 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009dfe:	4619      	mov	r1, r3
 8009e00:	6878      	ldr	r0, [r7, #4]
 8009e02:	f000 f965 	bl	800a0d0 <USBH_Get_CfgDesc>
 8009e06:	4603      	mov	r3, r0
 8009e08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e0a:	7bbb      	ldrb	r3, [r7, #14]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d103      	bne.n	8009e18 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2205      	movs	r2, #5
 8009e14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009e16:	e097      	b.n	8009f48 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e18:	7bbb      	ldrb	r3, [r7, #14]
 8009e1a:	2b03      	cmp	r3, #3
 8009e1c:	f040 8094 	bne.w	8009f48 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009e26:	3301      	adds	r3, #1
 8009e28:	b2da      	uxtb	r2, r3
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009e36:	2b03      	cmp	r3, #3
 8009e38:	d903      	bls.n	8009e42 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	220d      	movs	r2, #13
 8009e3e:	701a      	strb	r2, [r3, #0]
      break;
 8009e40:	e082      	b.n	8009f48 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	795b      	ldrb	r3, [r3, #5]
 8009e46:	4619      	mov	r1, r3
 8009e48:	6878      	ldr	r0, [r7, #4]
 8009e4a:	f000 ffa1 	bl	800ad90 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	791b      	ldrb	r3, [r3, #4]
 8009e52:	4619      	mov	r1, r3
 8009e54:	6878      	ldr	r0, [r7, #4]
 8009e56:	f000 ff9b 	bl	800ad90 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2200      	movs	r2, #0
 8009e5e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2200      	movs	r2, #0
 8009e64:	701a      	strb	r2, [r3, #0]
      break;
 8009e66:	e06f      	b.n	8009f48 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d019      	beq.n	8009ea6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009e7e:	23ff      	movs	r3, #255	; 0xff
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	f000 f949 	bl	800a118 <USBH_Get_StringDesc>
 8009e86:	4603      	mov	r3, r0
 8009e88:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009e8a:	7bbb      	ldrb	r3, [r7, #14]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d103      	bne.n	8009e98 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	2206      	movs	r2, #6
 8009e94:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009e96:	e059      	b.n	8009f4c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e98:	7bbb      	ldrb	r3, [r7, #14]
 8009e9a:	2b03      	cmp	r3, #3
 8009e9c:	d156      	bne.n	8009f4c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	2206      	movs	r2, #6
 8009ea2:	705a      	strb	r2, [r3, #1]
      break;
 8009ea4:	e052      	b.n	8009f4c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	2206      	movs	r2, #6
 8009eaa:	705a      	strb	r2, [r3, #1]
      break;
 8009eac:	e04e      	b.n	8009f4c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d019      	beq.n	8009eec <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009ec4:	23ff      	movs	r3, #255	; 0xff
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f926 	bl	800a118 <USBH_Get_StringDesc>
 8009ecc:	4603      	mov	r3, r0
 8009ece:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009ed0:	7bbb      	ldrb	r3, [r7, #14]
 8009ed2:	2b00      	cmp	r3, #0
 8009ed4:	d103      	bne.n	8009ede <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	2207      	movs	r2, #7
 8009eda:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009edc:	e038      	b.n	8009f50 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ede:	7bbb      	ldrb	r3, [r7, #14]
 8009ee0:	2b03      	cmp	r3, #3
 8009ee2:	d135      	bne.n	8009f50 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	2207      	movs	r2, #7
 8009ee8:	705a      	strb	r2, [r3, #1]
      break;
 8009eea:	e031      	b.n	8009f50 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	2207      	movs	r2, #7
 8009ef0:	705a      	strb	r2, [r3, #1]
      break;
 8009ef2:	e02d      	b.n	8009f50 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d017      	beq.n	8009f2e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009f0a:	23ff      	movs	r3, #255	; 0xff
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f903 	bl	800a118 <USBH_Get_StringDesc>
 8009f12:	4603      	mov	r3, r0
 8009f14:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009f16:	7bbb      	ldrb	r3, [r7, #14]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d102      	bne.n	8009f22 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009f20:	e018      	b.n	8009f54 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f22:	7bbb      	ldrb	r3, [r7, #14]
 8009f24:	2b03      	cmp	r3, #3
 8009f26:	d115      	bne.n	8009f54 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	73fb      	strb	r3, [r7, #15]
      break;
 8009f2c:	e012      	b.n	8009f54 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	73fb      	strb	r3, [r7, #15]
      break;
 8009f32:	e00f      	b.n	8009f54 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009f34:	bf00      	nop
 8009f36:	e00e      	b.n	8009f56 <USBH_HandleEnum+0x3be>
      break;
 8009f38:	bf00      	nop
 8009f3a:	e00c      	b.n	8009f56 <USBH_HandleEnum+0x3be>
      break;
 8009f3c:	bf00      	nop
 8009f3e:	e00a      	b.n	8009f56 <USBH_HandleEnum+0x3be>
      break;
 8009f40:	bf00      	nop
 8009f42:	e008      	b.n	8009f56 <USBH_HandleEnum+0x3be>
      break;
 8009f44:	bf00      	nop
 8009f46:	e006      	b.n	8009f56 <USBH_HandleEnum+0x3be>
      break;
 8009f48:	bf00      	nop
 8009f4a:	e004      	b.n	8009f56 <USBH_HandleEnum+0x3be>
      break;
 8009f4c:	bf00      	nop
 8009f4e:	e002      	b.n	8009f56 <USBH_HandleEnum+0x3be>
      break;
 8009f50:	bf00      	nop
 8009f52:	e000      	b.n	8009f56 <USBH_HandleEnum+0x3be>
      break;
 8009f54:	bf00      	nop
  }
  return Status;
 8009f56:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3710      	adds	r7, #16
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b083      	sub	sp, #12
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	6078      	str	r0, [r7, #4]
 8009f68:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	683a      	ldr	r2, [r7, #0]
 8009f6e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009f72:	bf00      	nop
 8009f74:	370c      	adds	r7, #12
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr

08009f7e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009f7e:	b580      	push	{r7, lr}
 8009f80:	b082      	sub	sp, #8
 8009f82:	af00      	add	r7, sp, #0
 8009f84:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009f8c:	1c5a      	adds	r2, r3, #1
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	f000 f804 	bl	8009fa2 <USBH_HandleSof>
}
 8009f9a:	bf00      	nop
 8009f9c:	3708      	adds	r7, #8
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}

08009fa2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009fa2:	b580      	push	{r7, lr}
 8009fa4:	b082      	sub	sp, #8
 8009fa6:	af00      	add	r7, sp, #0
 8009fa8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	b2db      	uxtb	r3, r3
 8009fb0:	2b0b      	cmp	r3, #11
 8009fb2:	d10a      	bne.n	8009fca <USBH_HandleSof+0x28>
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d005      	beq.n	8009fca <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009fc4:	699b      	ldr	r3, [r3, #24]
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	4798      	blx	r3
  }
}
 8009fca:	bf00      	nop
 8009fcc:	3708      	adds	r7, #8
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	bd80      	pop	{r7, pc}

08009fd2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009fd2:	b480      	push	{r7}
 8009fd4:	b083      	sub	sp, #12
 8009fd6:	af00      	add	r7, sp, #0
 8009fd8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	2201      	movs	r2, #1
 8009fde:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009fe2:	bf00      	nop
}
 8009fe4:	370c      	adds	r7, #12
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fec:	4770      	bx	lr

08009fee <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009fee:	b480      	push	{r7}
 8009ff0:	b083      	sub	sp, #12
 8009ff2:	af00      	add	r7, sp, #0
 8009ff4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009ffe:	bf00      	nop
}
 800a000:	370c      	adds	r7, #12
 800a002:	46bd      	mov	sp, r7
 800a004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a008:	4770      	bx	lr

0800a00a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a00a:	b480      	push	{r7}
 800a00c:	b083      	sub	sp, #12
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	2200      	movs	r2, #0
 800a01e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a02a:	2300      	movs	r3, #0
}
 800a02c:	4618      	mov	r0, r3
 800a02e:	370c      	adds	r7, #12
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr

0800a038 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a038:	b580      	push	{r7, lr}
 800a03a:	b082      	sub	sp, #8
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	2201      	movs	r2, #1
 800a044:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2200      	movs	r2, #0
 800a04c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a058:	6878      	ldr	r0, [r7, #4]
 800a05a:	f001 f846 	bl	800b0ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	791b      	ldrb	r3, [r3, #4]
 800a062:	4619      	mov	r1, r3
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 fe93 	bl	800ad90 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	795b      	ldrb	r3, [r3, #5]
 800a06e:	4619      	mov	r1, r3
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 fe8d 	bl	800ad90 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a076:	2300      	movs	r3, #0
}
 800a078:	4618      	mov	r0, r3
 800a07a:	3708      	adds	r7, #8
 800a07c:	46bd      	mov	sp, r7
 800a07e:	bd80      	pop	{r7, pc}

0800a080 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af02      	add	r7, sp, #8
 800a086:	6078      	str	r0, [r7, #4]
 800a088:	460b      	mov	r3, r1
 800a08a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a092:	78fb      	ldrb	r3, [r7, #3]
 800a094:	b29b      	uxth	r3, r3
 800a096:	9300      	str	r3, [sp, #0]
 800a098:	4613      	mov	r3, r2
 800a09a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a09e:	2100      	movs	r1, #0
 800a0a0:	6878      	ldr	r0, [r7, #4]
 800a0a2:	f000 f864 	bl	800a16e <USBH_GetDescriptor>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800a0aa:	7bfb      	ldrb	r3, [r7, #15]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d10a      	bne.n	800a0c6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a0bc:	78fa      	ldrb	r2, [r7, #3]
 800a0be:	b292      	uxth	r2, r2
 800a0c0:	4619      	mov	r1, r3
 800a0c2:	f000 f919 	bl	800a2f8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800a0c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3710      	adds	r7, #16
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b086      	sub	sp, #24
 800a0d4:	af02      	add	r7, sp, #8
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	460b      	mov	r3, r1
 800a0da:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	331c      	adds	r3, #28
 800a0e0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a0e2:	887b      	ldrh	r3, [r7, #2]
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	68bb      	ldr	r3, [r7, #8]
 800a0e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a0ec:	2100      	movs	r1, #0
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 f83d 	bl	800a16e <USBH_GetDescriptor>
 800a0f4:	4603      	mov	r3, r0
 800a0f6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a0f8:	7bfb      	ldrb	r3, [r7, #15]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d107      	bne.n	800a10e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a0fe:	887b      	ldrh	r3, [r7, #2]
 800a100:	461a      	mov	r2, r3
 800a102:	68b9      	ldr	r1, [r7, #8]
 800a104:	6878      	ldr	r0, [r7, #4]
 800a106:	f000 f989 	bl	800a41c <USBH_ParseCfgDesc>
 800a10a:	4603      	mov	r3, r0
 800a10c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a10e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a110:	4618      	mov	r0, r3
 800a112:	3710      	adds	r7, #16
 800a114:	46bd      	mov	sp, r7
 800a116:	bd80      	pop	{r7, pc}

0800a118 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800a118:	b580      	push	{r7, lr}
 800a11a:	b088      	sub	sp, #32
 800a11c:	af02      	add	r7, sp, #8
 800a11e:	60f8      	str	r0, [r7, #12]
 800a120:	607a      	str	r2, [r7, #4]
 800a122:	461a      	mov	r2, r3
 800a124:	460b      	mov	r3, r1
 800a126:	72fb      	strb	r3, [r7, #11]
 800a128:	4613      	mov	r3, r2
 800a12a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800a12c:	7afb      	ldrb	r3, [r7, #11]
 800a12e:	b29b      	uxth	r3, r3
 800a130:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a134:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800a13c:	893b      	ldrh	r3, [r7, #8]
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	460b      	mov	r3, r1
 800a142:	2100      	movs	r1, #0
 800a144:	68f8      	ldr	r0, [r7, #12]
 800a146:	f000 f812 	bl	800a16e <USBH_GetDescriptor>
 800a14a:	4603      	mov	r3, r0
 800a14c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a14e:	7dfb      	ldrb	r3, [r7, #23]
 800a150:	2b00      	cmp	r3, #0
 800a152:	d107      	bne.n	800a164 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800a15a:	893a      	ldrh	r2, [r7, #8]
 800a15c:	6879      	ldr	r1, [r7, #4]
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 fb26 	bl	800a7b0 <USBH_ParseStringDesc>
  }

  return status;
 800a164:	7dfb      	ldrb	r3, [r7, #23]
}
 800a166:	4618      	mov	r0, r3
 800a168:	3718      	adds	r7, #24
 800a16a:	46bd      	mov	sp, r7
 800a16c:	bd80      	pop	{r7, pc}

0800a16e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800a16e:	b580      	push	{r7, lr}
 800a170:	b084      	sub	sp, #16
 800a172:	af00      	add	r7, sp, #0
 800a174:	60f8      	str	r0, [r7, #12]
 800a176:	607b      	str	r3, [r7, #4]
 800a178:	460b      	mov	r3, r1
 800a17a:	72fb      	strb	r3, [r7, #11]
 800a17c:	4613      	mov	r3, r2
 800a17e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	789b      	ldrb	r3, [r3, #2]
 800a184:	2b01      	cmp	r3, #1
 800a186:	d11c      	bne.n	800a1c2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a188:	7afb      	ldrb	r3, [r7, #11]
 800a18a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a18e:	b2da      	uxtb	r2, r3
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	2206      	movs	r2, #6
 800a198:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	893a      	ldrh	r2, [r7, #8]
 800a19e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a1a0:	893b      	ldrh	r3, [r7, #8]
 800a1a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a1a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1aa:	d104      	bne.n	800a1b6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	f240 4209 	movw	r2, #1033	; 0x409
 800a1b2:	829a      	strh	r2, [r3, #20]
 800a1b4:	e002      	b.n	800a1bc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	8b3a      	ldrh	r2, [r7, #24]
 800a1c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a1c2:	8b3b      	ldrh	r3, [r7, #24]
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	6879      	ldr	r1, [r7, #4]
 800a1c8:	68f8      	ldr	r0, [r7, #12]
 800a1ca:	f000 fb3f 	bl	800a84c <USBH_CtlReq>
 800a1ce:	4603      	mov	r3, r0
}
 800a1d0:	4618      	mov	r0, r3
 800a1d2:	3710      	adds	r7, #16
 800a1d4:	46bd      	mov	sp, r7
 800a1d6:	bd80      	pop	{r7, pc}

0800a1d8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b082      	sub	sp, #8
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	789b      	ldrb	r3, [r3, #2]
 800a1e8:	2b01      	cmp	r3, #1
 800a1ea:	d10f      	bne.n	800a20c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	2205      	movs	r2, #5
 800a1f6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a1f8:	78fb      	ldrb	r3, [r7, #3]
 800a1fa:	b29a      	uxth	r2, r3
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2200      	movs	r2, #0
 800a204:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a20c:	2200      	movs	r2, #0
 800a20e:	2100      	movs	r1, #0
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 fb1b 	bl	800a84c <USBH_CtlReq>
 800a216:	4603      	mov	r3, r0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3708      	adds	r7, #8
 800a21c:	46bd      	mov	sp, r7
 800a21e:	bd80      	pop	{r7, pc}

0800a220 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a220:	b580      	push	{r7, lr}
 800a222:	b082      	sub	sp, #8
 800a224:	af00      	add	r7, sp, #0
 800a226:	6078      	str	r0, [r7, #4]
 800a228:	460b      	mov	r3, r1
 800a22a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	789b      	ldrb	r3, [r3, #2]
 800a230:	2b01      	cmp	r3, #1
 800a232:	d10e      	bne.n	800a252 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	2200      	movs	r2, #0
 800a238:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2209      	movs	r2, #9
 800a23e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	887a      	ldrh	r2, [r7, #2]
 800a244:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	2200      	movs	r2, #0
 800a24a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2200      	movs	r2, #0
 800a250:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a252:	2200      	movs	r2, #0
 800a254:	2100      	movs	r1, #0
 800a256:	6878      	ldr	r0, [r7, #4]
 800a258:	f000 faf8 	bl	800a84c <USBH_CtlReq>
 800a25c:	4603      	mov	r3, r0
}
 800a25e:	4618      	mov	r0, r3
 800a260:	3708      	adds	r7, #8
 800a262:	46bd      	mov	sp, r7
 800a264:	bd80      	pop	{r7, pc}

0800a266 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a266:	b580      	push	{r7, lr}
 800a268:	b082      	sub	sp, #8
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
 800a26e:	460b      	mov	r3, r1
 800a270:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	789b      	ldrb	r3, [r3, #2]
 800a276:	2b01      	cmp	r3, #1
 800a278:	d10f      	bne.n	800a29a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	2200      	movs	r2, #0
 800a27e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2203      	movs	r2, #3
 800a284:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a286:	78fb      	ldrb	r3, [r7, #3]
 800a288:	b29a      	uxth	r2, r3
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	2200      	movs	r2, #0
 800a292:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	2200      	movs	r2, #0
 800a298:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a29a:	2200      	movs	r2, #0
 800a29c:	2100      	movs	r1, #0
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 fad4 	bl	800a84c <USBH_CtlReq>
 800a2a4:	4603      	mov	r3, r0
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3708      	adds	r7, #8
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	bd80      	pop	{r7, pc}

0800a2ae <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a2ae:	b580      	push	{r7, lr}
 800a2b0:	b082      	sub	sp, #8
 800a2b2:	af00      	add	r7, sp, #0
 800a2b4:	6078      	str	r0, [r7, #4]
 800a2b6:	460b      	mov	r3, r1
 800a2b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	789b      	ldrb	r3, [r3, #2]
 800a2be:	2b01      	cmp	r3, #1
 800a2c0:	d10f      	bne.n	800a2e2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2202      	movs	r2, #2
 800a2c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	2201      	movs	r2, #1
 800a2cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	2200      	movs	r2, #0
 800a2d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a2d4:	78fb      	ldrb	r3, [r7, #3]
 800a2d6:	b29a      	uxth	r2, r3
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800a2e2:	2200      	movs	r2, #0
 800a2e4:	2100      	movs	r1, #0
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f000 fab0 	bl	800a84c <USBH_CtlReq>
 800a2ec:	4603      	mov	r3, r0
}
 800a2ee:	4618      	mov	r0, r3
 800a2f0:	3708      	adds	r7, #8
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
	...

0800a2f8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b085      	sub	sp, #20
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	60f8      	str	r0, [r7, #12]
 800a300:	60b9      	str	r1, [r7, #8]
 800a302:	4613      	mov	r3, r2
 800a304:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a306:	68bb      	ldr	r3, [r7, #8]
 800a308:	781a      	ldrb	r2, [r3, #0]
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	785a      	ldrb	r2, [r3, #1]
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	3302      	adds	r3, #2
 800a31a:	781b      	ldrb	r3, [r3, #0]
 800a31c:	b29a      	uxth	r2, r3
 800a31e:	68bb      	ldr	r3, [r7, #8]
 800a320:	3303      	adds	r3, #3
 800a322:	781b      	ldrb	r3, [r3, #0]
 800a324:	b29b      	uxth	r3, r3
 800a326:	021b      	lsls	r3, r3, #8
 800a328:	b29b      	uxth	r3, r3
 800a32a:	4313      	orrs	r3, r2
 800a32c:	b29a      	uxth	r2, r3
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	791a      	ldrb	r2, [r3, #4]
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a33a:	68bb      	ldr	r3, [r7, #8]
 800a33c:	795a      	ldrb	r2, [r3, #5]
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a342:	68bb      	ldr	r3, [r7, #8]
 800a344:	799a      	ldrb	r2, [r3, #6]
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a34a:	68bb      	ldr	r3, [r7, #8]
 800a34c:	79da      	ldrb	r2, [r3, #7]
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	79db      	ldrb	r3, [r3, #7]
 800a356:	2b20      	cmp	r3, #32
 800a358:	dc0f      	bgt.n	800a37a <USBH_ParseDevDesc+0x82>
 800a35a:	2b08      	cmp	r3, #8
 800a35c:	db14      	blt.n	800a388 <USBH_ParseDevDesc+0x90>
 800a35e:	3b08      	subs	r3, #8
 800a360:	4a2d      	ldr	r2, [pc, #180]	; (800a418 <USBH_ParseDevDesc+0x120>)
 800a362:	fa22 f303 	lsr.w	r3, r2, r3
 800a366:	f003 0301 	and.w	r3, r3, #1
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	bf14      	ite	ne
 800a36e:	2301      	movne	r3, #1
 800a370:	2300      	moveq	r3, #0
 800a372:	b2db      	uxtb	r3, r3
 800a374:	2b00      	cmp	r3, #0
 800a376:	d102      	bne.n	800a37e <USBH_ParseDevDesc+0x86>
 800a378:	e006      	b.n	800a388 <USBH_ParseDevDesc+0x90>
 800a37a:	2b40      	cmp	r3, #64	; 0x40
 800a37c:	d104      	bne.n	800a388 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	79da      	ldrb	r2, [r3, #7]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	71da      	strb	r2, [r3, #7]
      break;
 800a386:	e003      	b.n	800a390 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	2240      	movs	r2, #64	; 0x40
 800a38c:	71da      	strb	r2, [r3, #7]
      break;
 800a38e:	bf00      	nop
  }

  if (length > 8U)
 800a390:	88fb      	ldrh	r3, [r7, #6]
 800a392:	2b08      	cmp	r3, #8
 800a394:	d939      	bls.n	800a40a <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a396:	68bb      	ldr	r3, [r7, #8]
 800a398:	3308      	adds	r3, #8
 800a39a:	781b      	ldrb	r3, [r3, #0]
 800a39c:	b29a      	uxth	r2, r3
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	3309      	adds	r3, #9
 800a3a2:	781b      	ldrb	r3, [r3, #0]
 800a3a4:	b29b      	uxth	r3, r3
 800a3a6:	021b      	lsls	r3, r3, #8
 800a3a8:	b29b      	uxth	r3, r3
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	b29a      	uxth	r2, r3
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a3b2:	68bb      	ldr	r3, [r7, #8]
 800a3b4:	330a      	adds	r3, #10
 800a3b6:	781b      	ldrb	r3, [r3, #0]
 800a3b8:	b29a      	uxth	r2, r3
 800a3ba:	68bb      	ldr	r3, [r7, #8]
 800a3bc:	330b      	adds	r3, #11
 800a3be:	781b      	ldrb	r3, [r3, #0]
 800a3c0:	b29b      	uxth	r3, r3
 800a3c2:	021b      	lsls	r3, r3, #8
 800a3c4:	b29b      	uxth	r3, r3
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	b29a      	uxth	r2, r3
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a3ce:	68bb      	ldr	r3, [r7, #8]
 800a3d0:	330c      	adds	r3, #12
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	b29a      	uxth	r2, r3
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	330d      	adds	r3, #13
 800a3da:	781b      	ldrb	r3, [r3, #0]
 800a3dc:	b29b      	uxth	r3, r3
 800a3de:	021b      	lsls	r3, r3, #8
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	b29a      	uxth	r2, r3
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a3ea:	68bb      	ldr	r3, [r7, #8]
 800a3ec:	7b9a      	ldrb	r2, [r3, #14]
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a3f2:	68bb      	ldr	r3, [r7, #8]
 800a3f4:	7bda      	ldrb	r2, [r3, #15]
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a3fa:	68bb      	ldr	r3, [r7, #8]
 800a3fc:	7c1a      	ldrb	r2, [r3, #16]
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	7c5a      	ldrb	r2, [r3, #17]
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	745a      	strb	r2, [r3, #17]
  }
}
 800a40a:	bf00      	nop
 800a40c:	3714      	adds	r7, #20
 800a40e:	46bd      	mov	sp, r7
 800a410:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a414:	4770      	bx	lr
 800a416:	bf00      	nop
 800a418:	01000101 	.word	0x01000101

0800a41c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b08c      	sub	sp, #48	; 0x30
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	4613      	mov	r3, r2
 800a428:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a430:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a432:	2300      	movs	r3, #0
 800a434:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a438:	68bb      	ldr	r3, [r7, #8]
 800a43a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a43c:	2300      	movs	r3, #0
 800a43e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a442:	2300      	movs	r3, #0
 800a444:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a448:	68bb      	ldr	r3, [r7, #8]
 800a44a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a44c:	68bb      	ldr	r3, [r7, #8]
 800a44e:	781a      	ldrb	r2, [r3, #0]
 800a450:	6a3b      	ldr	r3, [r7, #32]
 800a452:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	785a      	ldrb	r2, [r3, #1]
 800a458:	6a3b      	ldr	r3, [r7, #32]
 800a45a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	3302      	adds	r3, #2
 800a460:	781b      	ldrb	r3, [r3, #0]
 800a462:	b29a      	uxth	r2, r3
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	3303      	adds	r3, #3
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	021b      	lsls	r3, r3, #8
 800a46e:	b29b      	uxth	r3, r3
 800a470:	4313      	orrs	r3, r2
 800a472:	b29b      	uxth	r3, r3
 800a474:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a478:	bf28      	it	cs
 800a47a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a47e:	b29a      	uxth	r2, r3
 800a480:	6a3b      	ldr	r3, [r7, #32]
 800a482:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	791a      	ldrb	r2, [r3, #4]
 800a488:	6a3b      	ldr	r3, [r7, #32]
 800a48a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a48c:	68bb      	ldr	r3, [r7, #8]
 800a48e:	795a      	ldrb	r2, [r3, #5]
 800a490:	6a3b      	ldr	r3, [r7, #32]
 800a492:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a494:	68bb      	ldr	r3, [r7, #8]
 800a496:	799a      	ldrb	r2, [r3, #6]
 800a498:	6a3b      	ldr	r3, [r7, #32]
 800a49a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a49c:	68bb      	ldr	r3, [r7, #8]
 800a49e:	79da      	ldrb	r2, [r3, #7]
 800a4a0:	6a3b      	ldr	r3, [r7, #32]
 800a4a2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a4a4:	68bb      	ldr	r3, [r7, #8]
 800a4a6:	7a1a      	ldrb	r2, [r3, #8]
 800a4a8:	6a3b      	ldr	r3, [r7, #32]
 800a4aa:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a4ac:	6a3b      	ldr	r3, [r7, #32]
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	2b09      	cmp	r3, #9
 800a4b2:	d002      	beq.n	800a4ba <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a4b4:	6a3b      	ldr	r3, [r7, #32]
 800a4b6:	2209      	movs	r2, #9
 800a4b8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a4ba:	88fb      	ldrh	r3, [r7, #6]
 800a4bc:	2b09      	cmp	r3, #9
 800a4be:	f240 809d 	bls.w	800a5fc <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a4c2:	2309      	movs	r3, #9
 800a4c4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a4ca:	e081      	b.n	800a5d0 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a4cc:	f107 0316 	add.w	r3, r7, #22
 800a4d0:	4619      	mov	r1, r3
 800a4d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4d4:	f000 f99f 	bl	800a816 <USBH_GetNextDesc>
 800a4d8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a4da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4dc:	785b      	ldrb	r3, [r3, #1]
 800a4de:	2b04      	cmp	r3, #4
 800a4e0:	d176      	bne.n	800a5d0 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e4:	781b      	ldrb	r3, [r3, #0]
 800a4e6:	2b09      	cmp	r3, #9
 800a4e8:	d002      	beq.n	800a4f0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ec:	2209      	movs	r2, #9
 800a4ee:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a4f0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a4f4:	221a      	movs	r2, #26
 800a4f6:	fb02 f303 	mul.w	r3, r2, r3
 800a4fa:	3308      	adds	r3, #8
 800a4fc:	6a3a      	ldr	r2, [r7, #32]
 800a4fe:	4413      	add	r3, r2
 800a500:	3302      	adds	r3, #2
 800a502:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a504:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a506:	69f8      	ldr	r0, [r7, #28]
 800a508:	f000 f87e 	bl	800a608 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a50c:	2300      	movs	r3, #0
 800a50e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a512:	2300      	movs	r3, #0
 800a514:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a516:	e043      	b.n	800a5a0 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a518:	f107 0316 	add.w	r3, r7, #22
 800a51c:	4619      	mov	r1, r3
 800a51e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a520:	f000 f979 	bl	800a816 <USBH_GetNextDesc>
 800a524:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a528:	785b      	ldrb	r3, [r3, #1]
 800a52a:	2b05      	cmp	r3, #5
 800a52c:	d138      	bne.n	800a5a0 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a52e:	69fb      	ldr	r3, [r7, #28]
 800a530:	795b      	ldrb	r3, [r3, #5]
 800a532:	2b01      	cmp	r3, #1
 800a534:	d10f      	bne.n	800a556 <USBH_ParseCfgDesc+0x13a>
 800a536:	69fb      	ldr	r3, [r7, #28]
 800a538:	799b      	ldrb	r3, [r3, #6]
 800a53a:	2b02      	cmp	r3, #2
 800a53c:	d10b      	bne.n	800a556 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a53e:	69fb      	ldr	r3, [r7, #28]
 800a540:	79db      	ldrb	r3, [r3, #7]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10f      	bne.n	800a566 <USBH_ParseCfgDesc+0x14a>
 800a546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a548:	781b      	ldrb	r3, [r3, #0]
 800a54a:	2b09      	cmp	r3, #9
 800a54c:	d00b      	beq.n	800a566 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a54e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a550:	2209      	movs	r2, #9
 800a552:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a554:	e007      	b.n	800a566 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	2b07      	cmp	r3, #7
 800a55c:	d004      	beq.n	800a568 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a560:	2207      	movs	r2, #7
 800a562:	701a      	strb	r2, [r3, #0]
 800a564:	e000      	b.n	800a568 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a566:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a568:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a56c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a570:	3201      	adds	r2, #1
 800a572:	00d2      	lsls	r2, r2, #3
 800a574:	211a      	movs	r1, #26
 800a576:	fb01 f303 	mul.w	r3, r1, r3
 800a57a:	4413      	add	r3, r2
 800a57c:	3308      	adds	r3, #8
 800a57e:	6a3a      	ldr	r2, [r7, #32]
 800a580:	4413      	add	r3, r2
 800a582:	3304      	adds	r3, #4
 800a584:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a586:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a588:	69b9      	ldr	r1, [r7, #24]
 800a58a:	68f8      	ldr	r0, [r7, #12]
 800a58c:	f000 f86b 	bl	800a666 <USBH_ParseEPDesc>
 800a590:	4603      	mov	r3, r0
 800a592:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a596:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a59a:	3301      	adds	r3, #1
 800a59c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a5a0:	69fb      	ldr	r3, [r7, #28]
 800a5a2:	791b      	ldrb	r3, [r3, #4]
 800a5a4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a5a8:	429a      	cmp	r2, r3
 800a5aa:	d204      	bcs.n	800a5b6 <USBH_ParseCfgDesc+0x19a>
 800a5ac:	6a3b      	ldr	r3, [r7, #32]
 800a5ae:	885a      	ldrh	r2, [r3, #2]
 800a5b0:	8afb      	ldrh	r3, [r7, #22]
 800a5b2:	429a      	cmp	r2, r3
 800a5b4:	d8b0      	bhi.n	800a518 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a5b6:	69fb      	ldr	r3, [r7, #28]
 800a5b8:	791b      	ldrb	r3, [r3, #4]
 800a5ba:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d201      	bcs.n	800a5c6 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a5c2:	2303      	movs	r3, #3
 800a5c4:	e01c      	b.n	800a600 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a5c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a5d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a5d4:	2b01      	cmp	r3, #1
 800a5d6:	d805      	bhi.n	800a5e4 <USBH_ParseCfgDesc+0x1c8>
 800a5d8:	6a3b      	ldr	r3, [r7, #32]
 800a5da:	885a      	ldrh	r2, [r3, #2]
 800a5dc:	8afb      	ldrh	r3, [r7, #22]
 800a5de:	429a      	cmp	r2, r3
 800a5e0:	f63f af74 	bhi.w	800a4cc <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a5e4:	6a3b      	ldr	r3, [r7, #32]
 800a5e6:	791b      	ldrb	r3, [r3, #4]
 800a5e8:	2b02      	cmp	r3, #2
 800a5ea:	bf28      	it	cs
 800a5ec:	2302      	movcs	r3, #2
 800a5ee:	b2db      	uxtb	r3, r3
 800a5f0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d201      	bcs.n	800a5fc <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e001      	b.n	800a600 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a5fc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a600:	4618      	mov	r0, r3
 800a602:	3730      	adds	r7, #48	; 0x30
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a608:	b480      	push	{r7}
 800a60a:	b083      	sub	sp, #12
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	6078      	str	r0, [r7, #4]
 800a610:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a612:	683b      	ldr	r3, [r7, #0]
 800a614:	781a      	ldrb	r2, [r3, #0]
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	785a      	ldrb	r2, [r3, #1]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a622:	683b      	ldr	r3, [r7, #0]
 800a624:	789a      	ldrb	r2, [r3, #2]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	78da      	ldrb	r2, [r3, #3]
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	791a      	ldrb	r2, [r3, #4]
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a63a:	683b      	ldr	r3, [r7, #0]
 800a63c:	795a      	ldrb	r2, [r3, #5]
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a642:	683b      	ldr	r3, [r7, #0]
 800a644:	799a      	ldrb	r2, [r3, #6]
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	79da      	ldrb	r2, [r3, #7]
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a652:	683b      	ldr	r3, [r7, #0]
 800a654:	7a1a      	ldrb	r2, [r3, #8]
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	721a      	strb	r2, [r3, #8]
}
 800a65a:	bf00      	nop
 800a65c:	370c      	adds	r7, #12
 800a65e:	46bd      	mov	sp, r7
 800a660:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a664:	4770      	bx	lr

0800a666 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a666:	b480      	push	{r7}
 800a668:	b087      	sub	sp, #28
 800a66a:	af00      	add	r7, sp, #0
 800a66c:	60f8      	str	r0, [r7, #12]
 800a66e:	60b9      	str	r1, [r7, #8]
 800a670:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a672:	2300      	movs	r3, #0
 800a674:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	781a      	ldrb	r2, [r3, #0]
 800a67a:	68bb      	ldr	r3, [r7, #8]
 800a67c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	785a      	ldrb	r2, [r3, #1]
 800a682:	68bb      	ldr	r3, [r7, #8]
 800a684:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	789a      	ldrb	r2, [r3, #2]
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	78da      	ldrb	r2, [r3, #3]
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	3304      	adds	r3, #4
 800a69a:	781b      	ldrb	r3, [r3, #0]
 800a69c:	b29a      	uxth	r2, r3
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	3305      	adds	r3, #5
 800a6a2:	781b      	ldrb	r3, [r3, #0]
 800a6a4:	b29b      	uxth	r3, r3
 800a6a6:	021b      	lsls	r3, r3, #8
 800a6a8:	b29b      	uxth	r3, r3
 800a6aa:	4313      	orrs	r3, r2
 800a6ac:	b29a      	uxth	r2, r3
 800a6ae:	68bb      	ldr	r3, [r7, #8]
 800a6b0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	799a      	ldrb	r2, [r3, #6]
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a6ba:	68bb      	ldr	r3, [r7, #8]
 800a6bc:	889b      	ldrh	r3, [r3, #4]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d102      	bne.n	800a6c8 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a6c2:	2303      	movs	r3, #3
 800a6c4:	75fb      	strb	r3, [r7, #23]
 800a6c6:	e033      	b.n	800a730 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a6c8:	68bb      	ldr	r3, [r7, #8]
 800a6ca:	889b      	ldrh	r3, [r3, #4]
 800a6cc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a6d0:	f023 0307 	bic.w	r3, r3, #7
 800a6d4:	b29a      	uxth	r2, r3
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	889b      	ldrh	r3, [r3, #4]
 800a6de:	b21a      	sxth	r2, r3
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	3304      	adds	r3, #4
 800a6e4:	781b      	ldrb	r3, [r3, #0]
 800a6e6:	b299      	uxth	r1, r3
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	3305      	adds	r3, #5
 800a6ec:	781b      	ldrb	r3, [r3, #0]
 800a6ee:	b29b      	uxth	r3, r3
 800a6f0:	021b      	lsls	r3, r3, #8
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	430b      	orrs	r3, r1
 800a6f6:	b29b      	uxth	r3, r3
 800a6f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d110      	bne.n	800a722 <USBH_ParseEPDesc+0xbc>
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	3304      	adds	r3, #4
 800a704:	781b      	ldrb	r3, [r3, #0]
 800a706:	b299      	uxth	r1, r3
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	3305      	adds	r3, #5
 800a70c:	781b      	ldrb	r3, [r3, #0]
 800a70e:	b29b      	uxth	r3, r3
 800a710:	021b      	lsls	r3, r3, #8
 800a712:	b29b      	uxth	r3, r3
 800a714:	430b      	orrs	r3, r1
 800a716:	b29b      	uxth	r3, r3
 800a718:	b21b      	sxth	r3, r3
 800a71a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a71e:	b21b      	sxth	r3, r3
 800a720:	e001      	b.n	800a726 <USBH_ParseEPDesc+0xc0>
 800a722:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a726:	4313      	orrs	r3, r2
 800a728:	b21b      	sxth	r3, r3
 800a72a:	b29a      	uxth	r2, r3
 800a72c:	68bb      	ldr	r3, [r7, #8]
 800a72e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a736:	2b00      	cmp	r3, #0
 800a738:	d116      	bne.n	800a768 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	78db      	ldrb	r3, [r3, #3]
 800a73e:	f003 0303 	and.w	r3, r3, #3
 800a742:	2b01      	cmp	r3, #1
 800a744:	d005      	beq.n	800a752 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a746:	68bb      	ldr	r3, [r7, #8]
 800a748:	78db      	ldrb	r3, [r3, #3]
 800a74a:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a74e:	2b03      	cmp	r3, #3
 800a750:	d127      	bne.n	800a7a2 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a752:	68bb      	ldr	r3, [r7, #8]
 800a754:	799b      	ldrb	r3, [r3, #6]
 800a756:	2b00      	cmp	r3, #0
 800a758:	d003      	beq.n	800a762 <USBH_ParseEPDesc+0xfc>
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	799b      	ldrb	r3, [r3, #6]
 800a75e:	2b10      	cmp	r3, #16
 800a760:	d91f      	bls.n	800a7a2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a762:	2303      	movs	r3, #3
 800a764:	75fb      	strb	r3, [r7, #23]
 800a766:	e01c      	b.n	800a7a2 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	78db      	ldrb	r3, [r3, #3]
 800a76c:	f003 0303 	and.w	r3, r3, #3
 800a770:	2b01      	cmp	r3, #1
 800a772:	d10a      	bne.n	800a78a <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a774:	68bb      	ldr	r3, [r7, #8]
 800a776:	799b      	ldrb	r3, [r3, #6]
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d003      	beq.n	800a784 <USBH_ParseEPDesc+0x11e>
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	799b      	ldrb	r3, [r3, #6]
 800a780:	2b10      	cmp	r3, #16
 800a782:	d90e      	bls.n	800a7a2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a784:	2303      	movs	r3, #3
 800a786:	75fb      	strb	r3, [r7, #23]
 800a788:	e00b      	b.n	800a7a2 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	78db      	ldrb	r3, [r3, #3]
 800a78e:	f003 0303 	and.w	r3, r3, #3
 800a792:	2b03      	cmp	r3, #3
 800a794:	d105      	bne.n	800a7a2 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	799b      	ldrb	r3, [r3, #6]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d101      	bne.n	800a7a2 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a79e:	2303      	movs	r3, #3
 800a7a0:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a7a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	371c      	adds	r7, #28
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b087      	sub	sp, #28
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	60f8      	str	r0, [r7, #12]
 800a7b8:	60b9      	str	r1, [r7, #8]
 800a7ba:	4613      	mov	r3, r2
 800a7bc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	3301      	adds	r3, #1
 800a7c2:	781b      	ldrb	r3, [r3, #0]
 800a7c4:	2b03      	cmp	r3, #3
 800a7c6:	d120      	bne.n	800a80a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	1e9a      	subs	r2, r3, #2
 800a7ce:	88fb      	ldrh	r3, [r7, #6]
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	bf28      	it	cs
 800a7d4:	4613      	movcs	r3, r2
 800a7d6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	3302      	adds	r3, #2
 800a7dc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a7de:	2300      	movs	r3, #0
 800a7e0:	82fb      	strh	r3, [r7, #22]
 800a7e2:	e00b      	b.n	800a7fc <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a7e4:	8afb      	ldrh	r3, [r7, #22]
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	4413      	add	r3, r2
 800a7ea:	781a      	ldrb	r2, [r3, #0]
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a7f0:	68bb      	ldr	r3, [r7, #8]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a7f6:	8afb      	ldrh	r3, [r7, #22]
 800a7f8:	3302      	adds	r3, #2
 800a7fa:	82fb      	strh	r3, [r7, #22]
 800a7fc:	8afa      	ldrh	r2, [r7, #22]
 800a7fe:	8abb      	ldrh	r3, [r7, #20]
 800a800:	429a      	cmp	r2, r3
 800a802:	d3ef      	bcc.n	800a7e4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	2200      	movs	r2, #0
 800a808:	701a      	strb	r2, [r3, #0]
  }
}
 800a80a:	bf00      	nop
 800a80c:	371c      	adds	r7, #28
 800a80e:	46bd      	mov	sp, r7
 800a810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a814:	4770      	bx	lr

0800a816 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a816:	b480      	push	{r7}
 800a818:	b085      	sub	sp, #20
 800a81a:	af00      	add	r7, sp, #0
 800a81c:	6078      	str	r0, [r7, #4]
 800a81e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	881a      	ldrh	r2, [r3, #0]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	781b      	ldrb	r3, [r3, #0]
 800a828:	b29b      	uxth	r3, r3
 800a82a:	4413      	add	r3, r2
 800a82c:	b29a      	uxth	r2, r3
 800a82e:	683b      	ldr	r3, [r7, #0]
 800a830:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	4413      	add	r3, r2
 800a83c:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a83e:	68fb      	ldr	r3, [r7, #12]
}
 800a840:	4618      	mov	r0, r3
 800a842:	3714      	adds	r7, #20
 800a844:	46bd      	mov	sp, r7
 800a846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84a:	4770      	bx	lr

0800a84c <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b086      	sub	sp, #24
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	4613      	mov	r3, r2
 800a858:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a85a:	2301      	movs	r3, #1
 800a85c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	789b      	ldrb	r3, [r3, #2]
 800a862:	2b01      	cmp	r3, #1
 800a864:	d002      	beq.n	800a86c <USBH_CtlReq+0x20>
 800a866:	2b02      	cmp	r3, #2
 800a868:	d00f      	beq.n	800a88a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a86a:	e027      	b.n	800a8bc <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a86c:	68fb      	ldr	r3, [r7, #12]
 800a86e:	68ba      	ldr	r2, [r7, #8]
 800a870:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	88fa      	ldrh	r2, [r7, #6]
 800a876:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2201      	movs	r2, #1
 800a87c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2202      	movs	r2, #2
 800a882:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a884:	2301      	movs	r3, #1
 800a886:	75fb      	strb	r3, [r7, #23]
      break;
 800a888:	e018      	b.n	800a8bc <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f000 f81c 	bl	800a8c8 <USBH_HandleControl>
 800a890:	4603      	mov	r3, r0
 800a892:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a894:	7dfb      	ldrb	r3, [r7, #23]
 800a896:	2b00      	cmp	r3, #0
 800a898:	d002      	beq.n	800a8a0 <USBH_CtlReq+0x54>
 800a89a:	7dfb      	ldrb	r3, [r7, #23]
 800a89c:	2b03      	cmp	r3, #3
 800a89e:	d106      	bne.n	800a8ae <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2201      	movs	r2, #1
 800a8a4:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2200      	movs	r2, #0
 800a8aa:	761a      	strb	r2, [r3, #24]
      break;
 800a8ac:	e005      	b.n	800a8ba <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a8ae:	7dfb      	ldrb	r3, [r7, #23]
 800a8b0:	2b02      	cmp	r3, #2
 800a8b2:	d102      	bne.n	800a8ba <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2201      	movs	r2, #1
 800a8b8:	709a      	strb	r2, [r3, #2]
      break;
 800a8ba:	bf00      	nop
  }
  return status;
 800a8bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8be:	4618      	mov	r0, r3
 800a8c0:	3718      	adds	r7, #24
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	bd80      	pop	{r7, pc}
	...

0800a8c8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b086      	sub	sp, #24
 800a8cc:	af02      	add	r7, sp, #8
 800a8ce:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a8d0:	2301      	movs	r3, #1
 800a8d2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a8d4:	2300      	movs	r3, #0
 800a8d6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	7e1b      	ldrb	r3, [r3, #24]
 800a8dc:	3b01      	subs	r3, #1
 800a8de:	2b0a      	cmp	r3, #10
 800a8e0:	f200 8156 	bhi.w	800ab90 <USBH_HandleControl+0x2c8>
 800a8e4:	a201      	add	r2, pc, #4	; (adr r2, 800a8ec <USBH_HandleControl+0x24>)
 800a8e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a8ea:	bf00      	nop
 800a8ec:	0800a919 	.word	0x0800a919
 800a8f0:	0800a933 	.word	0x0800a933
 800a8f4:	0800a99d 	.word	0x0800a99d
 800a8f8:	0800a9c3 	.word	0x0800a9c3
 800a8fc:	0800a9fb 	.word	0x0800a9fb
 800a900:	0800aa25 	.word	0x0800aa25
 800a904:	0800aa77 	.word	0x0800aa77
 800a908:	0800aa99 	.word	0x0800aa99
 800a90c:	0800aad5 	.word	0x0800aad5
 800a910:	0800aafb 	.word	0x0800aafb
 800a914:	0800ab39 	.word	0x0800ab39
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	f103 0110 	add.w	r1, r3, #16
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	795b      	ldrb	r3, [r3, #5]
 800a922:	461a      	mov	r2, r3
 800a924:	6878      	ldr	r0, [r7, #4]
 800a926:	f000 f943 	bl	800abb0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2202      	movs	r2, #2
 800a92e:	761a      	strb	r2, [r3, #24]
      break;
 800a930:	e139      	b.n	800aba6 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	795b      	ldrb	r3, [r3, #5]
 800a936:	4619      	mov	r1, r3
 800a938:	6878      	ldr	r0, [r7, #4]
 800a93a:	f000 fcc5 	bl	800b2c8 <USBH_LL_GetURBState>
 800a93e:	4603      	mov	r3, r0
 800a940:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a942:	7bbb      	ldrb	r3, [r7, #14]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d11e      	bne.n	800a986 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	7c1b      	ldrb	r3, [r3, #16]
 800a94c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a950:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	8adb      	ldrh	r3, [r3, #22]
 800a956:	2b00      	cmp	r3, #0
 800a958:	d00a      	beq.n	800a970 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a95a:	7b7b      	ldrb	r3, [r7, #13]
 800a95c:	2b80      	cmp	r3, #128	; 0x80
 800a95e:	d103      	bne.n	800a968 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2203      	movs	r2, #3
 800a964:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a966:	e115      	b.n	800ab94 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	2205      	movs	r2, #5
 800a96c:	761a      	strb	r2, [r3, #24]
      break;
 800a96e:	e111      	b.n	800ab94 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a970:	7b7b      	ldrb	r3, [r7, #13]
 800a972:	2b80      	cmp	r3, #128	; 0x80
 800a974:	d103      	bne.n	800a97e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2209      	movs	r2, #9
 800a97a:	761a      	strb	r2, [r3, #24]
      break;
 800a97c:	e10a      	b.n	800ab94 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	2207      	movs	r2, #7
 800a982:	761a      	strb	r2, [r3, #24]
      break;
 800a984:	e106      	b.n	800ab94 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a986:	7bbb      	ldrb	r3, [r7, #14]
 800a988:	2b04      	cmp	r3, #4
 800a98a:	d003      	beq.n	800a994 <USBH_HandleControl+0xcc>
 800a98c:	7bbb      	ldrb	r3, [r7, #14]
 800a98e:	2b02      	cmp	r3, #2
 800a990:	f040 8100 	bne.w	800ab94 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	220b      	movs	r2, #11
 800a998:	761a      	strb	r2, [r3, #24]
      break;
 800a99a:	e0fb      	b.n	800ab94 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a9a2:	b29a      	uxth	r2, r3
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	6899      	ldr	r1, [r3, #8]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	899a      	ldrh	r2, [r3, #12]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	791b      	ldrb	r3, [r3, #4]
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 f93a 	bl	800ac2e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	2204      	movs	r2, #4
 800a9be:	761a      	strb	r2, [r3, #24]
      break;
 800a9c0:	e0f1      	b.n	800aba6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	791b      	ldrb	r3, [r3, #4]
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 fc7d 	bl	800b2c8 <USBH_LL_GetURBState>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a9d2:	7bbb      	ldrb	r3, [r7, #14]
 800a9d4:	2b01      	cmp	r3, #1
 800a9d6:	d102      	bne.n	800a9de <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	2209      	movs	r2, #9
 800a9dc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a9de:	7bbb      	ldrb	r3, [r7, #14]
 800a9e0:	2b05      	cmp	r3, #5
 800a9e2:	d102      	bne.n	800a9ea <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a9e4:	2303      	movs	r3, #3
 800a9e6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a9e8:	e0d6      	b.n	800ab98 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a9ea:	7bbb      	ldrb	r3, [r7, #14]
 800a9ec:	2b04      	cmp	r3, #4
 800a9ee:	f040 80d3 	bne.w	800ab98 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	220b      	movs	r2, #11
 800a9f6:	761a      	strb	r2, [r3, #24]
      break;
 800a9f8:	e0ce      	b.n	800ab98 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6899      	ldr	r1, [r3, #8]
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	899a      	ldrh	r2, [r3, #12]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	795b      	ldrb	r3, [r3, #5]
 800aa06:	2001      	movs	r0, #1
 800aa08:	9000      	str	r0, [sp, #0]
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 f8ea 	bl	800abe4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa16:	b29a      	uxth	r2, r3
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2206      	movs	r2, #6
 800aa20:	761a      	strb	r2, [r3, #24]
      break;
 800aa22:	e0c0      	b.n	800aba6 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	795b      	ldrb	r3, [r3, #5]
 800aa28:	4619      	mov	r1, r3
 800aa2a:	6878      	ldr	r0, [r7, #4]
 800aa2c:	f000 fc4c 	bl	800b2c8 <USBH_LL_GetURBState>
 800aa30:	4603      	mov	r3, r0
 800aa32:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800aa34:	7bbb      	ldrb	r3, [r7, #14]
 800aa36:	2b01      	cmp	r3, #1
 800aa38:	d103      	bne.n	800aa42 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	2207      	movs	r2, #7
 800aa3e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aa40:	e0ac      	b.n	800ab9c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800aa42:	7bbb      	ldrb	r3, [r7, #14]
 800aa44:	2b05      	cmp	r3, #5
 800aa46:	d105      	bne.n	800aa54 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	220c      	movs	r2, #12
 800aa4c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800aa4e:	2303      	movs	r3, #3
 800aa50:	73fb      	strb	r3, [r7, #15]
      break;
 800aa52:	e0a3      	b.n	800ab9c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aa54:	7bbb      	ldrb	r3, [r7, #14]
 800aa56:	2b02      	cmp	r3, #2
 800aa58:	d103      	bne.n	800aa62 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	2205      	movs	r2, #5
 800aa5e:	761a      	strb	r2, [r3, #24]
      break;
 800aa60:	e09c      	b.n	800ab9c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800aa62:	7bbb      	ldrb	r3, [r7, #14]
 800aa64:	2b04      	cmp	r3, #4
 800aa66:	f040 8099 	bne.w	800ab9c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	220b      	movs	r2, #11
 800aa6e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800aa70:	2302      	movs	r3, #2
 800aa72:	73fb      	strb	r3, [r7, #15]
      break;
 800aa74:	e092      	b.n	800ab9c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	791b      	ldrb	r3, [r3, #4]
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	2100      	movs	r1, #0
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f000 f8d5 	bl	800ac2e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aa8a:	b29a      	uxth	r2, r3
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	2208      	movs	r2, #8
 800aa94:	761a      	strb	r2, [r3, #24]

      break;
 800aa96:	e086      	b.n	800aba6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	791b      	ldrb	r3, [r3, #4]
 800aa9c:	4619      	mov	r1, r3
 800aa9e:	6878      	ldr	r0, [r7, #4]
 800aaa0:	f000 fc12 	bl	800b2c8 <USBH_LL_GetURBState>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800aaa8:	7bbb      	ldrb	r3, [r7, #14]
 800aaaa:	2b01      	cmp	r3, #1
 800aaac:	d105      	bne.n	800aaba <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	220d      	movs	r2, #13
 800aab2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800aab4:	2300      	movs	r3, #0
 800aab6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aab8:	e072      	b.n	800aba0 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800aaba:	7bbb      	ldrb	r3, [r7, #14]
 800aabc:	2b04      	cmp	r3, #4
 800aabe:	d103      	bne.n	800aac8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	220b      	movs	r2, #11
 800aac4:	761a      	strb	r2, [r3, #24]
      break;
 800aac6:	e06b      	b.n	800aba0 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800aac8:	7bbb      	ldrb	r3, [r7, #14]
 800aaca:	2b05      	cmp	r3, #5
 800aacc:	d168      	bne.n	800aba0 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800aace:	2303      	movs	r3, #3
 800aad0:	73fb      	strb	r3, [r7, #15]
      break;
 800aad2:	e065      	b.n	800aba0 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	795b      	ldrb	r3, [r3, #5]
 800aad8:	2201      	movs	r2, #1
 800aada:	9200      	str	r2, [sp, #0]
 800aadc:	2200      	movs	r2, #0
 800aade:	2100      	movs	r1, #0
 800aae0:	6878      	ldr	r0, [r7, #4]
 800aae2:	f000 f87f 	bl	800abe4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800aaec:	b29a      	uxth	r2, r3
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	220a      	movs	r2, #10
 800aaf6:	761a      	strb	r2, [r3, #24]
      break;
 800aaf8:	e055      	b.n	800aba6 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	795b      	ldrb	r3, [r3, #5]
 800aafe:	4619      	mov	r1, r3
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 fbe1 	bl	800b2c8 <USBH_LL_GetURBState>
 800ab06:	4603      	mov	r3, r0
 800ab08:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ab0a:	7bbb      	ldrb	r3, [r7, #14]
 800ab0c:	2b01      	cmp	r3, #1
 800ab0e:	d105      	bne.n	800ab1c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ab10:	2300      	movs	r3, #0
 800ab12:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	220d      	movs	r2, #13
 800ab18:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ab1a:	e043      	b.n	800aba4 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ab1c:	7bbb      	ldrb	r3, [r7, #14]
 800ab1e:	2b02      	cmp	r3, #2
 800ab20:	d103      	bne.n	800ab2a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2209      	movs	r2, #9
 800ab26:	761a      	strb	r2, [r3, #24]
      break;
 800ab28:	e03c      	b.n	800aba4 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ab2a:	7bbb      	ldrb	r3, [r7, #14]
 800ab2c:	2b04      	cmp	r3, #4
 800ab2e:	d139      	bne.n	800aba4 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	220b      	movs	r2, #11
 800ab34:	761a      	strb	r2, [r3, #24]
      break;
 800ab36:	e035      	b.n	800aba4 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	7e5b      	ldrb	r3, [r3, #25]
 800ab3c:	3301      	adds	r3, #1
 800ab3e:	b2da      	uxtb	r2, r3
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	765a      	strb	r2, [r3, #25]
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	7e5b      	ldrb	r3, [r3, #25]
 800ab48:	2b02      	cmp	r3, #2
 800ab4a:	d806      	bhi.n	800ab5a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2201      	movs	r2, #1
 800ab50:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	2201      	movs	r2, #1
 800ab56:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ab58:	e025      	b.n	800aba6 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ab60:	2106      	movs	r1, #6
 800ab62:	6878      	ldr	r0, [r7, #4]
 800ab64:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	2200      	movs	r2, #0
 800ab6a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	795b      	ldrb	r3, [r3, #5]
 800ab70:	4619      	mov	r1, r3
 800ab72:	6878      	ldr	r0, [r7, #4]
 800ab74:	f000 f90c 	bl	800ad90 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	791b      	ldrb	r3, [r3, #4]
 800ab7c:	4619      	mov	r1, r3
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f000 f906 	bl	800ad90 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2200      	movs	r2, #0
 800ab88:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800ab8a:	2302      	movs	r3, #2
 800ab8c:	73fb      	strb	r3, [r7, #15]
      break;
 800ab8e:	e00a      	b.n	800aba6 <USBH_HandleControl+0x2de>

    default:
      break;
 800ab90:	bf00      	nop
 800ab92:	e008      	b.n	800aba6 <USBH_HandleControl+0x2de>
      break;
 800ab94:	bf00      	nop
 800ab96:	e006      	b.n	800aba6 <USBH_HandleControl+0x2de>
      break;
 800ab98:	bf00      	nop
 800ab9a:	e004      	b.n	800aba6 <USBH_HandleControl+0x2de>
      break;
 800ab9c:	bf00      	nop
 800ab9e:	e002      	b.n	800aba6 <USBH_HandleControl+0x2de>
      break;
 800aba0:	bf00      	nop
 800aba2:	e000      	b.n	800aba6 <USBH_HandleControl+0x2de>
      break;
 800aba4:	bf00      	nop
  }

  return status;
 800aba6:	7bfb      	ldrb	r3, [r7, #15]
}
 800aba8:	4618      	mov	r0, r3
 800abaa:	3710      	adds	r7, #16
 800abac:	46bd      	mov	sp, r7
 800abae:	bd80      	pop	{r7, pc}

0800abb0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800abb0:	b580      	push	{r7, lr}
 800abb2:	b088      	sub	sp, #32
 800abb4:	af04      	add	r7, sp, #16
 800abb6:	60f8      	str	r0, [r7, #12]
 800abb8:	60b9      	str	r1, [r7, #8]
 800abba:	4613      	mov	r3, r2
 800abbc:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800abbe:	79f9      	ldrb	r1, [r7, #7]
 800abc0:	2300      	movs	r3, #0
 800abc2:	9303      	str	r3, [sp, #12]
 800abc4:	2308      	movs	r3, #8
 800abc6:	9302      	str	r3, [sp, #8]
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	9301      	str	r3, [sp, #4]
 800abcc:	2300      	movs	r3, #0
 800abce:	9300      	str	r3, [sp, #0]
 800abd0:	2300      	movs	r3, #0
 800abd2:	2200      	movs	r2, #0
 800abd4:	68f8      	ldr	r0, [r7, #12]
 800abd6:	f000 fb46 	bl	800b266 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800abda:	2300      	movs	r3, #0
}
 800abdc:	4618      	mov	r0, r3
 800abde:	3710      	adds	r7, #16
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bd80      	pop	{r7, pc}

0800abe4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800abe4:	b580      	push	{r7, lr}
 800abe6:	b088      	sub	sp, #32
 800abe8:	af04      	add	r7, sp, #16
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	4611      	mov	r1, r2
 800abf0:	461a      	mov	r2, r3
 800abf2:	460b      	mov	r3, r1
 800abf4:	80fb      	strh	r3, [r7, #6]
 800abf6:	4613      	mov	r3, r2
 800abf8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	d001      	beq.n	800ac08 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ac04:	2300      	movs	r3, #0
 800ac06:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ac08:	7979      	ldrb	r1, [r7, #5]
 800ac0a:	7e3b      	ldrb	r3, [r7, #24]
 800ac0c:	9303      	str	r3, [sp, #12]
 800ac0e:	88fb      	ldrh	r3, [r7, #6]
 800ac10:	9302      	str	r3, [sp, #8]
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	9301      	str	r3, [sp, #4]
 800ac16:	2301      	movs	r3, #1
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	2300      	movs	r3, #0
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	f000 fb21 	bl	800b266 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b088      	sub	sp, #32
 800ac32:	af04      	add	r7, sp, #16
 800ac34:	60f8      	str	r0, [r7, #12]
 800ac36:	60b9      	str	r1, [r7, #8]
 800ac38:	4611      	mov	r1, r2
 800ac3a:	461a      	mov	r2, r3
 800ac3c:	460b      	mov	r3, r1
 800ac3e:	80fb      	strh	r3, [r7, #6]
 800ac40:	4613      	mov	r3, r2
 800ac42:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ac44:	7979      	ldrb	r1, [r7, #5]
 800ac46:	2300      	movs	r3, #0
 800ac48:	9303      	str	r3, [sp, #12]
 800ac4a:	88fb      	ldrh	r3, [r7, #6]
 800ac4c:	9302      	str	r3, [sp, #8]
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	9301      	str	r3, [sp, #4]
 800ac52:	2301      	movs	r3, #1
 800ac54:	9300      	str	r3, [sp, #0]
 800ac56:	2300      	movs	r3, #0
 800ac58:	2201      	movs	r2, #1
 800ac5a:	68f8      	ldr	r0, [r7, #12]
 800ac5c:	f000 fb03 	bl	800b266 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ac60:	2300      	movs	r3, #0

}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3710      	adds	r7, #16
 800ac66:	46bd      	mov	sp, r7
 800ac68:	bd80      	pop	{r7, pc}

0800ac6a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ac6a:	b580      	push	{r7, lr}
 800ac6c:	b088      	sub	sp, #32
 800ac6e:	af04      	add	r7, sp, #16
 800ac70:	60f8      	str	r0, [r7, #12]
 800ac72:	60b9      	str	r1, [r7, #8]
 800ac74:	4611      	mov	r1, r2
 800ac76:	461a      	mov	r2, r3
 800ac78:	460b      	mov	r3, r1
 800ac7a:	80fb      	strh	r3, [r7, #6]
 800ac7c:	4613      	mov	r3, r2
 800ac7e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d001      	beq.n	800ac8e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ac8e:	7979      	ldrb	r1, [r7, #5]
 800ac90:	7e3b      	ldrb	r3, [r7, #24]
 800ac92:	9303      	str	r3, [sp, #12]
 800ac94:	88fb      	ldrh	r3, [r7, #6]
 800ac96:	9302      	str	r3, [sp, #8]
 800ac98:	68bb      	ldr	r3, [r7, #8]
 800ac9a:	9301      	str	r3, [sp, #4]
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	9300      	str	r3, [sp, #0]
 800aca0:	2302      	movs	r3, #2
 800aca2:	2200      	movs	r2, #0
 800aca4:	68f8      	ldr	r0, [r7, #12]
 800aca6:	f000 fade 	bl	800b266 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800acaa:	2300      	movs	r3, #0
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b088      	sub	sp, #32
 800acb8:	af04      	add	r7, sp, #16
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	4611      	mov	r1, r2
 800acc0:	461a      	mov	r2, r3
 800acc2:	460b      	mov	r3, r1
 800acc4:	80fb      	strh	r3, [r7, #6]
 800acc6:	4613      	mov	r3, r2
 800acc8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800acca:	7979      	ldrb	r1, [r7, #5]
 800accc:	2300      	movs	r3, #0
 800acce:	9303      	str	r3, [sp, #12]
 800acd0:	88fb      	ldrh	r3, [r7, #6]
 800acd2:	9302      	str	r3, [sp, #8]
 800acd4:	68bb      	ldr	r3, [r7, #8]
 800acd6:	9301      	str	r3, [sp, #4]
 800acd8:	2301      	movs	r3, #1
 800acda:	9300      	str	r3, [sp, #0]
 800acdc:	2302      	movs	r3, #2
 800acde:	2201      	movs	r2, #1
 800ace0:	68f8      	ldr	r0, [r7, #12]
 800ace2:	f000 fac0 	bl	800b266 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3710      	adds	r7, #16
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800acf0:	b580      	push	{r7, lr}
 800acf2:	b086      	sub	sp, #24
 800acf4:	af04      	add	r7, sp, #16
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	4608      	mov	r0, r1
 800acfa:	4611      	mov	r1, r2
 800acfc:	461a      	mov	r2, r3
 800acfe:	4603      	mov	r3, r0
 800ad00:	70fb      	strb	r3, [r7, #3]
 800ad02:	460b      	mov	r3, r1
 800ad04:	70bb      	strb	r3, [r7, #2]
 800ad06:	4613      	mov	r3, r2
 800ad08:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ad0a:	7878      	ldrb	r0, [r7, #1]
 800ad0c:	78ba      	ldrb	r2, [r7, #2]
 800ad0e:	78f9      	ldrb	r1, [r7, #3]
 800ad10:	8b3b      	ldrh	r3, [r7, #24]
 800ad12:	9302      	str	r3, [sp, #8]
 800ad14:	7d3b      	ldrb	r3, [r7, #20]
 800ad16:	9301      	str	r3, [sp, #4]
 800ad18:	7c3b      	ldrb	r3, [r7, #16]
 800ad1a:	9300      	str	r3, [sp, #0]
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	6878      	ldr	r0, [r7, #4]
 800ad20:	f000 fa53 	bl	800b1ca <USBH_LL_OpenPipe>

  return USBH_OK;
 800ad24:	2300      	movs	r3, #0
}
 800ad26:	4618      	mov	r0, r3
 800ad28:	3708      	adds	r7, #8
 800ad2a:	46bd      	mov	sp, r7
 800ad2c:	bd80      	pop	{r7, pc}

0800ad2e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ad2e:	b580      	push	{r7, lr}
 800ad30:	b082      	sub	sp, #8
 800ad32:	af00      	add	r7, sp, #0
 800ad34:	6078      	str	r0, [r7, #4]
 800ad36:	460b      	mov	r3, r1
 800ad38:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ad3a:	78fb      	ldrb	r3, [r7, #3]
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 fa72 	bl	800b228 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ad44:	2300      	movs	r3, #0
}
 800ad46:	4618      	mov	r0, r3
 800ad48:	3708      	adds	r7, #8
 800ad4a:	46bd      	mov	sp, r7
 800ad4c:	bd80      	pop	{r7, pc}

0800ad4e <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ad4e:	b580      	push	{r7, lr}
 800ad50:	b084      	sub	sp, #16
 800ad52:	af00      	add	r7, sp, #0
 800ad54:	6078      	str	r0, [r7, #4]
 800ad56:	460b      	mov	r3, r1
 800ad58:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 f836 	bl	800adcc <USBH_GetFreePipe>
 800ad60:	4603      	mov	r3, r0
 800ad62:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ad64:	89fb      	ldrh	r3, [r7, #14]
 800ad66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d00a      	beq.n	800ad84 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ad6e:	78fa      	ldrb	r2, [r7, #3]
 800ad70:	89fb      	ldrh	r3, [r7, #14]
 800ad72:	f003 030f 	and.w	r3, r3, #15
 800ad76:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ad7a:	6879      	ldr	r1, [r7, #4]
 800ad7c:	33e0      	adds	r3, #224	; 0xe0
 800ad7e:	009b      	lsls	r3, r3, #2
 800ad80:	440b      	add	r3, r1
 800ad82:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ad84:	89fb      	ldrh	r3, [r7, #14]
 800ad86:	b2db      	uxtb	r3, r3
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3710      	adds	r7, #16
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ad90:	b480      	push	{r7}
 800ad92:	b083      	sub	sp, #12
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	6078      	str	r0, [r7, #4]
 800ad98:	460b      	mov	r3, r1
 800ad9a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ad9c:	78fb      	ldrb	r3, [r7, #3]
 800ad9e:	2b0f      	cmp	r3, #15
 800ada0:	d80d      	bhi.n	800adbe <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ada2:	78fb      	ldrb	r3, [r7, #3]
 800ada4:	687a      	ldr	r2, [r7, #4]
 800ada6:	33e0      	adds	r3, #224	; 0xe0
 800ada8:	009b      	lsls	r3, r3, #2
 800adaa:	4413      	add	r3, r2
 800adac:	685a      	ldr	r2, [r3, #4]
 800adae:	78fb      	ldrb	r3, [r7, #3]
 800adb0:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800adb4:	6879      	ldr	r1, [r7, #4]
 800adb6:	33e0      	adds	r3, #224	; 0xe0
 800adb8:	009b      	lsls	r3, r3, #2
 800adba:	440b      	add	r3, r1
 800adbc:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800adbe:	2300      	movs	r3, #0
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800adcc:	b480      	push	{r7}
 800adce:	b085      	sub	sp, #20
 800add0:	af00      	add	r7, sp, #0
 800add2:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800add4:	2300      	movs	r3, #0
 800add6:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800add8:	2300      	movs	r3, #0
 800adda:	73fb      	strb	r3, [r7, #15]
 800addc:	e00f      	b.n	800adfe <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800adde:	7bfb      	ldrb	r3, [r7, #15]
 800ade0:	687a      	ldr	r2, [r7, #4]
 800ade2:	33e0      	adds	r3, #224	; 0xe0
 800ade4:	009b      	lsls	r3, r3, #2
 800ade6:	4413      	add	r3, r2
 800ade8:	685b      	ldr	r3, [r3, #4]
 800adea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d102      	bne.n	800adf8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800adf2:	7bfb      	ldrb	r3, [r7, #15]
 800adf4:	b29b      	uxth	r3, r3
 800adf6:	e007      	b.n	800ae08 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800adf8:	7bfb      	ldrb	r3, [r7, #15]
 800adfa:	3301      	adds	r3, #1
 800adfc:	73fb      	strb	r3, [r7, #15]
 800adfe:	7bfb      	ldrb	r3, [r7, #15]
 800ae00:	2b0f      	cmp	r3, #15
 800ae02:	d9ec      	bls.n	800adde <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ae04:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ae08:	4618      	mov	r0, r3
 800ae0a:	3714      	adds	r7, #20
 800ae0c:	46bd      	mov	sp, r7
 800ae0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae12:	4770      	bx	lr

0800ae14 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ae18:	2201      	movs	r2, #1
 800ae1a:	490e      	ldr	r1, [pc, #56]	; (800ae54 <MX_USB_HOST_Init+0x40>)
 800ae1c:	480e      	ldr	r0, [pc, #56]	; (800ae58 <MX_USB_HOST_Init+0x44>)
 800ae1e:	f7fe fba5 	bl	800956c <USBH_Init>
 800ae22:	4603      	mov	r3, r0
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d001      	beq.n	800ae2c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ae28:	f7f7 f98d 	bl	8002146 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ae2c:	490b      	ldr	r1, [pc, #44]	; (800ae5c <MX_USB_HOST_Init+0x48>)
 800ae2e:	480a      	ldr	r0, [pc, #40]	; (800ae58 <MX_USB_HOST_Init+0x44>)
 800ae30:	f7fe fc2a 	bl	8009688 <USBH_RegisterClass>
 800ae34:	4603      	mov	r3, r0
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d001      	beq.n	800ae3e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ae3a:	f7f7 f984 	bl	8002146 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ae3e:	4806      	ldr	r0, [pc, #24]	; (800ae58 <MX_USB_HOST_Init+0x44>)
 800ae40:	f7fe fcae 	bl	80097a0 <USBH_Start>
 800ae44:	4603      	mov	r3, r0
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d001      	beq.n	800ae4e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ae4a:	f7f7 f97c 	bl	8002146 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ae4e:	bf00      	nop
 800ae50:	bd80      	pop	{r7, pc}
 800ae52:	bf00      	nop
 800ae54:	0800ae75 	.word	0x0800ae75
 800ae58:	2000040c 	.word	0x2000040c
 800ae5c:	2000000c 	.word	0x2000000c

0800ae60 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ae60:	b580      	push	{r7, lr}
 800ae62:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ae64:	4802      	ldr	r0, [pc, #8]	; (800ae70 <MX_USB_HOST_Process+0x10>)
 800ae66:	f7fe fcab 	bl	80097c0 <USBH_Process>
}
 800ae6a:	bf00      	nop
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	2000040c 	.word	0x2000040c

0800ae74 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ae74:	b480      	push	{r7}
 800ae76:	b083      	sub	sp, #12
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ae80:	78fb      	ldrb	r3, [r7, #3]
 800ae82:	3b01      	subs	r3, #1
 800ae84:	2b04      	cmp	r3, #4
 800ae86:	d819      	bhi.n	800aebc <USBH_UserProcess+0x48>
 800ae88:	a201      	add	r2, pc, #4	; (adr r2, 800ae90 <USBH_UserProcess+0x1c>)
 800ae8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae8e:	bf00      	nop
 800ae90:	0800aebd 	.word	0x0800aebd
 800ae94:	0800aead 	.word	0x0800aead
 800ae98:	0800aebd 	.word	0x0800aebd
 800ae9c:	0800aeb5 	.word	0x0800aeb5
 800aea0:	0800aea5 	.word	0x0800aea5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800aea4:	4b09      	ldr	r3, [pc, #36]	; (800aecc <USBH_UserProcess+0x58>)
 800aea6:	2203      	movs	r2, #3
 800aea8:	701a      	strb	r2, [r3, #0]
  break;
 800aeaa:	e008      	b.n	800aebe <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800aeac:	4b07      	ldr	r3, [pc, #28]	; (800aecc <USBH_UserProcess+0x58>)
 800aeae:	2202      	movs	r2, #2
 800aeb0:	701a      	strb	r2, [r3, #0]
  break;
 800aeb2:	e004      	b.n	800aebe <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800aeb4:	4b05      	ldr	r3, [pc, #20]	; (800aecc <USBH_UserProcess+0x58>)
 800aeb6:	2201      	movs	r2, #1
 800aeb8:	701a      	strb	r2, [r3, #0]
  break;
 800aeba:	e000      	b.n	800aebe <USBH_UserProcess+0x4a>

  default:
  break;
 800aebc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800aebe:	bf00      	nop
 800aec0:	370c      	adds	r7, #12
 800aec2:	46bd      	mov	sp, r7
 800aec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec8:	4770      	bx	lr
 800aeca:	bf00      	nop
 800aecc:	200007e4 	.word	0x200007e4

0800aed0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b08a      	sub	sp, #40	; 0x28
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aed8:	f107 0314 	add.w	r3, r7, #20
 800aedc:	2200      	movs	r2, #0
 800aede:	601a      	str	r2, [r3, #0]
 800aee0:	605a      	str	r2, [r3, #4]
 800aee2:	609a      	str	r2, [r3, #8]
 800aee4:	60da      	str	r2, [r3, #12]
 800aee6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aef0:	d147      	bne.n	800af82 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aef2:	2300      	movs	r3, #0
 800aef4:	613b      	str	r3, [r7, #16]
 800aef6:	4b25      	ldr	r3, [pc, #148]	; (800af8c <HAL_HCD_MspInit+0xbc>)
 800aef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aefa:	4a24      	ldr	r2, [pc, #144]	; (800af8c <HAL_HCD_MspInit+0xbc>)
 800aefc:	f043 0301 	orr.w	r3, r3, #1
 800af00:	6313      	str	r3, [r2, #48]	; 0x30
 800af02:	4b22      	ldr	r3, [pc, #136]	; (800af8c <HAL_HCD_MspInit+0xbc>)
 800af04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af06:	f003 0301 	and.w	r3, r3, #1
 800af0a:	613b      	str	r3, [r7, #16]
 800af0c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800af0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800af12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800af14:	2300      	movs	r3, #0
 800af16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af18:	2300      	movs	r3, #0
 800af1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800af1c:	f107 0314 	add.w	r3, r7, #20
 800af20:	4619      	mov	r1, r3
 800af22:	481b      	ldr	r0, [pc, #108]	; (800af90 <HAL_HCD_MspInit+0xc0>)
 800af24:	f7f8 fec4 	bl	8003cb0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800af28:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800af2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af2e:	2302      	movs	r3, #2
 800af30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af32:	2300      	movs	r3, #0
 800af34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af36:	2300      	movs	r3, #0
 800af38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800af3a:	230a      	movs	r3, #10
 800af3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800af3e:	f107 0314 	add.w	r3, r7, #20
 800af42:	4619      	mov	r1, r3
 800af44:	4812      	ldr	r0, [pc, #72]	; (800af90 <HAL_HCD_MspInit+0xc0>)
 800af46:	f7f8 feb3 	bl	8003cb0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800af4a:	4b10      	ldr	r3, [pc, #64]	; (800af8c <HAL_HCD_MspInit+0xbc>)
 800af4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800af4e:	4a0f      	ldr	r2, [pc, #60]	; (800af8c <HAL_HCD_MspInit+0xbc>)
 800af50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800af54:	6353      	str	r3, [r2, #52]	; 0x34
 800af56:	2300      	movs	r3, #0
 800af58:	60fb      	str	r3, [r7, #12]
 800af5a:	4b0c      	ldr	r3, [pc, #48]	; (800af8c <HAL_HCD_MspInit+0xbc>)
 800af5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af5e:	4a0b      	ldr	r2, [pc, #44]	; (800af8c <HAL_HCD_MspInit+0xbc>)
 800af60:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800af64:	6453      	str	r3, [r2, #68]	; 0x44
 800af66:	4b09      	ldr	r3, [pc, #36]	; (800af8c <HAL_HCD_MspInit+0xbc>)
 800af68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800af6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800af6e:	60fb      	str	r3, [r7, #12]
 800af70:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800af72:	2200      	movs	r2, #0
 800af74:	2100      	movs	r1, #0
 800af76:	2043      	movs	r0, #67	; 0x43
 800af78:	f7f8 faf3 	bl	8003562 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800af7c:	2043      	movs	r0, #67	; 0x43
 800af7e:	f7f8 fb0c 	bl	800359a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800af82:	bf00      	nop
 800af84:	3728      	adds	r7, #40	; 0x28
 800af86:	46bd      	mov	sp, r7
 800af88:	bd80      	pop	{r7, pc}
 800af8a:	bf00      	nop
 800af8c:	40023800 	.word	0x40023800
 800af90:	40020000 	.word	0x40020000

0800af94 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800afa2:	4618      	mov	r0, r3
 800afa4:	f7fe ffeb 	bl	8009f7e <USBH_LL_IncTimer>
}
 800afa8:	bf00      	nop
 800afaa:	3708      	adds	r7, #8
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}

0800afb0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800afb0:	b580      	push	{r7, lr}
 800afb2:	b082      	sub	sp, #8
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800afbe:	4618      	mov	r0, r3
 800afc0:	f7ff f823 	bl	800a00a <USBH_LL_Connect>
}
 800afc4:	bf00      	nop
 800afc6:	3708      	adds	r7, #8
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}

0800afcc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800afcc:	b580      	push	{r7, lr}
 800afce:	b082      	sub	sp, #8
 800afd0:	af00      	add	r7, sp, #0
 800afd2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800afda:	4618      	mov	r0, r3
 800afdc:	f7ff f82c 	bl	800a038 <USBH_LL_Disconnect>
}
 800afe0:	bf00      	nop
 800afe2:	3708      	adds	r7, #8
 800afe4:	46bd      	mov	sp, r7
 800afe6:	bd80      	pop	{r7, pc}

0800afe8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800afe8:	b480      	push	{r7}
 800afea:	b083      	sub	sp, #12
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	460b      	mov	r3, r1
 800aff2:	70fb      	strb	r3, [r7, #3]
 800aff4:	4613      	mov	r3, r2
 800aff6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800aff8:	bf00      	nop
 800affa:	370c      	adds	r7, #12
 800affc:	46bd      	mov	sp, r7
 800affe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b002:	4770      	bx	lr

0800b004 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b004:	b580      	push	{r7, lr}
 800b006:	b082      	sub	sp, #8
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b012:	4618      	mov	r0, r3
 800b014:	f7fe ffdd 	bl	8009fd2 <USBH_LL_PortEnabled>
}
 800b018:	bf00      	nop
 800b01a:	3708      	adds	r7, #8
 800b01c:	46bd      	mov	sp, r7
 800b01e:	bd80      	pop	{r7, pc}

0800b020 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b020:	b580      	push	{r7, lr}
 800b022:	b082      	sub	sp, #8
 800b024:	af00      	add	r7, sp, #0
 800b026:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800b02e:	4618      	mov	r0, r3
 800b030:	f7fe ffdd 	bl	8009fee <USBH_LL_PortDisabled>
}
 800b034:	bf00      	nop
 800b036:	3708      	adds	r7, #8
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b04a:	2b01      	cmp	r3, #1
 800b04c:	d12a      	bne.n	800b0a4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b04e:	4a18      	ldr	r2, [pc, #96]	; (800b0b0 <USBH_LL_Init+0x74>)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	4a15      	ldr	r2, [pc, #84]	; (800b0b0 <USBH_LL_Init+0x74>)
 800b05a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b05e:	4b14      	ldr	r3, [pc, #80]	; (800b0b0 <USBH_LL_Init+0x74>)
 800b060:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b064:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b066:	4b12      	ldr	r3, [pc, #72]	; (800b0b0 <USBH_LL_Init+0x74>)
 800b068:	2208      	movs	r2, #8
 800b06a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b06c:	4b10      	ldr	r3, [pc, #64]	; (800b0b0 <USBH_LL_Init+0x74>)
 800b06e:	2201      	movs	r2, #1
 800b070:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b072:	4b0f      	ldr	r3, [pc, #60]	; (800b0b0 <USBH_LL_Init+0x74>)
 800b074:	2200      	movs	r2, #0
 800b076:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b078:	4b0d      	ldr	r3, [pc, #52]	; (800b0b0 <USBH_LL_Init+0x74>)
 800b07a:	2202      	movs	r2, #2
 800b07c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b07e:	4b0c      	ldr	r3, [pc, #48]	; (800b0b0 <USBH_LL_Init+0x74>)
 800b080:	2200      	movs	r2, #0
 800b082:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b084:	480a      	ldr	r0, [pc, #40]	; (800b0b0 <USBH_LL_Init+0x74>)
 800b086:	f7f8 ffc8 	bl	800401a <HAL_HCD_Init>
 800b08a:	4603      	mov	r3, r0
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d001      	beq.n	800b094 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b090:	f7f7 f859 	bl	8002146 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b094:	4806      	ldr	r0, [pc, #24]	; (800b0b0 <USBH_LL_Init+0x74>)
 800b096:	f7f9 fbac 	bl	80047f2 <HAL_HCD_GetCurrentFrame>
 800b09a:	4603      	mov	r3, r0
 800b09c:	4619      	mov	r1, r3
 800b09e:	6878      	ldr	r0, [r7, #4]
 800b0a0:	f7fe ff5e 	bl	8009f60 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b0a4:	2300      	movs	r3, #0
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3708      	adds	r7, #8
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}
 800b0ae:	bf00      	nop
 800b0b0:	200007e8 	.word	0x200007e8

0800b0b4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b084      	sub	sp, #16
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f7f9 fb1b 	bl	8004706 <HAL_HCD_Start>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b0d4:	7bfb      	ldrb	r3, [r7, #15]
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f000 f95c 	bl	800b394 <USBH_Get_USB_Status>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b0e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800b0e2:	4618      	mov	r0, r3
 800b0e4:	3710      	adds	r7, #16
 800b0e6:	46bd      	mov	sp, r7
 800b0e8:	bd80      	pop	{r7, pc}

0800b0ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b0ea:	b580      	push	{r7, lr}
 800b0ec:	b084      	sub	sp, #16
 800b0ee:	af00      	add	r7, sp, #0
 800b0f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b100:	4618      	mov	r0, r3
 800b102:	f7f9 fb23 	bl	800474c <HAL_HCD_Stop>
 800b106:	4603      	mov	r3, r0
 800b108:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b10a:	7bfb      	ldrb	r3, [r7, #15]
 800b10c:	4618      	mov	r0, r3
 800b10e:	f000 f941 	bl	800b394 <USBH_Get_USB_Status>
 800b112:	4603      	mov	r3, r0
 800b114:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b116:	7bbb      	ldrb	r3, [r7, #14]
}
 800b118:	4618      	mov	r0, r3
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b120:	b580      	push	{r7, lr}
 800b122:	b084      	sub	sp, #16
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b128:	2301      	movs	r3, #1
 800b12a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b132:	4618      	mov	r0, r3
 800b134:	f7f9 fb6b 	bl	800480e <HAL_HCD_GetCurrentSpeed>
 800b138:	4603      	mov	r3, r0
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d00c      	beq.n	800b158 <USBH_LL_GetSpeed+0x38>
 800b13e:	2b02      	cmp	r3, #2
 800b140:	d80d      	bhi.n	800b15e <USBH_LL_GetSpeed+0x3e>
 800b142:	2b00      	cmp	r3, #0
 800b144:	d002      	beq.n	800b14c <USBH_LL_GetSpeed+0x2c>
 800b146:	2b01      	cmp	r3, #1
 800b148:	d003      	beq.n	800b152 <USBH_LL_GetSpeed+0x32>
 800b14a:	e008      	b.n	800b15e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b14c:	2300      	movs	r3, #0
 800b14e:	73fb      	strb	r3, [r7, #15]
    break;
 800b150:	e008      	b.n	800b164 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b152:	2301      	movs	r3, #1
 800b154:	73fb      	strb	r3, [r7, #15]
    break;
 800b156:	e005      	b.n	800b164 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b158:	2302      	movs	r3, #2
 800b15a:	73fb      	strb	r3, [r7, #15]
    break;
 800b15c:	e002      	b.n	800b164 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b15e:	2301      	movs	r3, #1
 800b160:	73fb      	strb	r3, [r7, #15]
    break;
 800b162:	bf00      	nop
  }
  return  speed;
 800b164:	7bfb      	ldrb	r3, [r7, #15]
}
 800b166:	4618      	mov	r0, r3
 800b168:	3710      	adds	r7, #16
 800b16a:	46bd      	mov	sp, r7
 800b16c:	bd80      	pop	{r7, pc}

0800b16e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b16e:	b580      	push	{r7, lr}
 800b170:	b084      	sub	sp, #16
 800b172:	af00      	add	r7, sp, #0
 800b174:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b176:	2300      	movs	r3, #0
 800b178:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b17a:	2300      	movs	r3, #0
 800b17c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b184:	4618      	mov	r0, r3
 800b186:	f7f9 fafe 	bl	8004786 <HAL_HCD_ResetPort>
 800b18a:	4603      	mov	r3, r0
 800b18c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b18e:	7bfb      	ldrb	r3, [r7, #15]
 800b190:	4618      	mov	r0, r3
 800b192:	f000 f8ff 	bl	800b394 <USBH_Get_USB_Status>
 800b196:	4603      	mov	r3, r0
 800b198:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b19a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b19c:	4618      	mov	r0, r3
 800b19e:	3710      	adds	r7, #16
 800b1a0:	46bd      	mov	sp, r7
 800b1a2:	bd80      	pop	{r7, pc}

0800b1a4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
 800b1ac:	460b      	mov	r3, r1
 800b1ae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b1b6:	78fa      	ldrb	r2, [r7, #3]
 800b1b8:	4611      	mov	r1, r2
 800b1ba:	4618      	mov	r0, r3
 800b1bc:	f7f9 fb05 	bl	80047ca <HAL_HCD_HC_GetXferCount>
 800b1c0:	4603      	mov	r3, r0
}
 800b1c2:	4618      	mov	r0, r3
 800b1c4:	3708      	adds	r7, #8
 800b1c6:	46bd      	mov	sp, r7
 800b1c8:	bd80      	pop	{r7, pc}

0800b1ca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b1ca:	b590      	push	{r4, r7, lr}
 800b1cc:	b089      	sub	sp, #36	; 0x24
 800b1ce:	af04      	add	r7, sp, #16
 800b1d0:	6078      	str	r0, [r7, #4]
 800b1d2:	4608      	mov	r0, r1
 800b1d4:	4611      	mov	r1, r2
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	4603      	mov	r3, r0
 800b1da:	70fb      	strb	r3, [r7, #3]
 800b1dc:	460b      	mov	r3, r1
 800b1de:	70bb      	strb	r3, [r7, #2]
 800b1e0:	4613      	mov	r3, r2
 800b1e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b1e4:	2300      	movs	r3, #0
 800b1e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b1f2:	787c      	ldrb	r4, [r7, #1]
 800b1f4:	78ba      	ldrb	r2, [r7, #2]
 800b1f6:	78f9      	ldrb	r1, [r7, #3]
 800b1f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b1fa:	9302      	str	r3, [sp, #8]
 800b1fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b200:	9301      	str	r3, [sp, #4]
 800b202:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b206:	9300      	str	r3, [sp, #0]
 800b208:	4623      	mov	r3, r4
 800b20a:	f7f8 ff68 	bl	80040de <HAL_HCD_HC_Init>
 800b20e:	4603      	mov	r3, r0
 800b210:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b212:	7bfb      	ldrb	r3, [r7, #15]
 800b214:	4618      	mov	r0, r3
 800b216:	f000 f8bd 	bl	800b394 <USBH_Get_USB_Status>
 800b21a:	4603      	mov	r3, r0
 800b21c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b21e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b220:	4618      	mov	r0, r3
 800b222:	3714      	adds	r7, #20
 800b224:	46bd      	mov	sp, r7
 800b226:	bd90      	pop	{r4, r7, pc}

0800b228 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b228:	b580      	push	{r7, lr}
 800b22a:	b084      	sub	sp, #16
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	460b      	mov	r3, r1
 800b232:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b234:	2300      	movs	r3, #0
 800b236:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b238:	2300      	movs	r3, #0
 800b23a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b242:	78fa      	ldrb	r2, [r7, #3]
 800b244:	4611      	mov	r1, r2
 800b246:	4618      	mov	r0, r3
 800b248:	f7f8 ffd8 	bl	80041fc <HAL_HCD_HC_Halt>
 800b24c:	4603      	mov	r3, r0
 800b24e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b250:	7bfb      	ldrb	r3, [r7, #15]
 800b252:	4618      	mov	r0, r3
 800b254:	f000 f89e 	bl	800b394 <USBH_Get_USB_Status>
 800b258:	4603      	mov	r3, r0
 800b25a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b25c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b25e:	4618      	mov	r0, r3
 800b260:	3710      	adds	r7, #16
 800b262:	46bd      	mov	sp, r7
 800b264:	bd80      	pop	{r7, pc}

0800b266 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b266:	b590      	push	{r4, r7, lr}
 800b268:	b089      	sub	sp, #36	; 0x24
 800b26a:	af04      	add	r7, sp, #16
 800b26c:	6078      	str	r0, [r7, #4]
 800b26e:	4608      	mov	r0, r1
 800b270:	4611      	mov	r1, r2
 800b272:	461a      	mov	r2, r3
 800b274:	4603      	mov	r3, r0
 800b276:	70fb      	strb	r3, [r7, #3]
 800b278:	460b      	mov	r3, r1
 800b27a:	70bb      	strb	r3, [r7, #2]
 800b27c:	4613      	mov	r3, r2
 800b27e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b280:	2300      	movs	r3, #0
 800b282:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b284:	2300      	movs	r3, #0
 800b286:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b28e:	787c      	ldrb	r4, [r7, #1]
 800b290:	78ba      	ldrb	r2, [r7, #2]
 800b292:	78f9      	ldrb	r1, [r7, #3]
 800b294:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b298:	9303      	str	r3, [sp, #12]
 800b29a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b29c:	9302      	str	r3, [sp, #8]
 800b29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a0:	9301      	str	r3, [sp, #4]
 800b2a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b2a6:	9300      	str	r3, [sp, #0]
 800b2a8:	4623      	mov	r3, r4
 800b2aa:	f7f8 ffcb 	bl	8004244 <HAL_HCD_HC_SubmitRequest>
 800b2ae:	4603      	mov	r3, r0
 800b2b0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b2b2:	7bfb      	ldrb	r3, [r7, #15]
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	f000 f86d 	bl	800b394 <USBH_Get_USB_Status>
 800b2ba:	4603      	mov	r3, r0
 800b2bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2be:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3714      	adds	r7, #20
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd90      	pop	{r4, r7, pc}

0800b2c8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
 800b2d0:	460b      	mov	r3, r1
 800b2d2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b2da:	78fa      	ldrb	r2, [r7, #3]
 800b2dc:	4611      	mov	r1, r2
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f7f9 fa5f 	bl	80047a2 <HAL_HCD_HC_GetURBState>
 800b2e4:	4603      	mov	r3, r0
}
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	3708      	adds	r7, #8
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}

0800b2ee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b2ee:	b580      	push	{r7, lr}
 800b2f0:	b082      	sub	sp, #8
 800b2f2:	af00      	add	r7, sp, #0
 800b2f4:	6078      	str	r0, [r7, #4]
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b300:	2b01      	cmp	r3, #1
 800b302:	d103      	bne.n	800b30c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800b304:	78fb      	ldrb	r3, [r7, #3]
 800b306:	4618      	mov	r0, r3
 800b308:	f000 f870 	bl	800b3ec <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b30c:	20c8      	movs	r0, #200	; 0xc8
 800b30e:	f7f7 faf3 	bl	80028f8 <HAL_Delay>
  return USBH_OK;
 800b312:	2300      	movs	r3, #0
}
 800b314:	4618      	mov	r0, r3
 800b316:	3708      	adds	r7, #8
 800b318:	46bd      	mov	sp, r7
 800b31a:	bd80      	pop	{r7, pc}

0800b31c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b31c:	b480      	push	{r7}
 800b31e:	b085      	sub	sp, #20
 800b320:	af00      	add	r7, sp, #0
 800b322:	6078      	str	r0, [r7, #4]
 800b324:	460b      	mov	r3, r1
 800b326:	70fb      	strb	r3, [r7, #3]
 800b328:	4613      	mov	r3, r2
 800b32a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b332:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b334:	78fb      	ldrb	r3, [r7, #3]
 800b336:	68fa      	ldr	r2, [r7, #12]
 800b338:	212c      	movs	r1, #44	; 0x2c
 800b33a:	fb01 f303 	mul.w	r3, r1, r3
 800b33e:	4413      	add	r3, r2
 800b340:	333b      	adds	r3, #59	; 0x3b
 800b342:	781b      	ldrb	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d009      	beq.n	800b35c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b348:	78fb      	ldrb	r3, [r7, #3]
 800b34a:	68fa      	ldr	r2, [r7, #12]
 800b34c:	212c      	movs	r1, #44	; 0x2c
 800b34e:	fb01 f303 	mul.w	r3, r1, r3
 800b352:	4413      	add	r3, r2
 800b354:	3354      	adds	r3, #84	; 0x54
 800b356:	78ba      	ldrb	r2, [r7, #2]
 800b358:	701a      	strb	r2, [r3, #0]
 800b35a:	e008      	b.n	800b36e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b35c:	78fb      	ldrb	r3, [r7, #3]
 800b35e:	68fa      	ldr	r2, [r7, #12]
 800b360:	212c      	movs	r1, #44	; 0x2c
 800b362:	fb01 f303 	mul.w	r3, r1, r3
 800b366:	4413      	add	r3, r2
 800b368:	3355      	adds	r3, #85	; 0x55
 800b36a:	78ba      	ldrb	r2, [r7, #2]
 800b36c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	3714      	adds	r7, #20
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b082      	sub	sp, #8
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f7f7 fab7 	bl	80028f8 <HAL_Delay>
}
 800b38a:	bf00      	nop
 800b38c:	3708      	adds	r7, #8
 800b38e:	46bd      	mov	sp, r7
 800b390:	bd80      	pop	{r7, pc}
	...

0800b394 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b394:	b480      	push	{r7}
 800b396:	b085      	sub	sp, #20
 800b398:	af00      	add	r7, sp, #0
 800b39a:	4603      	mov	r3, r0
 800b39c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b3a2:	79fb      	ldrb	r3, [r7, #7]
 800b3a4:	2b03      	cmp	r3, #3
 800b3a6:	d817      	bhi.n	800b3d8 <USBH_Get_USB_Status+0x44>
 800b3a8:	a201      	add	r2, pc, #4	; (adr r2, 800b3b0 <USBH_Get_USB_Status+0x1c>)
 800b3aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3ae:	bf00      	nop
 800b3b0:	0800b3c1 	.word	0x0800b3c1
 800b3b4:	0800b3c7 	.word	0x0800b3c7
 800b3b8:	0800b3cd 	.word	0x0800b3cd
 800b3bc:	0800b3d3 	.word	0x0800b3d3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	73fb      	strb	r3, [r7, #15]
    break;
 800b3c4:	e00b      	b.n	800b3de <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b3c6:	2302      	movs	r3, #2
 800b3c8:	73fb      	strb	r3, [r7, #15]
    break;
 800b3ca:	e008      	b.n	800b3de <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b3cc:	2301      	movs	r3, #1
 800b3ce:	73fb      	strb	r3, [r7, #15]
    break;
 800b3d0:	e005      	b.n	800b3de <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b3d2:	2302      	movs	r3, #2
 800b3d4:	73fb      	strb	r3, [r7, #15]
    break;
 800b3d6:	e002      	b.n	800b3de <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b3d8:	2302      	movs	r3, #2
 800b3da:	73fb      	strb	r3, [r7, #15]
    break;
 800b3dc:	bf00      	nop
  }
  return usb_status;
 800b3de:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3e0:	4618      	mov	r0, r3
 800b3e2:	3714      	adds	r7, #20
 800b3e4:	46bd      	mov	sp, r7
 800b3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ea:	4770      	bx	lr

0800b3ec <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800b3f6:	79fb      	ldrb	r3, [r7, #7]
 800b3f8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800b3fa:	79fb      	ldrb	r3, [r7, #7]
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d102      	bne.n	800b406 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800b400:	2300      	movs	r3, #0
 800b402:	73fb      	strb	r3, [r7, #15]
 800b404:	e001      	b.n	800b40a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800b406:	2301      	movs	r3, #1
 800b408:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800b40a:	7bfb      	ldrb	r3, [r7, #15]
 800b40c:	461a      	mov	r2, r3
 800b40e:	2101      	movs	r1, #1
 800b410:	4803      	ldr	r0, [pc, #12]	; (800b420 <MX_DriverVbusFS+0x34>)
 800b412:	f7f8 fde9 	bl	8003fe8 <HAL_GPIO_WritePin>
}
 800b416:	bf00      	nop
 800b418:	3710      	adds	r7, #16
 800b41a:	46bd      	mov	sp, r7
 800b41c:	bd80      	pop	{r7, pc}
 800b41e:	bf00      	nop
 800b420:	40020800 	.word	0x40020800

0800b424 <malloc>:
 800b424:	4b02      	ldr	r3, [pc, #8]	; (800b430 <malloc+0xc>)
 800b426:	4601      	mov	r1, r0
 800b428:	6818      	ldr	r0, [r3, #0]
 800b42a:	f000 b82b 	b.w	800b484 <_malloc_r>
 800b42e:	bf00      	nop
 800b430:	20000078 	.word	0x20000078

0800b434 <free>:
 800b434:	4b02      	ldr	r3, [pc, #8]	; (800b440 <free+0xc>)
 800b436:	4601      	mov	r1, r0
 800b438:	6818      	ldr	r0, [r3, #0]
 800b43a:	f000 b8f3 	b.w	800b624 <_free_r>
 800b43e:	bf00      	nop
 800b440:	20000078 	.word	0x20000078

0800b444 <sbrk_aligned>:
 800b444:	b570      	push	{r4, r5, r6, lr}
 800b446:	4e0e      	ldr	r6, [pc, #56]	; (800b480 <sbrk_aligned+0x3c>)
 800b448:	460c      	mov	r4, r1
 800b44a:	6831      	ldr	r1, [r6, #0]
 800b44c:	4605      	mov	r5, r0
 800b44e:	b911      	cbnz	r1, 800b456 <sbrk_aligned+0x12>
 800b450:	f000 f8ac 	bl	800b5ac <_sbrk_r>
 800b454:	6030      	str	r0, [r6, #0]
 800b456:	4621      	mov	r1, r4
 800b458:	4628      	mov	r0, r5
 800b45a:	f000 f8a7 	bl	800b5ac <_sbrk_r>
 800b45e:	1c43      	adds	r3, r0, #1
 800b460:	d00a      	beq.n	800b478 <sbrk_aligned+0x34>
 800b462:	1cc4      	adds	r4, r0, #3
 800b464:	f024 0403 	bic.w	r4, r4, #3
 800b468:	42a0      	cmp	r0, r4
 800b46a:	d007      	beq.n	800b47c <sbrk_aligned+0x38>
 800b46c:	1a21      	subs	r1, r4, r0
 800b46e:	4628      	mov	r0, r5
 800b470:	f000 f89c 	bl	800b5ac <_sbrk_r>
 800b474:	3001      	adds	r0, #1
 800b476:	d101      	bne.n	800b47c <sbrk_aligned+0x38>
 800b478:	f04f 34ff 	mov.w	r4, #4294967295
 800b47c:	4620      	mov	r0, r4
 800b47e:	bd70      	pop	{r4, r5, r6, pc}
 800b480:	20000af0 	.word	0x20000af0

0800b484 <_malloc_r>:
 800b484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b488:	1ccd      	adds	r5, r1, #3
 800b48a:	f025 0503 	bic.w	r5, r5, #3
 800b48e:	3508      	adds	r5, #8
 800b490:	2d0c      	cmp	r5, #12
 800b492:	bf38      	it	cc
 800b494:	250c      	movcc	r5, #12
 800b496:	2d00      	cmp	r5, #0
 800b498:	4607      	mov	r7, r0
 800b49a:	db01      	blt.n	800b4a0 <_malloc_r+0x1c>
 800b49c:	42a9      	cmp	r1, r5
 800b49e:	d905      	bls.n	800b4ac <_malloc_r+0x28>
 800b4a0:	230c      	movs	r3, #12
 800b4a2:	603b      	str	r3, [r7, #0]
 800b4a4:	2600      	movs	r6, #0
 800b4a6:	4630      	mov	r0, r6
 800b4a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4ac:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b580 <_malloc_r+0xfc>
 800b4b0:	f000 f868 	bl	800b584 <__malloc_lock>
 800b4b4:	f8d8 3000 	ldr.w	r3, [r8]
 800b4b8:	461c      	mov	r4, r3
 800b4ba:	bb5c      	cbnz	r4, 800b514 <_malloc_r+0x90>
 800b4bc:	4629      	mov	r1, r5
 800b4be:	4638      	mov	r0, r7
 800b4c0:	f7ff ffc0 	bl	800b444 <sbrk_aligned>
 800b4c4:	1c43      	adds	r3, r0, #1
 800b4c6:	4604      	mov	r4, r0
 800b4c8:	d155      	bne.n	800b576 <_malloc_r+0xf2>
 800b4ca:	f8d8 4000 	ldr.w	r4, [r8]
 800b4ce:	4626      	mov	r6, r4
 800b4d0:	2e00      	cmp	r6, #0
 800b4d2:	d145      	bne.n	800b560 <_malloc_r+0xdc>
 800b4d4:	2c00      	cmp	r4, #0
 800b4d6:	d048      	beq.n	800b56a <_malloc_r+0xe6>
 800b4d8:	6823      	ldr	r3, [r4, #0]
 800b4da:	4631      	mov	r1, r6
 800b4dc:	4638      	mov	r0, r7
 800b4de:	eb04 0903 	add.w	r9, r4, r3
 800b4e2:	f000 f863 	bl	800b5ac <_sbrk_r>
 800b4e6:	4581      	cmp	r9, r0
 800b4e8:	d13f      	bne.n	800b56a <_malloc_r+0xe6>
 800b4ea:	6821      	ldr	r1, [r4, #0]
 800b4ec:	1a6d      	subs	r5, r5, r1
 800b4ee:	4629      	mov	r1, r5
 800b4f0:	4638      	mov	r0, r7
 800b4f2:	f7ff ffa7 	bl	800b444 <sbrk_aligned>
 800b4f6:	3001      	adds	r0, #1
 800b4f8:	d037      	beq.n	800b56a <_malloc_r+0xe6>
 800b4fa:	6823      	ldr	r3, [r4, #0]
 800b4fc:	442b      	add	r3, r5
 800b4fe:	6023      	str	r3, [r4, #0]
 800b500:	f8d8 3000 	ldr.w	r3, [r8]
 800b504:	2b00      	cmp	r3, #0
 800b506:	d038      	beq.n	800b57a <_malloc_r+0xf6>
 800b508:	685a      	ldr	r2, [r3, #4]
 800b50a:	42a2      	cmp	r2, r4
 800b50c:	d12b      	bne.n	800b566 <_malloc_r+0xe2>
 800b50e:	2200      	movs	r2, #0
 800b510:	605a      	str	r2, [r3, #4]
 800b512:	e00f      	b.n	800b534 <_malloc_r+0xb0>
 800b514:	6822      	ldr	r2, [r4, #0]
 800b516:	1b52      	subs	r2, r2, r5
 800b518:	d41f      	bmi.n	800b55a <_malloc_r+0xd6>
 800b51a:	2a0b      	cmp	r2, #11
 800b51c:	d917      	bls.n	800b54e <_malloc_r+0xca>
 800b51e:	1961      	adds	r1, r4, r5
 800b520:	42a3      	cmp	r3, r4
 800b522:	6025      	str	r5, [r4, #0]
 800b524:	bf18      	it	ne
 800b526:	6059      	strne	r1, [r3, #4]
 800b528:	6863      	ldr	r3, [r4, #4]
 800b52a:	bf08      	it	eq
 800b52c:	f8c8 1000 	streq.w	r1, [r8]
 800b530:	5162      	str	r2, [r4, r5]
 800b532:	604b      	str	r3, [r1, #4]
 800b534:	4638      	mov	r0, r7
 800b536:	f104 060b 	add.w	r6, r4, #11
 800b53a:	f000 f829 	bl	800b590 <__malloc_unlock>
 800b53e:	f026 0607 	bic.w	r6, r6, #7
 800b542:	1d23      	adds	r3, r4, #4
 800b544:	1af2      	subs	r2, r6, r3
 800b546:	d0ae      	beq.n	800b4a6 <_malloc_r+0x22>
 800b548:	1b9b      	subs	r3, r3, r6
 800b54a:	50a3      	str	r3, [r4, r2]
 800b54c:	e7ab      	b.n	800b4a6 <_malloc_r+0x22>
 800b54e:	42a3      	cmp	r3, r4
 800b550:	6862      	ldr	r2, [r4, #4]
 800b552:	d1dd      	bne.n	800b510 <_malloc_r+0x8c>
 800b554:	f8c8 2000 	str.w	r2, [r8]
 800b558:	e7ec      	b.n	800b534 <_malloc_r+0xb0>
 800b55a:	4623      	mov	r3, r4
 800b55c:	6864      	ldr	r4, [r4, #4]
 800b55e:	e7ac      	b.n	800b4ba <_malloc_r+0x36>
 800b560:	4634      	mov	r4, r6
 800b562:	6876      	ldr	r6, [r6, #4]
 800b564:	e7b4      	b.n	800b4d0 <_malloc_r+0x4c>
 800b566:	4613      	mov	r3, r2
 800b568:	e7cc      	b.n	800b504 <_malloc_r+0x80>
 800b56a:	230c      	movs	r3, #12
 800b56c:	603b      	str	r3, [r7, #0]
 800b56e:	4638      	mov	r0, r7
 800b570:	f000 f80e 	bl	800b590 <__malloc_unlock>
 800b574:	e797      	b.n	800b4a6 <_malloc_r+0x22>
 800b576:	6025      	str	r5, [r4, #0]
 800b578:	e7dc      	b.n	800b534 <_malloc_r+0xb0>
 800b57a:	605b      	str	r3, [r3, #4]
 800b57c:	deff      	udf	#255	; 0xff
 800b57e:	bf00      	nop
 800b580:	20000aec 	.word	0x20000aec

0800b584 <__malloc_lock>:
 800b584:	4801      	ldr	r0, [pc, #4]	; (800b58c <__malloc_lock+0x8>)
 800b586:	f000 b84b 	b.w	800b620 <__retarget_lock_acquire_recursive>
 800b58a:	bf00      	nop
 800b58c:	20000c30 	.word	0x20000c30

0800b590 <__malloc_unlock>:
 800b590:	4801      	ldr	r0, [pc, #4]	; (800b598 <__malloc_unlock+0x8>)
 800b592:	f000 b846 	b.w	800b622 <__retarget_lock_release_recursive>
 800b596:	bf00      	nop
 800b598:	20000c30 	.word	0x20000c30

0800b59c <memset>:
 800b59c:	4402      	add	r2, r0
 800b59e:	4603      	mov	r3, r0
 800b5a0:	4293      	cmp	r3, r2
 800b5a2:	d100      	bne.n	800b5a6 <memset+0xa>
 800b5a4:	4770      	bx	lr
 800b5a6:	f803 1b01 	strb.w	r1, [r3], #1
 800b5aa:	e7f9      	b.n	800b5a0 <memset+0x4>

0800b5ac <_sbrk_r>:
 800b5ac:	b538      	push	{r3, r4, r5, lr}
 800b5ae:	4d06      	ldr	r5, [pc, #24]	; (800b5c8 <_sbrk_r+0x1c>)
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	4604      	mov	r4, r0
 800b5b4:	4608      	mov	r0, r1
 800b5b6:	602b      	str	r3, [r5, #0]
 800b5b8:	f7f7 f8ba 	bl	8002730 <_sbrk>
 800b5bc:	1c43      	adds	r3, r0, #1
 800b5be:	d102      	bne.n	800b5c6 <_sbrk_r+0x1a>
 800b5c0:	682b      	ldr	r3, [r5, #0]
 800b5c2:	b103      	cbz	r3, 800b5c6 <_sbrk_r+0x1a>
 800b5c4:	6023      	str	r3, [r4, #0]
 800b5c6:	bd38      	pop	{r3, r4, r5, pc}
 800b5c8:	20000c2c 	.word	0x20000c2c

0800b5cc <__errno>:
 800b5cc:	4b01      	ldr	r3, [pc, #4]	; (800b5d4 <__errno+0x8>)
 800b5ce:	6818      	ldr	r0, [r3, #0]
 800b5d0:	4770      	bx	lr
 800b5d2:	bf00      	nop
 800b5d4:	20000078 	.word	0x20000078

0800b5d8 <__libc_init_array>:
 800b5d8:	b570      	push	{r4, r5, r6, lr}
 800b5da:	4d0d      	ldr	r5, [pc, #52]	; (800b610 <__libc_init_array+0x38>)
 800b5dc:	4c0d      	ldr	r4, [pc, #52]	; (800b614 <__libc_init_array+0x3c>)
 800b5de:	1b64      	subs	r4, r4, r5
 800b5e0:	10a4      	asrs	r4, r4, #2
 800b5e2:	2600      	movs	r6, #0
 800b5e4:	42a6      	cmp	r6, r4
 800b5e6:	d109      	bne.n	800b5fc <__libc_init_array+0x24>
 800b5e8:	4d0b      	ldr	r5, [pc, #44]	; (800b618 <__libc_init_array+0x40>)
 800b5ea:	4c0c      	ldr	r4, [pc, #48]	; (800b61c <__libc_init_array+0x44>)
 800b5ec:	f000 f866 	bl	800b6bc <_init>
 800b5f0:	1b64      	subs	r4, r4, r5
 800b5f2:	10a4      	asrs	r4, r4, #2
 800b5f4:	2600      	movs	r6, #0
 800b5f6:	42a6      	cmp	r6, r4
 800b5f8:	d105      	bne.n	800b606 <__libc_init_array+0x2e>
 800b5fa:	bd70      	pop	{r4, r5, r6, pc}
 800b5fc:	f855 3b04 	ldr.w	r3, [r5], #4
 800b600:	4798      	blx	r3
 800b602:	3601      	adds	r6, #1
 800b604:	e7ee      	b.n	800b5e4 <__libc_init_array+0xc>
 800b606:	f855 3b04 	ldr.w	r3, [r5], #4
 800b60a:	4798      	blx	r3
 800b60c:	3601      	adds	r6, #1
 800b60e:	e7f2      	b.n	800b5f6 <__libc_init_array+0x1e>
 800b610:	0800b6f8 	.word	0x0800b6f8
 800b614:	0800b6f8 	.word	0x0800b6f8
 800b618:	0800b6f8 	.word	0x0800b6f8
 800b61c:	0800b6fc 	.word	0x0800b6fc

0800b620 <__retarget_lock_acquire_recursive>:
 800b620:	4770      	bx	lr

0800b622 <__retarget_lock_release_recursive>:
 800b622:	4770      	bx	lr

0800b624 <_free_r>:
 800b624:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b626:	2900      	cmp	r1, #0
 800b628:	d044      	beq.n	800b6b4 <_free_r+0x90>
 800b62a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b62e:	9001      	str	r0, [sp, #4]
 800b630:	2b00      	cmp	r3, #0
 800b632:	f1a1 0404 	sub.w	r4, r1, #4
 800b636:	bfb8      	it	lt
 800b638:	18e4      	addlt	r4, r4, r3
 800b63a:	f7ff ffa3 	bl	800b584 <__malloc_lock>
 800b63e:	4a1e      	ldr	r2, [pc, #120]	; (800b6b8 <_free_r+0x94>)
 800b640:	9801      	ldr	r0, [sp, #4]
 800b642:	6813      	ldr	r3, [r2, #0]
 800b644:	b933      	cbnz	r3, 800b654 <_free_r+0x30>
 800b646:	6063      	str	r3, [r4, #4]
 800b648:	6014      	str	r4, [r2, #0]
 800b64a:	b003      	add	sp, #12
 800b64c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b650:	f7ff bf9e 	b.w	800b590 <__malloc_unlock>
 800b654:	42a3      	cmp	r3, r4
 800b656:	d908      	bls.n	800b66a <_free_r+0x46>
 800b658:	6825      	ldr	r5, [r4, #0]
 800b65a:	1961      	adds	r1, r4, r5
 800b65c:	428b      	cmp	r3, r1
 800b65e:	bf01      	itttt	eq
 800b660:	6819      	ldreq	r1, [r3, #0]
 800b662:	685b      	ldreq	r3, [r3, #4]
 800b664:	1949      	addeq	r1, r1, r5
 800b666:	6021      	streq	r1, [r4, #0]
 800b668:	e7ed      	b.n	800b646 <_free_r+0x22>
 800b66a:	461a      	mov	r2, r3
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	b10b      	cbz	r3, 800b674 <_free_r+0x50>
 800b670:	42a3      	cmp	r3, r4
 800b672:	d9fa      	bls.n	800b66a <_free_r+0x46>
 800b674:	6811      	ldr	r1, [r2, #0]
 800b676:	1855      	adds	r5, r2, r1
 800b678:	42a5      	cmp	r5, r4
 800b67a:	d10b      	bne.n	800b694 <_free_r+0x70>
 800b67c:	6824      	ldr	r4, [r4, #0]
 800b67e:	4421      	add	r1, r4
 800b680:	1854      	adds	r4, r2, r1
 800b682:	42a3      	cmp	r3, r4
 800b684:	6011      	str	r1, [r2, #0]
 800b686:	d1e0      	bne.n	800b64a <_free_r+0x26>
 800b688:	681c      	ldr	r4, [r3, #0]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	6053      	str	r3, [r2, #4]
 800b68e:	440c      	add	r4, r1
 800b690:	6014      	str	r4, [r2, #0]
 800b692:	e7da      	b.n	800b64a <_free_r+0x26>
 800b694:	d902      	bls.n	800b69c <_free_r+0x78>
 800b696:	230c      	movs	r3, #12
 800b698:	6003      	str	r3, [r0, #0]
 800b69a:	e7d6      	b.n	800b64a <_free_r+0x26>
 800b69c:	6825      	ldr	r5, [r4, #0]
 800b69e:	1961      	adds	r1, r4, r5
 800b6a0:	428b      	cmp	r3, r1
 800b6a2:	bf04      	itt	eq
 800b6a4:	6819      	ldreq	r1, [r3, #0]
 800b6a6:	685b      	ldreq	r3, [r3, #4]
 800b6a8:	6063      	str	r3, [r4, #4]
 800b6aa:	bf04      	itt	eq
 800b6ac:	1949      	addeq	r1, r1, r5
 800b6ae:	6021      	streq	r1, [r4, #0]
 800b6b0:	6054      	str	r4, [r2, #4]
 800b6b2:	e7ca      	b.n	800b64a <_free_r+0x26>
 800b6b4:	b003      	add	sp, #12
 800b6b6:	bd30      	pop	{r4, r5, pc}
 800b6b8:	20000aec 	.word	0x20000aec

0800b6bc <_init>:
 800b6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6be:	bf00      	nop
 800b6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6c2:	bc08      	pop	{r3}
 800b6c4:	469e      	mov	lr, r3
 800b6c6:	4770      	bx	lr

0800b6c8 <_fini>:
 800b6c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6ca:	bf00      	nop
 800b6cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6ce:	bc08      	pop	{r3}
 800b6d0:	469e      	mov	lr, r3
 800b6d2:	4770      	bx	lr
